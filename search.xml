<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>JavaScript对象拷贝</title>
      <link href="/javascript-object-copy.html"/>
      <content type="html"><![CDATA[<p>基于JavaScript 对象拷贝的一些思考。</p><p>如今<code>ES6</code> 有很多方法拷贝对象，如<code>Object.assign()</code> 方法 或者 <code>...</code> 的方式 都是浅拷贝，即 <strong>只会拷贝源对象自身的并且可枚举的属性到目标对象</strong> .</p><p>同时网上盛传的 <code>牛(奇)逼(技)方(淫)法(巧)</code> ===&gt; <code>JSON.parse(JSON.stringify(object))</code>,看似快速的把一个对象进行了深拷贝，但实际只是取巧，并没有完成真真的深拷贝。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  a<span class="token punctuation">:</span> <span class="token string">'1'</span><span class="token punctuation">,</span>  b<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  c<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  d<span class="token punctuation">:</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token number">13</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// { a: '1', b: 2, c: [Function: c], d: null }</span><span class="token keyword">let</span> obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// { a: '1', b: 2, d: { a: 12, b: 13 } }</span></code></pre><p>可以看出 这方法甚至连 function都无法拷贝</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>sayHello <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">'say hello'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> boy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'bella'</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span></code></pre><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-7-28/22200478.jpg" alt=""></p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-7-28/99394591.jpg" alt=""></p><p>可以看出  <code>JSON.parse</code> 的方式丢失了太多的东西.    So.十分不推荐这种方式。</p><p>在<code>jQuery</code> 时代 可能根本不会考虑 所谓的<code>深拷贝</code> <code>浅拷贝</code> 这些问题，原因是 <code>jQuery</code> 把一切都准备好了。那看看 <code>jQuery</code> 是如何实现的。</p><p>下载<code>jQuery  3.3.1</code> 源码 找到 <code>dist/core.js</code> 只有短短400行代码。其中最重要的方法就是 <code>jQuery.extend = jQuery.fn.extend</code>  </p><pre class=" language-javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> options<span class="token punctuation">,</span> name<span class="token punctuation">,</span> src<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> copyIsArray<span class="token punctuation">,</span> clone<span class="token punctuation">,</span>        target <span class="token operator">=</span> arguments<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>        length <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span>        deep <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// Handle a deep copy situation</span>  <span class="token comment" spellcheck="true">// 判断第一个参数是不是布尔值,如果是则赋值给 deep 表示是否进行深拷贝</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">"boolean"</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        deep <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Skip the boolean and the target</span>    <span class="token comment" spellcheck="true">// 是否存在第二个参数 赋 空对象</span>        target <span class="token operator">=</span> arguments<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Handle case when target is a string or something (possible in deep copy)</span>  <span class="token comment" spellcheck="true">// 如果 第二个参数 既不是对象也不是 函数 则给空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isFunction</span><span class="token punctuation">(</span> target <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Extend jQuery itself if only one argument is passed</span>  <span class="token comment" spellcheck="true">// 如果只传入一个参数 则扩展目标为 this , jquery 本身 </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> i <span class="token operator">===</span> length <span class="token punctuation">)</span> <span class="token punctuation">{</span>        target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历每个参数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Only deal with non-null/undefined values</span>        <span class="token comment" spellcheck="true">// 将参数赋值给options</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> options <span class="token operator">=</span> arguments<span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Extend the base object</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span> name <span class="token keyword">in</span> options <span class="token punctuation">)</span> <span class="token punctuation">{</span>                src <span class="token operator">=</span> target<span class="token punctuation">[</span> name <span class="token punctuation">]</span><span class="token punctuation">;</span>                copy <span class="token operator">=</span> options<span class="token punctuation">[</span> name <span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Prevent never-ending loop</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> target <span class="token operator">===</span> copy <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">// Recurse if we're merging plain objects or arrays</span>                 <span class="token comment" spellcheck="true">// 如果 要copy的值是 简单对象或者是数组则对其进行递归取值拷贝</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span> deep <span class="token operator">&amp;&amp;</span> copy <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> jQuery<span class="token punctuation">.</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span> copy <span class="token punctuation">)</span> <span class="token operator">||</span>                    <span class="token punctuation">(</span> copyIsArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span> copy <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 使用 "短路" 技巧  &amp;&amp;， 第一个值为true 返回第二个值，否则返回第一个</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span> copyIsArray <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        copyIsArray <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                        clone <span class="token operator">=</span> src <span class="token operator">&amp;&amp;</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span> src <span class="token punctuation">)</span> <span class="token operator">?</span> src <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        clone <span class="token operator">=</span> src <span class="token operator">&amp;&amp;</span> jQuery<span class="token punctuation">.</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span> src <span class="token punctuation">)</span> <span class="token operator">?</span> src <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// Never move original objects, clone them</span>                    target<span class="token punctuation">[</span> name <span class="token punctuation">]</span> <span class="token operator">=</span> jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span> deep<span class="token punctuation">,</span> clone<span class="token punctuation">,</span> copy <span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Don't bring in undefined values</span>                 <span class="token comment" spellcheck="true">// 如果是元数据类型直接复制该值</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> copy <span class="token operator">!==</span> undefined <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    target<span class="token punctuation">[</span> name <span class="token punctuation">]</span> <span class="token operator">=</span> copy<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Return the modified object</span>    <span class="token keyword">return</span> target<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>通过一系列的递归操作 完成对一个对象的深拷贝，当然这也是有代价的—效率很低。</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue技术栈做后台管理系统填坑日记(基础篇)</title>
      <link href="/vue-technology-stack-to-do-the-backend-management-system-filling-pit-diary-basic-articles.html"/>
      <content type="html"><![CDATA[<blockquote><p>对最近所做的基于<code>Vue/Vue-router/Vuex/Element-ui/axios</code>的后台管理系统(目前只涉及基础系统管理、权限管理方面)的<strong>填坑日记</strong>。本次准备写一系列文章，对该系统到目前为止遇到的坑做一次全面总结，为了防止自己偷懒，先把坑准备好。</p></blockquote><p>废话少说，直入正题。</p><h4 id="技术选型及项目搭建"><a href="#技术选型及项目搭建" class="headerlink" title="技术选型及项目搭建"></a>技术选型及项目搭建</h4><p>关于技术选型，我之前也没有任何<code>Vue</code> 实战经验，所以只能选一些使用比较广泛的方案，前期主要参考了一些开源项目，如 : <a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a> 及该作者的 <a href="https://segmentfault.com/blog/hand-to-hand" target="_blank" rel="noopener">手摸手系列文章</a>，iview 团队的 <a href="https://github.com/iview/iview-admin" target="_blank" rel="noopener">iview-admin</a> ,这两个项目对我启发很大，特别感谢 <a href="https://github.com/PanJiaChen" target="_blank" rel="noopener">花裤衩</a> 及 <a href="https://github.com/iview" target="_blank" rel="noopener">iview</a> 团队。<em>（值得一提的是，再此期间阅读iview-admin 2.0 源码时发现一些小bug，为项目提交了PR，并被作者采纳。小小虚荣一下，虽然是些简单的小问题。）</em></p><p>正题，技术选型如下：</p><ul><li>Vue 全家桶，<code>vue 2.5+</code>  <code>vue-cli 3.x</code> <code>vue-router</code> <code>vuex</code> </li><li>Axios ，一个基于<code>promise</code> 的 <code>HTTP</code> 库（并在此基础上做了二次封装）</li><li>Element-ui，饿了么团队的 基于 Vue 2.0 的桌面端组件库 （扩展了一些常用组件库）</li></ul><p>以上是主要的技术框架，同时还使用了<code>stylus</code> css预处理器，阿里巴巴图标库 <code>iconfont</code> 等。</p><h5 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h5><p><code>vue-cli</code> 3.0 bate版发布后，引入了很多很cool的功能，基本的 <code>vue create</code> 初始化命令，可自定义初始化配置，不细说很容易看懂，这里没什么坑。新版本还引入了<code>UI初始化</code> 的方式，执行 <code>vue ui</code> 会在浏览器打开 <code>http://localhost:8080</code> ，以<code>web ui</code>的方式配置项目，非常人性化。同时还有 <code>@vue/cli-service</code> 效果非常类似<code>create-react-app</code> 的<code>react-scripts</code> ，也是非常的好用，集成了<code>webpack-dev-server</code> 等插件，并带有热重载、保存时 lint 校验，以及生产环境可用的构建版本。配置相比较 <code>react-scripts</code> 也是更灵活，采用在项目根路径下创建<code>vue.config.js</code> 来配置项目。几乎不用配置就能启动一个基础的项目。总之非常好用！推荐！</p><p><a href="https://github.com/vuejs/vue-cli/blob/46dd8555fa5820ffa2aaa14b04fc214c51a34d0c/docs/config/README.md" target="_blank" rel="noopener">配置方式</a>         <a href="https://cli.vuejs.org/" target="_blank" rel="noopener">CLI文档</a>   </p><p>项目结构：（懒得截图了直接偷得图-.-）</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-6-27/16673030.jpg" alt=""></p><h5 id="依赖模块及项目结构调整"><a href="#依赖模块及项目结构调整" class="headerlink" title="依赖模块及项目结构调整"></a>依赖模块及项目结构调整</h5><p>然后安装 <code>axios</code> <code>element-ui</code> <code>mockjs</code> <code>js-cookies</code> <code>stylus</code> 等，并在<code>src</code> 下新建基础项目结构。</p><pre><code>.├── public│   ├── favicon.ico│   └── index.html                                // html 模板文件├── config│   ├── url.js                                    // 根据环境变量导出不同的api地址│   └── env.js                                    // 项目启动时根据环境 注入不同的环境变量├── src                                         //│   ├── api                                     // 所有数据请求接口的方法│   │   ├── index.js│   │   └── modules                                // 跟view/modules 对应│   ├── assets                                  // 资源文件夹│   │   ├── iconfont                            // 图标│   │   ├── images                              // 图片│   │   └── styles                              // 全局/公共样式│   ├── components                              // 全局/公共 组件│   ├── directives                              // 自定义指令(如按钮权限判断指令等)│   ├── router                                  // 路由│   │   ├── import-development.js                // 开发环境下采用require方式引入组件│   │   ├── import-production.js                // 生产环境下采用import方式引入组件│   │   └── index.js                            // 根据环境不同提供不同的引入方式方法│   ├── store                                   // vuex store 相关│   │   ├── getters.js                            // getters│   │   ├── index.js                            // 合并modules下的所有store│   │   └── modules                                // 按照功能模块拆分store│   ├── mock                                    // mockjs 数据模拟相关方法│   ├── utils                                   // 工具类│   │   ├── httpRequest.js                        // axios 二次封装│   │   ├── index.js│   │   ├── tokenUtil.js                        // jwt token 工具类│   │   └── validate.js                            // 表单验证的一些通用方法│   └── views                                   // 视图│   │   ├── commons                             // 通用视图(页),如login/error/404等.│   │   ├── layout                              // 布局 包括(header/sidebar/footer等)│   │   └── modules                             // 页面按模块分│   ├── main.js                                 // 入口│   └── App.vue                                 // 根组件├── vue.config.js                               // vue-cli 3.x 配置项├── package.json├── README.md                                   // 项目说明文件├── babel.config.js                             // babel 配置└── yarn.lock                                    </code></pre><p><em>这里安利一个生成文件树结构的小工具 <a href="http://yijiebuyi.com/blog/c0defa3a47d16e675d58195adc35514b.html" target="_blank" rel="noopener">Tree</a></em> ，至此项目搭建完成，下面就开干了。</p><h5 id="基础工具封装"><a href="#基础工具封装" class="headerlink" title="基础工具封装"></a>基础工具封装</h5><ol><li>首先对<code>axios</code> 来一波二次封装，主要是对 请求/响应的拦截处理 ， <code>jwt-token</code> 处理，全局错误处理及请求方法封装。</li><li><code>Layout</code> 的构建 <code>header</code> <code>sidebar</code> <code>footer</code> 及 <code>sidebar</code> 里面的 <code>menu</code> 封装。</li><li>基础组件，<code>TreeMenu</code> <code>IconPicker</code> <code>DataTable(搜索栏及分页条整合)</code> <code>富文本编辑器</code>   <code>TreeTable</code> 等</li><li><code>mockjs</code> 基础方法</li></ol>]]></content>
      
      
    </entry>
    
    <entry>
      <title>读《斜杠青年》有感</title>
      <link href="/reading-slash-youth.html"/>
      <content type="html"><![CDATA[<p>​    最近在读一本书《斜杠青年》，一位美女<code>Slash</code>写的很有意思的一本书。我不称她为作家，因为她有很多Title。<br>    Slash/斜杠青年`，第一次听到这个词是在一部电视剧中，剧中男主是一名牙医/恋爱专家两个Title，自称斜杠青年。我认识中的斜杆青年就是有多份工作+多份收入，好羡慕😍..</p><blockquote><p>现在很多人在遇到“你是做什么的”之类的问题时，他们并不能像其他人一样用一个完整的词来介绍自己的身份，而是选择用“斜杠”来区分不同的身份，于是<code>斜杠青年（Slasher）</code>一词便诞生了。</p><p>Slash不是简单的身兼数职，而是在主业之外拓展多元技能，充分发挥你的潜能。现在的业余爱好，未来可能就是你的谋生手段。</p></blockquote><p>​    书中讲述了她(作者)如何一步步成为一个<code>Slasher</code>，她给自己写下了一段话：<strong>You have a choice 你有选择的自由</strong>，目的是提醒自己，人生中无论遇到任何事情，我都要意识到自己有选择的权利，我可以选择消极被动，也可以选择积极主动。</p><p>​    我们对于自我的认识很大程度上取决于外在世界给我们的反馈，然而从小到大我们获得的大部分反馈都是负面和消极的；小时候，当我们做错了事情的时候，父母会责骂：“你为什么不听话？”，学习成绩不好时，老师会鄙视：“你为什么那么笨！”，即使长大成人，开始工作后，我们也一直生活在与他人的对比之中。总之，所有的信息都在告诉我们“你不够好！”。久而久之，它便成了我们根深蒂固的信念。每当我们想尝试的时候，这种信念便会跳出来阻止我们。</p><p>​    这种心理状态会导致一种恶性循环，因为一个人越被动消极，他获得成就的可能性越低，这又会进一步强化“我不行”的信念。心理学的相关研究已经证明了消极的心态会抑制我们的潜能，让人的视野变得狭隘，看不到机会与可能性，因此就会变得被动变得无助。相反，积极快乐的情绪能够导致更好的表现。</p><p>​     事实上，消极被动的心理状态在现实生活中十分普遍。遇到困难或问题的第一反应都是向外求助，把希望寄托在别人身上，渴望别人给自己答案，却很少主动去想解决办法。大家都渴望不一样的人生，然而却永远都只停留在羡慕阶段，或者到处“寻医问药”，期盼他人告诉自己改变人生的方法。</p><p>​    下面说回我的本职工作——–程序猿，我的一天就是：创造问题-解决问题-发现问题-解决问题…死循环一直重复，每天都要遇到或多或少或简单或复杂的各种问题，每次遇到问题的第一反应都是百度/Google 寻找答案，我不得不承认这种方式在处理多数问题时效率很高，时间长了任何问题都不假思索的打开搜索引擎寻找答案，如此以往我发现我成为了一个只会用搜索引擎的人，失去了一开始的兴趣，失去了独立思考的能力。每次想到这些，都会下意识的回答自己：“都是面向工资编程，我也不想啊!”.. </p><p>​    </p>]]></content>
      
      <categories>
          
          <category> 自言语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Github快速访问/下载</title>
      <link href="/github-quick-access-download.html"/>
      <content type="html"><![CDATA[<blockquote><p>今天无聊翻github上的项目学习,发现某个项目有几处错误，本想提PR的，clone 项目的时候速度慢的我想砸电脑。。挂了ss也不行。无奈翻Google、baidu，寻找解决办法。功夫不负有心人，有同样问题的人还真不少。</p></blockquote><h5 id="Github-访问速度慢"><a href="#Github-访问速度慢" class="headerlink" title="Github 访问速度慢"></a>Github 访问速度慢</h5><p>​    访问<code>github</code>经常有打不开或者等十几二十秒甚至更长时间的情况。每次打开github的时候我都会一次打开多页，然后拿起手机刷几篇文章…这种体验真的非常差。挂 ss 也没有改善，无论是全局模式还是PAC模式，不太懂为什么….</p><p>不说废话了，进入正题。</p><p>​    经分析（别人分析的😂）发现，主要是因为一般访问Github会有两部分请求：主站的访问和二级域名的资源加载（比如样式文件等），主要是 <code>assets-cdn.github.com</code>、<code>avatars0.githubusercontent.com</code> 以及 <code>avatars1.githubusercontent.com</code> 三个域名的解析问题。</p><p>​    我们都知道访问域名实际上需要先去DNS服务器解析成对应的ip，然后访问服务器ip以获取资源，于是就有了 修改 系统 <code>hosts</code> 文件映射的解决方案，即 直接把 <em>域名</em> ==&gt; <em>IP</em> 映射起来，使访问域名时不需要去DNS服务器 解析ip，直接使用本地映射ip访问。</p><p>通过<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> 分别查询上述三个域名及<code>www.github.com</code> 以得到相对快速的 DNS，然后修改 <code>hosts</code> 的映射。</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-6-16/89168044.jpg" alt=""></p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-6-16/26148918.jpg" alt=""></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这是我这里查出来的结果,可能不一样.</span>192.30.253.112 www.github.com151.101.184.133 assets-cdn.github.com151.101.112.133 avatars0.githubusercontent.com151.101.184.133 avatars1.githubusercontent.com</code></pre><p>当然如果懒得查 这里有一份 现成的不一定可用，但值得一试🤣🤣</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># GitHub Start </span>192.30.253.112 github.com 192.30.253.118 gist.github.com 151.101.184.133 assets-cdn.github.com 151.101.184.133 raw.githubusercontent.com 151.101.12.133 gist.githubusercontent.com 151.101.112.133 cloud.githubusercontent.com 151.101.184.133 camo.githubusercontent.com 151.101.112.133 avatars0.githubusercontent.com 151.101.184.133 avatars1.githubusercontent.com 151.101.184.133 avatars2.githubusercontent.com 151.101.112.133 avatars3.githubusercontent.com 151.101.12.133 avatars4.githubusercontent.com 151.101.112.133 avatars5.githubusercontent.com 151.101.12.133 avatars6.githubusercontent.com 151.101.112.133 avatars7.githubusercontent.com 151.101.12.133 avatars8.githubusercontent.com <span class="token comment" spellcheck="true"># GitHub End</span></code></pre><p>最后一步：添加上述内容至 <code>hosts</code> 文件 <code>sodu vim /etc/hosts</code> 。</p><p><a href="https://github.com/" target="_blank" rel="noopener">试一试</a> ~~~ （ps:好惊喜,好意外!）</p><p>我这里实测，首页完全加载完成大概需要3s左右..内页平均响应不超过3s</p><h5 id="Git-Clone-命令慢"><a href="#Git-Clone-命令慢" class="headerlink" title="Git Clone 命令慢"></a>Git Clone 命令慢</h5><p>​    这个问题没有什么比较好的解决办法，我目前只知道使用<code>VPN</code> 或者 <code>SS</code> 等代理工具来解决。</p><p>我使用ss全局模式 也没有任何改善。后来发现ss全局模式也无法影响到 终端。。于是想到给终端开启代理，但是也并没有什么卵用，于是翻了翻Google 无意间发现 <code>git</code> 也是可以设置代理的。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 设置代理</span><span class="token function">git</span> config --global http.proxy http://127.0.0.1:1087<span class="token function">git</span> config --global https.proxy http://127.0.0.1:1087<span class="token comment" spellcheck="true">#取消设置代理</span><span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy</code></pre><p>实测无需设置 <code>socks5</code> 代理。</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-6-16/71461407.jpg" alt=""></p><p>效果简直立竿见影!!</p>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解决跨域问题,CORS及JSONP</title>
      <link href="/solve-crossdomain-issues-cors-and-jsonp.html"/>
      <content type="html"><![CDATA[<p>半夜刷掘金,看到一篇关于前端跨域请求的文章,突发灵感觉得深夜撸一篇.(为了补上这段时间拉下的作业.)</p><blockquote><p>如题,最近做<code>vue</code>项目,前后端分离使用了 <code>axios</code> 发现每次除<code>GET</code>请求外的请求都会发两次请求.且两次都是成功的,虽然一切看起来都是正常的.但总感觉怪怪的.但也一直没有深究,今天刷到那篇问题发现有人跟我有一样的疑问,就查了一些资料.</p></blockquote><h5 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域?"></a>什么是跨域?</h5><p>这个问题主要出于浏览器的<strong>同源策略</strong> ,其限制了从同一个源加载的文档或脚本如何与来自另一个源的资源进行交互.这是一个用于隔离潜在恶意文件的重要安全机制.</p><p>同源策略: 两个页面的协议,端口（如果有指定）和域名(或IP)都相同,则两个资源具有相同的源(三者缺一不可),否则会浏览器限制了发起跨站请求,也可能是跨站请求可以正常发起,但是返回结果被浏览器拦截.</p><p>那么在现在前后端分离的大环境下(但不局限于这种情况),这种策略必然会对开发带来诸多的障碍.解决这个问题,目前来说,我了解的有两种解决方案:</p><ol><li>CORS</li><li>JSONP</li></ol><p>两种方案各有优劣:<code>CORS</code>方案相对较新,所有对老式浏览器兼容不佳,<code>JSONP</code>方案兼容性尚可,但仅限于<code>GET</code>请求.</p><h5 id="CORS"><a href="#CORS" class="headerlink" title="CORS"></a>CORS</h5><blockquote><p>CORS是一个W3C标准,全称是”跨域资源共享”（Cross-origin resource sharing）.</p><p>它允许浏览器向跨源服务器,发出<code>XMLHttpRequest</code>请求,从而克服了<code>AJAX</code>只能<code>同源</code>使用的限制.</p></blockquote><p>查阅MDN 的<code>CORS</code> 文档,其给出了如下解释:</p><p>​    跨域资源共享标准新增了一组 HTTP 首部字段,允许服务器声明哪些源站有权限访问哪些资源.另外,规范要求,对那些可能对服务器数据产生副作用的 HTTP 请求方法（特别是 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/GET" target="_blank" rel="noopener"><code>GET</code></a> 以外的 HTTP 请求,或者搭配某些 MIME 类型的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/POST" target="_blank" rel="noopener"><code>POST</code></a> 请求）,浏览器必须首先使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Methods/OPTIONS" target="_blank" rel="noopener"><code>OPTIONS</code></a> 方法发起一个预检请求（preflight request）,从而获知服务端是否允许该跨域请求.服务器确认允许之后,才发起实际的 HTTP 请求.在预检请求的返回中,服务器端也可以通知客户端,是否需要携带身份凭证（包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Cookies" target="_blank" rel="noopener">Cookies </a>和 HTTP 认证相关数据）.</p><p>简单理解为:    其思想是使用自定义的HTTP头部让浏览器与服务器进行沟通,从而决定请求或响应是应该成功,还是应该失败.因此,要想实现CORS进行跨域,需要服务器进行一些设置,同时前端也需要做一些配置和分析.</p><p>回顾文章开头提到的问题.其第一次请求可以说是一次试探.</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-6-7/67721896.jpg" alt=""></p><hr><h5 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h5><p><em>看到这个东西时,我的第一反应是:这特么也太不优雅了吧…(后话)</em></p><p>JSONP (JSON with Padding) 是JSON的一种“使用模式”,字面上理解就是”填充式JSON”.可用于解决主流浏览器的跨域数据访问的问题.</p><p>基于对上面 <strong>同源策略</strong> 的了解,大神们发现:浏览器虽然限制了 <code>XMLHttpRequest</code> 同源,但是并没有限制 元素(img/script等..) <code>src</code> 属性,利用这个开放策略,网页可以得到从其他来源动态产生的 JSON 资料,用 JSONP 抓到的资料并不是 JSON,而是任意的JavaScript,用 JavaScript 直译器执行而不是用 JSON 解析器解析.</p><p>说了这么多废话,还是直接看代码吧:</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- A.html --></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JSONP 实例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            function jsonCallback(result) {                console.log(result)            }        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>        &lt;script type="text/javascript" src="http://zhangdi.site/data?callback="jsonCallback"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>解释一下这个代码:</p><p><code>&lt;script type=&quot;text/javascript&quot; src=&quot;http://zhangdi.site/data?callback=&quot;jsonCallback&quot;&gt;</code>得到的返回结果应该是一段由后端Serveice组装成的<code>JavaScript</code> 代码段:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">jsonCallback</span><span class="token punctuation">(</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'result data1'</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token string">'result data2'</span><span class="token punctuation">,</span>c<span class="token punctuation">:</span><span class="token string">'result data3'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>并且这段代码会被浏览器执行,调用<code>A.html</code> 的 <code>jsonCallback</code> 方法.从而得到后端service 返回的结果.</p><p>从上面可以看出<code>JSONP</code> 虽然解决了一些痛点,但是并非真正解决,(只能算是奇淫巧技罢了.),其缺陷也是非常明显,不支持<code>GET</code>请求之外的其他类型请求.</p><p>今天又水了一篇…⛽️⛽️~~</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>随笔-20180520</title>
      <link href="/essay-20180520.html"/>
      <content type="html"><![CDATA[<p>又有一段时间没更博客了,最近实在太忙了,很多有趣的东西都没有机会记录,今天是周末,小小的折腾一下,顺便就记录了;最近由于工作需要使用<code>vue</code> ,看了会儿文档就开工了,发现vscode 中开发很多不方便的地方.所以折腾一下.</p><p>(主要是太久没更新博客有点过意不去了🤣,随笔写点吧..)</p><ol><li>安装<code>vue</code> 推荐的 <code>Vetur</code> 插件.</li><li>设置<code>vscode</code> 为了适配<code>.vue</code> 文件个格式化同时和<code>eslint</code> 代码风格统一.</li></ol><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"workbench.startupEditor"</span><span class="token operator">:</span> <span class="token string">"newUntitledFile"</span><span class="token punctuation">,</span>    <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token property">"editor.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token property">"terminal.integrated.fontSize"</span><span class="token operator">:</span> <span class="token number">14</span><span class="token punctuation">,</span>    <span class="token property">"workbench.colorTheme"</span><span class="token operator">:</span> <span class="token string">"Material Theme"</span><span class="token punctuation">,</span>    // 要使用的代理设置。如果尚未设置，则将从 http_proxy 和 https_proxy 环境变量获取    <span class="token property">"http.proxy"</span><span class="token operator">:</span> <span class="token string">"https://127.0.0.1:1087"</span><span class="token punctuation">,</span>    <span class="token property">"workbench.iconTheme"</span><span class="token operator">:</span> <span class="token string">"eq-material-theme-icons"</span><span class="token punctuation">,</span>    <span class="token property">"window.zoomLevel"</span><span class="token operator">:</span> <span class="token number">1.5</span><span class="token punctuation">,</span>    <span class="token property">"vetur.format.defaultFormatter.html"</span><span class="token operator">:</span> <span class="token string">"js-beautify-html"</span><span class="token punctuation">,</span>    <span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>    <span class="token property">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"editor.quickSuggestions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"strings"</span><span class="token operator">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"javascript"</span><span class="token punctuation">,</span>        <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>        <span class="token string">"html"</span><span class="token punctuation">,</span>        <span class="token string">"vue"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            <span class="token property">"language"</span><span class="token operator">:</span> <span class="token string">"html"</span><span class="token punctuation">,</span>            <span class="token property">"autoFix"</span><span class="token operator">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    //每次保存的时候将代码按eslint格式进行修复(eslint<span class="token punctuation">)</span>    <span class="token property">"eslint.autoFixOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    //每次保存的时候自动格式化(编辑器<span class="token punctuation">)</span>    <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    // 以下为stylus配置    // 是否插入冒号    <span class="token property">"stylusSupremacy.insertColons"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 是否插入分号    <span class="token property">"stylusSupremacy.insertSemicolons"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 是否插入大括号    <span class="token property">"stylusSupremacy.insertBraces"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // import之后是否换行    <span class="token property">"stylusSupremacy.insertNewLineAroundImports"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    // 两个选择器中是否换行    <span class="token property">"stylusSupremacy.insertNewLineAroundBlocks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><ol><li><p>添加vue代码片段.(首选项—&gt;用户代码片段—&gt;搜索Vue—&gt;打开<code>vue.json</code>)</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    // Place your snippets for vue here. Each snippet is defined under a snippet name and has a prefix<span class="token punctuation">,</span> body and     // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are<span class="token operator">:</span>    // $<span class="token number">1</span><span class="token punctuation">,</span> $<span class="token number">2</span> for tab stops<span class="token punctuation">,</span> $<span class="token number">0</span> for the final cursor position<span class="token punctuation">,</span> and $<span class="token punctuation">{</span><span class="token number">1</span><span class="token operator">:</span>label<span class="token punctuation">}</span><span class="token punctuation">,</span> $<span class="token punctuation">{</span><span class="token number">2</span><span class="token operator">:</span>another<span class="token punctuation">}</span> for placeholders. Placeholders with the     // same ids are connected.    // Example<span class="token operator">:</span>    // <span class="token property">"Print to console"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    //     <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"log"</span><span class="token punctuation">,</span>    //     <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    //         <span class="token string">"console.log('$1');"</span><span class="token punctuation">,</span>    //         <span class="token string">"$2"</span>    //     <span class="token punctuation">]</span><span class="token punctuation">,</span>    //     <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Log output to console"</span>    // <span class="token punctuation">}</span>    //添加代码片段     // $<span class="token number">2</span> 是生成代码后光标所在位置.    <span class="token property">"Print to console"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"prefix"</span><span class="token operator">:</span> <span class="token string">"vue"</span><span class="token punctuation">,</span>        <span class="token property">"body"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"&lt;template>"</span><span class="token punctuation">,</span>            <span class="token string">"  &lt;div>"</span><span class="token punctuation">,</span>            <span class="token string">"    $2"</span><span class="token punctuation">,</span>            <span class="token string">"  &lt;/div>"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;/template>\n"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;script>"</span><span class="token punctuation">,</span>            <span class="token string">"export default {"</span><span class="token punctuation">,</span>            <span class="token string">"  data () {"</span><span class="token punctuation">,</span>            <span class="token string">"    return {\n"</span><span class="token punctuation">,</span>            <span class="token string">"    }"</span><span class="token punctuation">,</span>            <span class="token string">"  },"</span><span class="token punctuation">,</span>            <span class="token string">"  components: {\n"</span><span class="token punctuation">,</span>            <span class="token string">"  },"</span><span class="token punctuation">,</span>            <span class="token string">"  computed: {\n"</span><span class="token punctuation">,</span>            <span class="token string">"  },"</span><span class="token punctuation">,</span>            <span class="token string">"  created () {\n"</span><span class="token punctuation">,</span>            <span class="token string">"  },"</span><span class="token punctuation">,</span>            <span class="token string">"  mounted () {\n"</span><span class="token punctuation">,</span>            <span class="token string">"  },"</span><span class="token punctuation">,</span>            <span class="token string">"  methods: {\n"</span><span class="token punctuation">,</span>            <span class="token string">"  }"</span><span class="token punctuation">,</span>            <span class="token string">"}"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;/script>\n"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;style scoped lang=\"stylus\">\n"</span><span class="token punctuation">,</span>            <span class="token string">"&lt;/style>"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"Log output to console"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用:打开新建的<code>.vue</code> 文件 键入:<code>vue</code> 会出现提示框,按<code>Tab</code> 或<code>Enter</code> 自动生成vue模板代码.</p></li></ol><p>然后 发现<code>stylus</code> 很好用啊,写起来根本不用费心去写什么冒号分号大括号什么的了.非常爽!</p><p> 推荐安装 <code>language-stylus</code> 插件.</p><p>然后是一些其他的东西了.如生成文件树的工具:<code>Tree</code> ,非常好用 墙裂推荐.</p><pre class=" language-shell"><code class="language-shell">brew install tree//安装成功后 终端输入:tree --helpzeddy:~|⇒  tree --helpusage: tree [-acdfghilnpqrstuvxACDFJQNSUX] [-H baseHREF] [-T title ]    [-L level [-R]] [-P pattern] [-I pattern] [-o filename] [--version]    [--help] [--inodes] [--device] [--noreport] [--nolinks] [--dirsfirst]    [--charset charset] [--filelimit[=]#] [--si] [--timefmt[=]<f>]    [--sort[=]<name>] [--matchdirs] [--ignore-case] [--] [<directory list>]  ------- Listing options -------  -a            All files are listed.  -d            List directories only.  -l            Follow symbolic links like directories.  -f            Print the full path prefix for each file.  -x            Stay on current filesystem only.  -L level      Descend only level directories deep.  -R            Rerun tree when max dir level reached.  -P pattern    List only those files that match the pattern given.  -I pattern    Do not list files that match the given pattern.  --ignore-case Ignore case when pattern matching.  --matchdirs   Include directory names in -P pattern matching.  --noreport    Turn off file/directory count at end of tree listing.  --charset X   Use charset X for terminal/HTML and indentation line output.  --filelimit # Do not descend dirs with more than # files in them.  --timefmt <f> Print and format time according to the format <f>.  -o filename   Output to file instead of stdout.  -------- File options ---------  -q            Print non-printable characters as '?'.  -N            Print non-printable characters as is.  -Q            Quote filenames with double quotes.  -p            Print the protections for each file.  -u            Displays file owner or UID number.  -g            Displays file group owner or GID number.  -s            Print the size in bytes of each file.  -h            Print the size in a more human readable way.  --si          Like -h, but use in SI units (powers of 1000).  -D            Print the date of last modification or (-c) status change.  -F            Appends '/', '=', '*', '@', '|' or '>' as per ls -F.  --inodes      Print inode number of each file.  --device      Print device ID number to which each file belongs.  ------- Sorting options -------  -v            Sort files alphanumerically by version.  -t            Sort files by last modification time.  -c            Sort files by last status change time.  -U            Leave files unsorted.  -r            Reverse the order of the sort.  --dirsfirst   List directories before files (-U disables).  --sort X      Select sort: name,version,size,mtime,ctime.  ------- Graphics options ------  -i            Don't print indentation lines.  -A            Print ANSI lines graphic indentation lines.  -S            Print with CP437 (console) graphics indentation lines.  -n            Turn colorization off always (-C overrides).  -C            Turn colorization on always.  ------- XML/HTML/JSON options -------  -X            Prints out an XML representation of the tree.  -J            Prints out an JSON representation of the tree.  -H baseHREF   Prints out HTML format with baseHREF as top directory.  -T string     Replace the default HTML title and H1 header with string.  --nolinks     Turn off hyperlinks in HTML output.  ---- Miscellaneous options ----  --version     Print version and exit.  --help        Print usage and this help message and exit.  --            Options processing terminator.Example:tree -L 3 > README.md        #输出当前路径下的3层路径 到 README.mdtree -d > README.md        #输出当前路径下所有文件夹 到 README.md等等...#输出文件类型不一定是 markdown,任意类型都可以.</code></pre><p>还有就是折腾了一下 <code>Terminal</code> ,macos 默认使用的是 <code>bash shell</code> ,使用<code>zsh shell</code> + <code>Oh My Zsh</code>主题,就能让终端瞬间高大上起来,<code>zsh shell</code>默认读取的是当前用户下的<code>.zshrc</code>文件.</p><ol><li>切换到<code>zsh</code> :  <code>chsh -s /bin/zsh</code> </li><li>Install oh-my-zsh</li></ol><pre class=" language-bash"><code class="language-bash">~$ sh -c <span class="token string">"(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span></code></pre><ol><li>在<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes" target="_blank" rel="noopener">这里</a>选择好看的主题,然后修改<code>.zshrc</code> 文件,找到<code>ZSH_THEME</code>配置项</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#比如这样.然后esc => :wq! => enter</span>ZSH_THEME<span class="token operator">=</span><span class="token string">"agnoster"</span></code></pre><p>重启终端.</p><p>还有一些零零碎碎的小折腾,就不记录了..嗯.充实的周末 😆.</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eslint </tag>
            
            <tag> tree </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Koa搭建Mock Server</title>
      <link href="/building-a-mock-server-with-koa.html"/>
      <content type="html"><![CDATA[<p>在前端开发时，经常需要使用api接口来取得数据，但是作为一名frontEnder,写后端接口会觉得很麻烦，so 使用mockjs 来实现数据模拟是一个很理想的方式。</p><p><a href="http://mockjs.com/" target="_blank" rel="noopener">mockjs</a>  的使用直接看官网文档，这里不赘述。以下是使用<code>koa</code> 搭建 <code>mock server</code> 结合  <code>webpack-dev-server</code> 来使用。</p><p>安装包：</p><pre class=" language-bash"><code class="language-bash">yarn add koa mockjs -D</code></pre><p>新建<code>mock/mockServer.js</code> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Router <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'koa-router'</span><span class="token punctuation">)</span><span class="token keyword">const</span> Mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'mockjs'</span><span class="token punctuation">)</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span>router<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/api/getlist/:page/:limit'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//获取URL 中的参数</span>  <span class="token keyword">const</span> page <span class="token operator">=</span> ctx<span class="token punctuation">.</span>params<span class="token punctuation">.</span>page  <span class="token keyword">const</span> limit <span class="token operator">=</span> ctx<span class="token punctuation">.</span>params<span class="token punctuation">.</span>limit  <span class="token keyword">const</span> maxPage <span class="token operator">=</span> <span class="token number">10</span>  <span class="token keyword">let</span> listData <span class="token operator">=</span> Mock<span class="token punctuation">.</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token punctuation">[</span><span class="token template-string"><span class="token string">`list|</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>limit<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>      <span class="token string">'id|+1'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>page <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> limit <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token string">'content'</span><span class="token punctuation">:</span> <span class="token string">'@cword(30,40)'</span> <span class="token comment" spellcheck="true">//Mock.Random.cparagraph(20, 40)</span>    <span class="token punctuation">}</span><span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 构造返回对象</span>  <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token punctuation">{</span>    success<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      hasMore<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 如果超过最大页面数</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>page <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> maxPage<span class="token punctuation">)</span> <span class="token punctuation">{</span>    res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>hasMore <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token punctuation">}</span>  res<span class="token punctuation">.</span>data<span class="token punctuation">.</span>data <span class="token operator">=</span> listData<span class="token punctuation">.</span>list  ctx<span class="token punctuation">.</span>body <span class="token operator">=</span> res<span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">.</span><span class="token function">allowedMethods</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//服务监听 8001 端口</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8001</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`server is running at http://localhost:8001/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span></code></pre><p>其中 <code>router</code> 部分可以根据需要拆分成多个 中间件，通过<code>app.use(xxx)</code>来使用。</p><p>在<code>package.json</code> 中添加：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"mock"</span><span class="token operator">:</span><span class="token string">"nodemon ./mock/mockServer.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p> 这里使用了 <code>nodemon</code> ,这个工具可以监听服务 如果有改变就立即重启<code>node</code> 服务。</p></blockquote><pre class=" language-bash"><code class="language-bash">yarn run mock</code></pre><p>看到<code>server is running at http://localhost:8001/1524473519294</code> 说明启动成功。</p><p>打开浏览器：</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-4-23/87181037.jpg" alt=""></p><p>当然还有别的方式来开启mock服务，暂时还没去了解，了解后再来补上。</p><p>end..</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> koa </tag>
            
            <tag> mockjs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Webpack4学习笔记</title>
      <link href="/webpack4-study-notes.html"/>
      <content type="html"><![CDATA[<p>之前对webpack4.x做了一些学习。今天搭建一个相对完整的react的开发环境。废话不多说直接进入正题。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> webpack4-react <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> webpack4-react <span class="token operator">&amp;&amp;</span> yarn init -Yyarn add react react-domyarn add webpack webpack-cli webpack-dev-server -D</code></pre><p>初始化并添加 <code>react</code> <code>webpack</code> 的相关依赖。原来 <code>webpack</code> 直接<code>install webpack</code> 就好，4.x 之后需要依赖<code>webpack-cli</code>。</p><h5 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h5><p>新建<code>webpack.config.js</code>这里要说下，<code>webpack4.x</code>版本引入了 <code>mode</code> 的概念，在运行 <code>webpack</code> 时需要指定使用 <code>production</code> 或 <code>development</code> 两个 <code>mode</code> 其中一个，这个功能也就是我们所需要的运行两套构建环境的能力。</p><p><code>webpack4.x</code>官方文档上说， 除了导出单个配置对象，还有其他三种方式。</p><ol><li><p>从 <code>webpack</code> 配置文件中导出一个函数。该函数在调用时，可传入两个参数：</p><p>环境对象 <code>env</code> ，选项<code>map</code> 对象。</p><p><code>env</code>:</p><p><code>map</code>:这个对象描述了传递给 webpack 的选项，并且具有<code>output-filename</code> <code>optimize-minimize</code>等 key。</p><p>即如下方式：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        entry<span class="token punctuation">:</span><span class="token string">'index.js'</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​</p></li><li><p>导出一个Promise对象</p><p>该配置方式主要用于 异步加载配置所需的配置变量，<code>webpack</code> 将运行由配置文件导出的函数，并且等待 <code>Promise</code> 返回。</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        entry<span class="token punctuation">:</span> <span class="token string">'./app.js'</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">/* ... */</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>​</p></li><li><p>导出多个配置对象</p><p>作为导出一个配置对象/配置函数的替代，你可能需要导出多个配置对象（从 webpack 3.1.0 开始支持导出多个函数）。当运行 webpack 时，所有的配置对象都会构建。例如，导出多个配置对象，对于针对多个构建目标（例如 AMD 和 CommonJS）<code>打包一个 library</code>非常有用。</p></li></ol><p>这里 后两种方式只做了解，使用第一种方式来进行配置，即导出函数的方式。</p><p>3.x版本时，消除 <code>webpack.config.js</code> 的环境差异，需要如下配置，加入<code>NODE_ENV</code>参数</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production webpack"</span><span class="token punctuation">,</span>    <span class="token property">"develop"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=development webpack-dev-server"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用时通过<code>process.env.NODE_ENV</code> 来获取环境参数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 生产环境需要做的事情..</span><span class="token punctuation">}</span></code></pre><p>4.x版本：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> argv<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        mode<span class="token punctuation">:</span> env<span class="token punctuation">.</span>production <span class="token operator">?</span> <span class="token string">'production'</span> <span class="token punctuation">:</span> <span class="token string">'development'</span><span class="token punctuation">,</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>对于配置的拆分，这里先不讲，后面需要单独看一篇来说 配置拆分，今天主要说说具体配置和HMR。</p></blockquote><h5 id="loader-及-plugin"><a href="#loader-及-plugin" class="headerlink" title="loader 及 plugin"></a>loader 及 plugin</h5><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> autoprefixer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'autoprefixer'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> mock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./mock/mock'</span><span class="token punctuation">)</span><span class="token keyword">const</span> paths <span class="token operator">=</span> <span class="token punctuation">{</span>  appSrc<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  buildPath<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  appNodeModules<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'node_modules'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">(</span>env<span class="token punctuation">,</span> argv<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    main<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/index.js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name]-[hash].js'</span><span class="token punctuation">,</span>    path<span class="token punctuation">:</span> paths<span class="token punctuation">.</span>buildPath<span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span>        include<span class="token punctuation">:</span> paths<span class="token punctuation">.</span>appSrc<span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">{</span>          loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>          options<span class="token punctuation">:</span> <span class="token punctuation">{</span>            compact<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(sass|scss)$/</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> paths<span class="token punctuation">.</span>appNodeModules<span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token comment" spellcheck="true">//4. style-loader 处理， 开启hmr</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'style-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> hmr<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//3. css-loader 处理</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//2. 使用 postcss 处理 css，根据浏览器环境的不同添加不同的前缀等处理。</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>              ident<span class="token punctuation">:</span> <span class="token string">'postcss'</span><span class="token punctuation">,</span>              plugins<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">[</span>                <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'postcss-flexbugs-fixes'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">autoprefixer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                  browsers<span class="token punctuation">:</span> <span class="token punctuation">[</span>                    <span class="token string">'>1%'</span><span class="token punctuation">,</span>                    <span class="token string">'last 4 versions'</span><span class="token punctuation">,</span>                    <span class="token string">'Firefox ESR'</span><span class="token punctuation">,</span>                    <span class="token string">'not ie &lt; 9'</span><span class="token punctuation">,</span>                  <span class="token punctuation">]</span><span class="token punctuation">,</span>                  flexbox<span class="token punctuation">:</span> <span class="token string">'no-2009'</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>              <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">//1. 第一步 处理 sass</span>          <span class="token punctuation">{</span> loader<span class="token punctuation">:</span> <span class="token string">'sass-loader'</span><span class="token punctuation">,</span> options<span class="token punctuation">:</span> <span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//处理图片</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token regex">/\.bmp$/</span><span class="token punctuation">,</span> <span class="token regex">/\.gif$/</span><span class="token punctuation">,</span> <span class="token regex">/\.jpe?g$/</span><span class="token punctuation">,</span> <span class="token regex">/\.png$/</span><span class="token punctuation">,</span> <span class="token operator">/</span>\<span class="token punctuation">.</span>svg$<span class="token operator">/</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        exclude<span class="token punctuation">:</span> paths<span class="token punctuation">.</span>appNodeModules<span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">1024</span>    <span class="token comment" spellcheck="true">//小于1024kb的图片使用base64</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//使用html-webpack-plugin生成html</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src/assets/template.html'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//单独打包css,这个可以在 production 环境下配置。 </span>    <span class="token comment" spellcheck="true">//new ExtractTextPlugin('[name].css'),</span>      <span class="token comment" spellcheck="true">//dev-server 依赖插件</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//配置 外部依赖 (runtime依赖) 参数:String/Array/Function/regex/object</span>  <span class="token comment" spellcheck="true">//使用时就可以 直接 import BMap from 'BMap'</span>  <span class="token comment" spellcheck="true">//jQuery 同理. </span>  externals<span class="token punctuation">:</span> <span class="token punctuation">{</span>    BMap<span class="token punctuation">:</span> <span class="token string">'BMap'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//devserver 配置</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    publicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    contentBase<span class="token punctuation">:</span> paths<span class="token punctuation">.</span>buildPath<span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    hotOnly<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//使用代理，处理所有包含 /api 的请求 </span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'/api'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">'http://localhost:8001'</span><span class="token punctuation">,</span>        secure<span class="token punctuation">:</span> <span class="token boolean">false</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h5 id="模块热替换HMR-Hot-Module-Replacement"><a href="#模块热替换HMR-Hot-Module-Replacement" class="headerlink" title="模块热替换HMR(Hot Module Replacement)"></a>模块热替换HMR(Hot Module Replacement)</h5><blockquote><p>这里要说明：仅仅在dev-server 配置中使用 <code>hot:true</code> 开启 HMR 是无效的。使用如下方式才能真正生效：</p><pre><code>if (module.hot) {  module.hot.accept(&#39;./library.js&#39;, function() {    // 使用更新过的 library 模块执行某些操作...  })}</code></pre></blockquote><p>安装 react HMR 插件<code>react-hot-loader</code>：</p><pre class=" language-bash"><code class="language-bash">yarn add react-hot-loader -D</code></pre><p>使用：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">'react-dom'</span><span class="token keyword">import</span> <span class="token punctuation">{</span> AppContainer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-hot-loader'</span><span class="token keyword">import</span> <span class="token string">'./assets/styles/global.scss'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">if</span> <span class="token punctuation">(</span>module<span class="token punctuation">.</span>hot<span class="token punctuation">)</span> <span class="token punctuation">{</span>  module<span class="token punctuation">.</span>hot<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppContainer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AppContainer</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>测试HMR正常，<code>jsx</code> 和 <code>style/css/scss</code> 都能触发 HMR。至于原理需要单独开一篇来讲。</p><p>end..</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Webpack-loader配置</title>
      <link href="/webpackloader-configuration.html"/>
      <content type="html"><![CDATA[<p>本文主要探讨 <code>webpack</code> 的 <code>loader</code> 的配置细节。</p><h4 id="loader-的匹配规则"><a href="#loader-的匹配规则" class="headerlink" title="loader 的匹配规则"></a>loader 的匹配规则</h4><blockquote><p><code>loader</code> 的匹配规则中有两个最关键的因素：</p><ul><li>匹配条件</li><li>匹配规则后的应用</li></ul></blockquote><p><code>loader</code>基础配置的例子:</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 条件</span>        include<span class="token punctuation">:</span> <span class="token punctuation">[</span>           path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 条件</span>        use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 规则应用结果</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 一个 object 即一条规则</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>匹配条件通常都使用请求资源文件的绝对路径来进行匹配，在官方文档中称为 <code>resource</code> 。</p><p>上述代码中的 <code>test</code> 和 <code>include</code> 都用于匹配 <code>resource</code> 路径 ，是 <code>resource.test</code> 和 <code>resource.include</code> 的简写，也可以这么配置：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>       <span class="token punctuation">{</span>        resource<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// resource 的匹配条件</span>          test<span class="token punctuation">:</span> <span class="token regex">/\.(js|jsx)$/</span><span class="token punctuation">,</span>           include<span class="token punctuation">:</span> <span class="token punctuation">[</span>             path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">}</span></code></pre><h4 id="规则条件配置"><a href="#规则条件配置" class="headerlink" title="规则条件配置"></a>规则条件配置</h4><p>大多数情况下，配置 <code>loader</code> 的匹配条件时，只要使用 <code>test</code> 字段就好了，很多时候都只需要匹配文件后缀名来决定使用什么 <code>loader</code>，但也不排除在某些特殊场景下，我们需要配置比较复杂的匹配条件。<code>webpack</code> 的规则提供了多种配置形式：</p><ul><li><code>{ test: ... }</code>匹配特定条件</li><li><code>{ include: … }</code> 匹配特定路径</li><li><code>{ exclude: … }</code> 排除特定路径</li><li><code>{ and: [...] }</code>必须匹配数组中所有条件</li><li><code>{ or: [...] }</code> 匹配数组中任意一个条件</li><li><code>{ not: [...] }</code> 排除匹配数组中所有条件</li></ul><p>上述的所谓条件的值可以是：</p><ul><li><code>字符串</code>：必须以提供的字符串开始，所以是字符串的话，这里我们需要提供绝对路径</li><li><code>正则表达式</code>：调用正则的 <code>test</code> 方法来判断匹配</li><li><code>函数</code>：<code>(path) =&gt; boolean</code>，返回 <code>true</code> 表示匹配</li><li><code>数组</code>：至少包含一个条件的数组</li><li><code>对象</code>：匹配所有属性值的条件</li></ul><p>通过例子来帮助理解：</p><pre class=" language-javascript"><code class="language-javascript">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.jsx?/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 正则</span>    include<span class="token punctuation">:</span> <span class="token punctuation">[</span>      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 字符串，注意是绝对路径</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 数组</span>    <span class="token comment" spellcheck="true">// ...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token punctuation">{</span>      js<span class="token punctuation">:</span> <span class="token regex">/\.js/</span><span class="token punctuation">,</span>      jsx<span class="token punctuation">:</span> <span class="token regex">/\.jsx/</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 对象，不建议使用</span>    not<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/* ... */</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 函数，通常需要高度自定义时才会使用</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><p>上述多个配置形式结合起来就能够基本满足各种各样的构建场景了，通常我们会结合使用 <code>test/and</code>和 <code>include&amp;exclude</code> 来配置条件，如上述那个简单的例子。</p><h4 id="Module-Type"><a href="#Module-Type" class="headerlink" title="Module Type"></a>Module Type</h4><p><code>webpack 4.x</code> 版本强化了 <code>module type</code>，即<code>模块类型</code>的概念，不同的模块类型类似于配置了不同的 <code>loader</code>，<code>webpack</code> 会有针对性地进行处理，现阶段实现了以下 5 种模块类型。</p><ul><li><code>javascript/auto</code>：即 <code>webpack 3.x</code> 默认的类型，支持现有的各种 JS 代码模块类型 —<code>CommonJS</code>、<code>AMD</code>、<code>ESM</code></li><li><code>javascript/esm</code>：<code>ECMAScript modules</code>，其他模块系统，例如 <code>CommonJS</code> 或者 <code>AMD</code> 等不支持，是 <code>.mjs</code> 文件的默认类型</li><li><code>javascript/dynamic</code>：<code>CommonJS</code> 和 <code>AMD</code>，排除<code>ESM</code></li><li><code>javascript/json</code>：<code>JSON</code> 格式数据，<code>require</code> 或者 <code>import</code> 都可以引入，是<code>.json</code> 文件的默认类型</li><li><code>webassembly/experimental</code>：<code>WebAssembly modules</code>，当前还处于试验阶段，是<code>.wasm</code> 文件的默认类型</li></ul><p>如果不希望使用默认的类型的话，在确定好匹配规则条件时，我们可以使用 <code>type</code> 字段来指定模块类型，例如把所有的 JS 代码文件都设置为强制使用 <code>ESM</code> 类型：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>  test<span class="token punctuation">:</span> <span class="token regex">/\.js/</span><span class="token punctuation">,</span>  include<span class="token punctuation">:</span> <span class="token punctuation">[</span>    path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  type<span class="token punctuation">:</span> <span class="token string">'javascript/esm'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 这里指定模块类型</span><span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>上述做法是可以帮助规范整个项目的模块系统，但是如果遗留太多不同类型的模块代码时，建议还是直接使用默认的 <code>javascript/auto</code>。</p><h4 id="使用loader配置"><a href="#使用loader配置" class="headerlink" title="使用loader配置"></a>使用loader配置</h4><p><code>module.rules</code> 的匹配规则最重要的还是用于配置 <code>loader</code>，可以使用 <code>use</code> 字段：</p><pre class=" language-javascript"><code class="language-javascript">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.(less)$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 直接使用字符串表示 loader</span>      <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          importLoaders<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 用对象表示 loader，可以传递 loader 配置等</span>      <span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> <span class="token string">'less-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          noIeCompat<span class="token punctuation">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 传递 loader 配置</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p><code>use</code> 字段可以是一个数组，也可以是一个字符串或者表示 loader 的对象。如果只需要一个 <code>loader</code>，也可以这样：<code>use: { loader: &#39;babel-loader&#39;, options: { ... } }</code>。</p><p>还可以使用 <code>options</code> 给对应的 <code>loader</code> 传递一些配置项，这里不再展开。</p><h4 id="loader应用顺序"><a href="#loader应用顺序" class="headerlink" title="loader应用顺序"></a>loader应用顺序</h4><p>​    前面提到，一个匹配规则中可以配置使用多个 <code>loader</code>，即一个模块文件可以经过多个 <code>loader</code> 的转换处理，执行顺序是从最后配置的 <code>loader</code> 开始，一步步往前。例如，对于上面的 <code>less</code> 规则配置，一个 <code>style.less</code> 文件会途径 <code>less-loader</code>、<code>css-loader</code>、<code>style-loader</code> 处理，成为一个可以打包的模块。</p><p>​    <code>loader</code> 的应用顺序在配置多个 <code>loader</code> 一起工作时很重要，通常会使用在 <code>CSS</code> 配置上，除了 <code>style-loader</code>和 <code>css-loader</code>，你可能还要配置 <code>less-loader</code> 然后再加个 <code>postcss</code> 的 <code>autoprefixer</code> 等。</p><p>上述从后到前的顺序是在同一个 <code>rule</code>中进行的，那如果多个 <code>rule</code> 匹配了同一个模块文件，<code>loader</code> 的应用顺序又是怎样的呢？看一份这样的配置：</p><pre class=" language-javascript"><code class="language-javascript">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>    exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>    loader<span class="token punctuation">:</span> <span class="token string">"eslint-loader"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>    exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>    loader<span class="token punctuation">:</span> <span class="token string">"babel-loader"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">,</span></code></pre><p>​    这样无法法保证 <code>eslint-loader</code> 在 <code>babel-loader</code> 应用前执行。<code>webpack</code> 在 <code>rules</code> 中提供了一个 <code>enforce</code>的字段来配置当前 <code>rule</code> 的 <code>loader</code> 类型，没配置的话是普通类型，我们可以配置 <code>pre</code> 或 <code>post</code>，分别对应前置类型或后置类型的 <code>loader</code>。</p><blockquote><p><code>eslint-loader</code> 要检查的是人工编写的代码，如果在 <code>babel-loader</code> 之后使用，那么检查的是 <code>Babel</code> 转换后的代码，所以必须在 <code>babel-loader</code> 处理之前使用。</p></blockquote><p>​    还有一种行内 <code>loader</code>，即我们在应用代码中引用依赖时直接声明使用的<code>loader</code>，如 <code>const json = require(&#39;json-loader!./file.json&#39;)</code>这种。不建议在应用开发中使用这种 <code>loader</code>。</p><p>顾名思义，所有的 <code>loader</code> 按照   <code>前置</code>-&gt; <code>行内</code> -&gt; <code>普通</code> -&gt; <code>后置</code>   的顺序执行。所以当我们要确保 <code>eslint-loader</code>在 <code>babel-loader</code> 之前执行时，可以如下添加 <code>enforce</code> 配置：</p><pre class=" language-javascript"><code class="language-javascript">rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    enforce<span class="token punctuation">:</span> <span class="token string">'pre'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定为前置类型</span>    test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>    exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span><span class="token punctuation">,</span>    loader<span class="token punctuation">:</span> <span class="token string">"eslint-loader"</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>当项目文件类型和应用的 <code>loader</code> 不是特别复杂的时候，通常建议把要应用的同一类型 <code>loader</code> 都写在同一个匹配规则中，这样更好维护和控制。</p><h4 id="noParse"><a href="#noParse" class="headerlink" title="noParse"></a>noParse</h4><p>​    在 <code>webpack</code> 中，我们需要使用的<code>loader</code> 是在 <code>module.rules</code> 下配置的，<code>webpack</code> 配置中的 <code>module</code> 用于控制如何处理项目中不同类型的模块。</p><p>​    除了 <code>module.rules</code> 字段用于配置 <code>loader</code> 之外，还有一个 <code>module.noParse</code> 字段，可以用于配置哪些模块文件的内容不需要进行解析。对于一些不需要解析依赖（即无依赖） 的第三方大型类库等，可以通过这个字段来配置，以提高整体的构建速度。</p><blockquote><p>使用 <code>noParse</code> 进行忽略的模块文件中不能使用 <code>import</code>、<code>require</code>、<code>define</code> 等导入机制。</p></blockquote><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    noParse<span class="token punctuation">:</span> <span class="token regex">/jquery|lodash/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 正则表达式</span>    <span class="token comment" spellcheck="true">// 或者使用 function</span>    <span class="token function">noParse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token regex">/jquery|lodash/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>noParse</code> 从某种程度上说是个优化配置项，日常也可以不去使用。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        <code>webpack</code> 的 <code>loader</code> 相关配置都在 <code>module.rules</code> 字段下，需要通过 <code>test</code>、<code>include</code>、<code>exclude</code> 等配置好应用 <code>loader</code> 的条件规则，然后使用 <code>use</code> 来指定需要用到的 <code>loader</code>，配置应用的 <code>loader</code> 时还需要注意一下 <code>loader</code> 的执行顺序。</p><p>​    除此之外，<code>webpack 4.x</code> 版本新增了模块类型的概念，相当于 <code>webpack</code> 内置一个更加底层的文件类型处理，暂时只有 JS 相关的支持，后续会再添加 <code>HTML</code> 和 <code>CSS</code> 等类型。</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise和async/await</title>
      <link href="/promise-and-asyncawait.html"/>
      <content type="html"><![CDATA[<p>看到<code>Promise</code> 首先想到的就是 <code>异步操作/异步编程</code>,可以联想到 <code>Generator Function</code> 这种解决<strong>Javascript</strong> 异步操作回调地狱问题的方法。</p><p>今天想要了解的重点是 <code>async function</code> 和<code>await</code> ，先把<code>await</code> 放一边，来看看 <code>async function</code> 是什么。</p><p>查阅MDN 对 <code>async function</code> 的定义：<code>async function</code> 声明将定义一个返回 <code>AsyncFunction</code> 对象的异步函数。其返回值是 一个<code>Promise</code> 对象，<code>Promise</code> 就是一个 <code>asyncFunction</code> 对象。返回的<code>Promise</code>对象会以<code>async function</code>的返回值进行<code>resolve</code>，或者以该函数抛出的异常进行<code>reject</code>。</p><h5 id="什么是Promise"><a href="#什么是Promise" class="headerlink" title="什么是Promise"></a>什么是Promise</h5><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-4-12/25163901.jpg" alt=""></p><p><strong>Promise</strong> 对象用于表示一个异步操作的最终状态（完成或失败），以及其返回的值。语法如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span> <span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span> <span class="token punctuation">)</span></code></pre><p>它的参数 <code>executor</code> 是一个带有 <code>resolve</code> 和 <code>reject</code> 两个参数的函数。Promise构造函数执行时立即调用<code>executor</code> 函数， <code>resolve</code> 和 <code>reject</code> 两个函数作为参数传递给<code>executor</code>（executor 函数在Promise构造函数返回新建对象前被调用）。<code>resolve</code> 和 <code>reject</code> 函数被调用时，分别将<code>promise</code>的状态改为<em>fulfilled（</em>完成）或rejected（失败）。<code>executor</code> 内部通常会执行一些异步操作，一旦完成，可以调用resolve函数来将promise状态改成<em>fulfilled</em>，或者在发生错误时将它的状态改为<code>rejected</code>。</p><p><code>Promise</code> 对象是一个代理对象（代理一个值），被代理的值在<code>Promise</code>对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的<code>promise</code>对象</p><p>一个 <code>Promise</code>有以下几种状态:</p><ul><li><em>pending</em>: 初始状态，既不是成功，也不是失败状态。</li><li><em>fulfilled</em>: 意味着操作成功完成。</li><li><em>rejected</em>: 意味着操作失败。</li></ul><p><code>pending</code> 状态的 <code>Promise</code> 对象可能触发<code>fulfilled</code> 状态并传递一个值给相应的状态处理方法，也可能触发失败状态（<code>rejected</code>）并传递失败信息。当其中任一种情况出现时，<code>Promise</code> 对象的 <code>then</code> 方法绑定的处理方法就会被调用（<code>then</code>方法包含两个参数：<code>onfulfilled</code> 和 <code>onrejected</code>，它们都是 <code>Function</code> 类型。当<code>Promise</code>状态为<em>fulfilled</em>时，调用 <code>then</code> 的 <code>onfulfilled</code> 方法，当<code>Promise</code>状态为<em>rejected</em>时，调用 <code>then</code> 的 <code>onrejected</code> 方法， 所以在异步操作的完成和绑定处理方法之间不存在竞争）。</p><p>下面用<code>setTimeout()</code>来模拟一个异步操作：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//Array.apply(null, Array(5)).map(i => console.log(i))</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'promise'</span><span class="token punctuation">)</span>result<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'then1 '</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>value <span class="token operator">+</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> reason <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reason<span class="token punctuation">,</span> <span class="token string">'失败回调'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token string">'then2 '</span><span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toTimeString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">,</span> <span class="token string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>打印结果如下：</p><pre class=" language-javascript"><code class="language-javascript">Promise <span class="token punctuation">{</span> <span class="token operator">&lt;</span>pending<span class="token operator">></span> <span class="token punctuation">}</span> <span class="token string">'promise'</span><span class="token number">10</span> <span class="token string">'then1 10:42:13 GMT+0800 (CST)'</span><span class="token number">30</span> <span class="token string">'then2 10:42:14 GMT+0800 (CST)'</span>✨  Done <span class="token keyword">in</span> <span class="token number">2</span><span class="token punctuation">.</span>15s<span class="token punctuation">.</span></code></pre><p>首先打印出了 <code>promise</code> 的 <code>pending</code> 状态，接着 在<code>then1</code> 对上一步的结果进一步处理，再返回一个<code>Promise</code>，<code>then2</code> 打印出了 <code>then1</code> 的结果。</p><p>可以看出 <code>Promise</code> 通过 链式调用的方式解决了异步操作回调函数地狱的问题。但是也没有完全解决，只是相对解决。</p><h5 id="Generator-Function"><a href="#Generator-Function" class="headerlink" title="Generator Function"></a>Generator Function</h5><p><code>Generator</code> 是以 <code>*</code> 和<code>yidle</code> 关键字来处理异步，<code>Generator</code>函数本意是<code>iterator生成器</code>，函数运行到<code>yield</code>时退出，并保留上下文，在下次进入时可以继续运行。可以说着是一个民间版本，官方版本就是本次主题 <code>async Function</code> 。</p><h5 id="async-Function"><a href="#async-Function" class="headerlink" title="async Function"></a>async Function</h5><p>MDN描述：当调用一个 <code>async</code> 函数时，会返回一个 <code>Promise</code> 对象。当这个 <code>async</code> 函数返回一个值时，<code>Promise</code> 的 <code>resolve</code> 方法会负责传递这个值；当 <code>async</code> 函数抛出异常时，<code>Promise</code> 的 <code>reject</code> 方法也会传递这个异常值。<code>async</code> 函数中可能会有 <code>await</code>表达式，这会使 <code>async</code> 函数暂停执行，等待表达式中的 <code>Promise</code> 解析完成后继续执行 <code>async</code> 函数并返回解决结果。</p><p><em>注意， <code>await</code> 关键字仅仅在 <code>async function</code>中有效。</em></p><h5 id="await"><a href="#await" class="headerlink" title="await"></a>await</h5><p>从字面上理解就是等待，那到底等什么呢？</p><p>首先<code>await</code> 后面一个表达式，它可以等任意表达式的结果 ，也就是说 等的结果可以是<code>Promise</code>也可以是<code>普通函数调用</code>或者<code>直接量</code>。这是就会根据结果的不同分两种情况：</p><ul><li><p>如果结果不是 <code>Promise</code> 对象，那 <code>await</code> 表达式的运算结果就是它等到的东西。</p></li><li><p>如果结果是 <code>Promise</code> 对象，<code>await</code> 就会阻塞其后面的代码，等着 <code>Promise</code> 对象 <code>resolve</code>，然后得到 <code>resolve</code> 的值，作为 <code>await</code> 表达式的运算结果。</p><p>​</p><p><strong>注意：async 函数调用不会造成线程阻塞，它内部所有的阻塞都被封装在一个 <code>Promise</code> 对象中异步执行。</strong></p></li></ul><h5 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h5><p>写个例子来说明：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncFn</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">resolve</span><span class="token punctuation">(</span>time <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">then1</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`then1 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">asyncFn</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">then2</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`then2 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">asyncFn</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">then3</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`then3 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>time<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token function">asyncFn</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">promiseTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> time1 <span class="token operator">=</span> <span class="token number">1000</span>  <span class="token function">then1</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>time2 <span class="token operator">=</span><span class="token operator">></span> <span class="token function">then2</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>time3 <span class="token operator">=</span><span class="token operator">></span> <span class="token function">then3</span><span class="token punctuation">(</span>time3<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>result <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>error <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">asyncTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> time1 <span class="token operator">=</span> <span class="token number">1000</span>  <span class="token keyword">const</span> time2 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">then1</span><span class="token punctuation">(</span>time1<span class="token punctuation">)</span>  <span class="token keyword">const</span> time3 <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">then2</span><span class="token punctuation">(</span>time2<span class="token punctuation">)</span>  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">then3</span><span class="token punctuation">(</span>time3<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`result is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>result<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>分别调用<code>promiseTest()</code> 和 <code>asyncTest()</code>打印结果相同：</p><pre class=" language-javascript"><code class="language-javascript">$ node index<span class="token punctuation">.</span>jsthen1 <span class="token number">1000</span>then2 <span class="token number">2000</span>then3 <span class="token number">3000</span>result is <span class="token number">4000</span>✨  Done <span class="token keyword">in</span> <span class="token number">6</span><span class="token punctuation">.</span>15s<span class="token punctuation">.</span></code></pre><p>实现了同样的效果，虽然差别不是那么大，但是 <code>async/await</code> 要比 <code>peomise</code> 方式更简洁更好理解。</p><p>简单的例子可能觉得他们的差别不是那么大，但是如果是更复杂一些的业务，他们的差别就会很明显了。</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo 文章URL优化</title>
      <link href="/hexo-article-url-optimization.html"/>
      <content type="html"><![CDATA[<p>​    今天给同事分享博客的时候才想起来URL还没有优化，URL是一串<code>http://zhangdi.site/React-Native-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html</code> ，非常的丑也不利于SEO。</p><p>首先解决文章标题转化为英文：</p><p>安装插件<code>hexo-translate-title</code> ,安装完成后在<code>__config.yml</code> 中添加配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># 转化url为英文</span><span class="token key atrule">translate_title</span><span class="token punctuation">:</span>  <span class="token key atrule">translate_way</span><span class="token punctuation">:</span> google    <span class="token comment" spellcheck="true">#google | baidu | youdao</span>  <span class="token key atrule">youdao_api_key</span><span class="token punctuation">:</span>   <span class="token key atrule">youdao_keyfrom</span><span class="token punctuation">:</span>   <span class="token key atrule">is_need_proxy</span><span class="token punctuation">:</span> <span class="token boolean important">true     </span><span class="token comment" spellcheck="true">#true | false  不启用代理</span>  <span class="token key atrule">proxy_url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span><span class="token number">1087  </span><span class="token comment" spellcheck="true">#代理地址</span></code></pre><p>插件支持三种翻译工具，各有优劣，有道需要申请api-key 比较麻烦，所以忽略。</p><p>Google翻译 需要开启代理 否则被墙无法翻译。百度最简单，但是效果没有google好。</p><p><code>hexo g</code> 之后可以看到 文章的头部多了一条<code>translate_title: react-native-development-environment</code> 属性。</p><p>可以看出翻译的效果还是不错的。</p><p>然后修改<code>__config.yml</code> ：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>translate_title.html  <span class="token comment" spellcheck="true">#优化 URL</span></code></pre><p>其次解决的是 分类的 英文化。<code>__config.yml</code> 中配置 ：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">default_category</span><span class="token punctuation">:</span> uncategorized<span class="token key atrule">category_map</span><span class="token punctuation">:</span>  <span class="token key atrule">未分类</span><span class="token punctuation">:</span> uncatalog  <span class="token key atrule">分享境</span><span class="token punctuation">:</span> share   <span class="token key atrule">技术向</span><span class="token punctuation">:</span> technology  <span class="token key atrule">大前端</span><span class="token punctuation">:</span> front<span class="token punctuation">-</span>end  <span class="token key atrule">大爪哇</span><span class="token punctuation">:</span> java  <span class="token key atrule">工具集</span><span class="token punctuation">:</span> toolset  <span class="token key atrule">自言语</span><span class="token punctuation">:</span> self<span class="token punctuation">-</span>talk</code></pre><p>因为分类是静态的直接 使用固定的map 就好了。同理 <code>tag</code> 也是一样的配置方法。</p><p>end…</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深入学习React(一)</title>
      <link href="/learn-more-about-react-1.html"/>
      <content type="html"><![CDATA[<p>​    原来学习时主要精力放在了<code>webpack</code> 和<code>React</code>的相关技术栈上了，反而忽视了<code>React</code> 本身的学习，实际开发过程中发现了很多问题，如 <em>生命周期</em> 、<em>虚拟DOM</em>、  <em>Diff算法</em> 等问题。这次参考官方文档和《React进阶之路》 这本书来对React本身进行一个深入的学习。</p><p>首先来说，React实际上是区别于<code>Angular</code> <code>Vue</code> 这类的框架，<code>React</code> 核心关注点在于构建UI，它不想另外两大框架一样是一整套解决方案 大而全的框架，比如<code>Angular</code>的<code>Typescript</code> 响应式编程 <code>Rxjs</code>，<code>Vue</code>的计算属性，数据双向绑定等一大堆API。一个React组件实际上就围绕它的<strong>生命周期</strong> 函数。</p><h4 id="React-组件的生命周期"><a href="#React-组件的生命周期" class="headerlink" title="React 组件的生命周期"></a>React 组件的生命周期</h4><p>组件的生命周期可分成三个状态：</p><ul><li>Mounting：已插入真实 DOM</li><li>Updating：正在被重新渲染</li><li>Unmounting：已移出真实 DOM</li></ul><p>生命周期的方法有：</p><ul><li><strong>componentWillMount</strong> 在渲染前调用,在客户端也在服务端。（比如使用服务的渲染，该函数将会被调用两次，服务端一次，客户端一次）</li><li><strong>componentDidMount</strong> : 在第一次渲染后调用，只在客户端。之后组件已经生成了对应的DOM结构。</li><li><strong>componentWillReceiveProps</strong> 在组件接收到一个新的 prop (更新后)时被调用。这个方法在初始化<code>render</code>时不会被调用。</li><li><strong>shouldComponentUpdate</strong> 返回一个布尔值。在组件接收到新的<code>props</code>或者<code>state</code>时被调用。在初始化时或者使用<code>forceUpdate</code>时不被调用。 可以在你确认不需要更新组件时使用(<code>return true/false</code>)。</li><li><strong>componentWillUpdate</strong>在组件接收到新的<code>props</code>或者<code>state</code>但还没有<code>render</code>时被调用。在初始化时不会被调用。</li><li><strong>componentDidUpdate</strong> 在组件完成更新后立即调用。在初始化时不会被调用。</li><li><strong>componentWillUnmount</strong>在组件从 DOM 中移除的时候立刻被调用。</li></ul><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-4-8/63239100.jpg" alt=""></p><p>这里应该重点关注的是：组件与服务端API通信该在哪个阶段。</p><p>首先React官方推荐的是在 <code>componetnDitMount</code> 这个阶段与服务器通信获取数据。但是我对于上面生命周期函数的理解，可以发现其实在组件<code>Mounting</code> 阶段都可以与服务端通信。</p><p>componentWillMount 会在组件被挂载前调用，因此从时间上来说，在此阶段执行服务器通信要早于componentDidMount中执行，一般来说，执行的越早意味着服务器数据越能更快的返回组件，基于这个思维是不是我们在 构造函数<code>constructor</code>中 去获取数据会更好呢？</p><p>首先在<code>constructor</code>中去获取数据，其实是可行的，但是数据请求这个工作其实是有“副作用”的，比如时间无法控制，是否会发生错误也不可知，也行会阻碍 <code>render</code> 函数的运行，导致一些意想不到的问题。其次，构造函数 的意义就是执行组件的初始化工作，如设置组件的初始状态。如果去做数据请求也会显得不太合情理。</p><p><code>constructor</code> 之后会马上进入 <code>componentWillMount</code> ,其实和构造函数几乎没有任何差异。当然它还有别的缺点，1、它在服务端和客户端都会执行此函数，如果我们使用服务端渲染，此方法会被调用两次，导致发出一些不必要的多余的请求。2、它在render之前执行，如果我们需要操作DOM，此时DOM还未挂载，操作也是不安全的。</p><p><code>componentDidMount</code>的优点就在于：其可以保证获取到数据时组件已处于挂载状态，其能够保证在任何情况下只会被调用一次。与<code>componentWillMount</code>相比它吗的执行的时间差微乎其微，几乎可以忽略不记。</p><p><code>componentWillMount</code>非常适于做的是组件更新阶段(<code>Updating</code>)与服务器通信。比如可以通过 比较 <code>this.props</code> 与<code>nextProps</code> 的某个字段是否有差异，来判断是否进行数据请求 更新组件。</p><h4 id="React-组件的State"><a href="#React-组件的State" class="headerlink" title="React 组件的State"></a>React 组件的State</h4><p>State 的设计规范是：必须能够代表一个组件UI呈现的完整状态集，同时，State还必须代表一个组件UI呈现的最小状态集。</p><p>如何理解呢？ 完整状态集 就是说 组件UI的任何改变都可以在 State 的变化中反应出来，最小状态集就是说 没有任何的多余状态，也不应该存在通过其他状态计算出来的中间状态。</p><p>比如，设计一个 购物车的 state</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>        productList <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//商品列表</span>        totalCost <span class="token punctuation">:</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true">//总价格</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>虽然这里的 State可以反映组件的完整状态集，但却不是最小状态集，因为 商品总结可以根据商品的单价计算出来，所以 <code>totalCost</code> 这个状态其实是不需要的。</p><p>然后是组件 State 修改的一些陷阱：</p><ul><li>State的修改是不能够直接修改的，因为直接修改不会触发组件的 <code>render</code> 。</li><li>State的修改是异步的，也就是说 当调用 <code>setState()</code> 时 组件的 State 并不是立即改变的，<code>setState()</code>只是把要修改的状态放入一个队列中，React 会优化并真正的执行时机，出于性能的原因，React会把多次<code>setState</code> 的状态修改合并成一次真正的修改。</li></ul><p><strong>所以千万不要依赖<code>this.state</code> 来计算得出下一个<code>state</code>。因为当真正只需状态修改时，依赖的状态并不能保证是最新的 State ，同样也不能依赖 <code>this.props</code> 计算 <code>state</code> ，因为 <code>props</code> 也是异步的</strong> </p><ul><li>State的更新是一个合并的过程，不是覆盖。当调用<code>setState()</code> 时，只需传入需要改变的字段，React会合并出新的字段到原来的组件状态上，同时保留原有的状态。</li></ul><p>React官方建议 State 应该是一个不可变的对象。原因：</p><ol><li>对不可变对象的修改会返回一个新的对象，不需要担心原有对象在不小心的情况下被修改导致错误，方便程序的管理和调试。</li><li>出于性能的考虑，当组件State 是不可变对象时，<code>shouldComponentUpdate()</code> 方法中仅需要比较前后两次状态对象的引用就可以判断出状态是否真的改变，从而避免不要的 <code>render()</code> 。</li></ol><p>end…</p><p>下周会对 React的 虚拟DOM 和 Diff算法进行学习。</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue+Webpack开发环境进阶配置</title>
      <link href="/.html"/>
      <content type="html"><![CDATA[<p>​    上次搭建了一个基础的 Vue+Webpack的开发环境。那个环境只能作为hello world 环境使用，还是非常的稚嫩的，这次要在上次的基础上做一些进阶的配置。</p><p>这次要做的一些配置项：</p><ul><li>环境配置为 开发环境和正式环境</li></ul><ul><li>Html文件通过插件生成</li><li>添加更多的 loader 进一步处理打包</li><li>添加组件热加载</li></ul><h4 id="配置开发环境和正式环境采用不同的配置项"><a href="#配置开发环境和正式环境采用不同的配置项" class="headerlink" title="配置开发环境和正式环境采用不同的配置项"></a>配置开发环境和正式环境采用不同的配置项</h4><p>首先打开 <code>package.json</code>修改 <code>scripts</code> 项：</p><pre class=" language-json"><code class="language-json"><span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=production webpack"</span><span class="token punctuation">,</span>    <span class="token property">"dev"</span><span class="token operator">:</span> <span class="token string">"NODE_ENV=development webpack-dev-server"</span><span class="token punctuation">}</span></code></pre><p>其中  <code>build</code> 为 正式环境，<code>dev</code> 为开发环境。分别添加变量。</p><p>然后修改<code>webpack.config.js</code>  </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//启动webpack时设置的环境变量全都存储在  process.env 变量下.</span><span class="token comment" spellcheck="true">//判断当前启动环境是不是 开发环境.</span><span class="token keyword">const</span> isDev <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'development'</span><span class="token comment" spellcheck="true">//config 中是 基础配置,下面会根据 isDev 来在基础配置上添加一些 开发环境的配置</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>  target<span class="token punctuation">:</span> <span class="token string">'web'</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//webpack 编译环境</span>  entry<span class="token punctuation">:</span> <span class="token operator">...</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token operator">...</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//1.vue会根据环境来区分打包代码,2.在代码中可以引用该变量</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      process<span class="token punctuation">:</span> <span class="token punctuation">{</span>        env<span class="token punctuation">:</span> <span class="token punctuation">{</span>          NODE_ENV<span class="token punctuation">:</span> isDev <span class="token operator">?</span> <span class="token string">'"develpoment"'</span> <span class="token punctuation">:</span> <span class="token string">'"production"'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果是 开发环境 则添加一些额外配置</span><span class="token keyword">if</span> <span class="token punctuation">(</span>isDev<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//映射 source文件和编译后文件 便于调试    #webpack推荐方式</span>  config<span class="token punctuation">.</span>devtool <span class="token operator">=</span> <span class="token string">'#cheap-module-eval-source-map'</span>  config<span class="token punctuation">.</span>devServer <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> config</code></pre><p>通过 <code>scripts</code>中的启动参数来判断是非为开发环境。并添加<code>DefinePlugin</code> 。</p><h4 id="Html文件通过插件生成"><a href="#Html文件通过插件生成" class="headerlink" title="Html文件通过插件生成"></a>Html文件通过插件生成</h4><p>这一项很简单</p><pre class=" language-bash"><code class="language-bash">yarn add html-webpack-plugin</code></pre><pre class=" language-javascript"><code class="language-javascript">plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token comment" spellcheck="true">//vue会根据环境来区分打包代码,在代码中可以引用该变量</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      process<span class="token punctuation">:</span> <span class="token punctuation">{</span>        env<span class="token punctuation">:</span> <span class="token punctuation">{</span>          NODE_ENV<span class="token punctuation">:</span> isDev <span class="token operator">?</span> <span class="token string">'"develpoment"'</span> <span class="token punctuation">:</span> <span class="token string">'"production"'</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HTMLPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span></code></pre><p>这时 <code>webpack</code> 就会自动生成一个 html文件，并引入打包后的 js文件。</p><h4 id="添加更多的loader"><a href="#添加更多的loader" class="headerlink" title="添加更多的loader"></a>添加更多的<code>loader</code></h4><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">//指定 .vue 文件的 处理 loader</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(vue)$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(css)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token string">'style-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//把css 代码写入到 html页面中</span>          <span class="token string">'css-loader'</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(gif|jpg|jpeg|png|svg)$/</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//url-loader 依赖于 file-loader</span>            options<span class="token punctuation">:</span> <span class="token punctuation">{</span>              limit<span class="token punctuation">:</span> <span class="token number">1024</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//小于 1024kb的 图片直接转为 base64代码</span>              name<span class="token punctuation">:</span> <span class="token string">'[name].[ext]'</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span></code></pre><p>比如图片路径处理的 loader 或者添加 <code>sass</code> <code>less</code>等</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">{</span>     test<span class="token punctuation">:</span> <span class="token regex">/\.scss$/</span><span class="token punctuation">,</span>    use<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">'style-loader'</span><span class="token punctuation">,</span>      <span class="token string">'css-loader'</span><span class="token punctuation">,</span>      <span class="token string">'sass-loader'</span>    <span class="token punctuation">]</span> <span class="token punctuation">}</span></code></pre><p>比如要使用 <code>sass</code> 需要安装<code>`loader</code></p><pre class=" language-bash"><code class="language-bash">yarn add sass-loader node-sass</code></pre><p><code>sass-loader</code> 依赖 <code>node-sass</code> 处理。</p><p><code>use</code>的处理逻辑是从最后一层<code>loader</code>开始逐级向上一层处理：<code>sass-loader</code>处理完成后交由<code>css-loader</code>来处理，最后交给<code>style-loader</code> 来处理并添加到<code>html</code>代码中。</p><h4 id="组件热加载"><a href="#组件热加载" class="headerlink" title="组件热加载"></a>组件热加载</h4><p>​    原来我理解的组件热加载是当我改动代码后，浏览器会自动的刷新页面来重新渲染组件，后来我发现这个理解是不对的。（也不能说不对，只是这种热加载是原来基于 <code>Java</code>开发的热加载的理解。😓），<code>webpack</code> 中的热加载是说，当修改组件后，页面只对修改后的组件进行重新渲染，而不是刷新整个页面。</p><p>进入配置：</p><pre class=" language-javascript"><code class="language-javascript">config<span class="token punctuation">.</span>devServer <span class="token operator">=</span> <span class="token punctuation">{</span>    port<span class="token punctuation">:</span> <span class="token number">3000</span><span class="token punctuation">,</span>    host<span class="token punctuation">:</span> <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>    overlay<span class="token punctuation">:</span> <span class="token punctuation">{</span>      errors<span class="token punctuation">:</span> <span class="token boolean">true</span>     <span class="token comment" spellcheck="true">//开启在页面上显示报错信息</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//开启热加载    修改组件后只重新渲染修改的组件 不会让整个页面重新加载 </span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//热加载需要的 插件</span>  config<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//解决一些不需要的信息的展示问题 -_- 不是很懂</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NoEmitOnErrorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span></code></pre><p>在<code>devServer</code> 中开启 <code>hot</code> 热加载，然后需要添加相应的插件来做支持。热加载就开启完成了。</p><p>后面我会对该配置项进行进一步的升级。因为目前来看这个配置显得很凌乱，而且扩展性不强。如果在添加更多的环境，配置起来就会很麻烦。</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>macOs连接MySQL出现Can&#39;t connect to local MySQL server through socket &#39;/tmp/mysql.sock&#39; (2)解决办法</title>
      <link href="/macos-connection-mysql-appears-cant-connect-to-local-server-through-socket-tmpmysqlsock-2-solution.html"/>
      <content type="html"><![CDATA[<p>由于很久没有做后端开发，早前机器上装的MySQL 很久都没有打开过了，今天要做一个node+express+mysql的项目时，连接MySQL发现如下错误：</p><pre class=" language-bash"><code class="language-bash">ERROR 2002 <span class="token punctuation">(</span>HY000<span class="token punctuation">)</span>: Can<span class="token string">'t connect to local MySQL server through socket '</span>/tmp/mysql.sock' <span class="token punctuation">(</span>2<span class="token punctuation">)</span></code></pre><p>然后百度了半天，说什么：</p><p><del>连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。</del></p><p>吧啦吧啦一大堆，跟着做了半天也没搞定。</p><p>然后在设置中查看MySQL状态，发现MySQL服务没有起来。点击启动后提示：</p><pre class=" language-bash"><code class="language-bash">Warning:The /usr/local/mysql/data directory is not owned by the <span class="token string">'mysql'</span> or <span class="token string">'_mysql'</span>。</code></pre><p>然后跟着这条线索继续寻找答案，功夫不负有心人：发现是因为Mac OS X的升级或其他原因会导致ＭySQL启动或开机自动运行时<code>/usr/local/mysql/data</code>的宿主发生了改变，没有了这个文件夹的权限了，所以在终端上执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">chown</span> -R mysql /usr/local/mysql/data  </code></pre><p>👌，成功启动。</p>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> mySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo折腾记</title>
      <link href="/hexo-toss.html"/>
      <content type="html"><![CDATA[<p>继把博客迁移到腾讯云后，继续折腾Hexo。</p><h4 id="添加-About-页面。"><a href="#添加-About-页面。" class="headerlink" title="添加 About 页面。"></a>添加 About 页面。</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>heox 会根据<code>scaffolds/page.md</code> 在<code>source</code> 下创建一个<code>about/index.md</code> 文件，写文章一样编辑这个文件，<code>hexo g</code> 时就会编译出一个页面。</p><p>然后在<code>themes</code> 下的<code>__config.yml</code> 的 <code>menu</code> 下添加导航菜单;</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pages</span><span class="token punctuation">:</span>    <span class="token key atrule">关于我</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#Name</span>        <span class="token key atrule">link</span><span class="token punctuation">:</span> <span class="token string">"/about"</span>    <span class="token comment" spellcheck="true">#路径</span>        <span class="token key atrule">icon</span><span class="token punctuation">:</span> person    <span class="token comment" spellcheck="true">#导航图标</span>        <span class="token key atrule">divider</span><span class="token punctuation">:</span> <span class="token boolean important">true    </span><span class="token comment" spellcheck="true">#主题的————样式</span></code></pre><p>重新 生成页面后 会在导航菜单上多一个 关于我  的菜单。</p><p>这里其实还添加了 <code>resume</code> 页面，只是我的简历并没有部署到服务器中，在码云的pages里，只是做个链接过去就行了，但是为了方便修改，我在主题配置中添加了一个变量，用来管理是否显示简历导航入口，然后修改 主题的模版 添加一行简历页面入口。</p><h4 id="添加404页面"><a href="#添加404页面" class="headerlink" title="添加404页面"></a>添加404页面</h4><p>在 <code>source</code> 目录下新建<code>error/404.html</code>  </p><p>编辑<code>404.html</code> 页面。</p><p>配置<code>__config.yml</code>  添加配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">skip_render</span><span class="token punctuation">:</span> error/**       <span class="token comment" spellcheck="true">#文件夹下的内容将不会转化为html，直接被 copy 到public 文件夹</span></code></pre><p>在服务器中 <code>Nginx</code>的配置文件中添加如下配置：</p><pre class=" language-bash"><code class="language-bash">sodu vim /etc/nginx/sites-available/default</code></pre><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">error_page</span> <span class="token number">404</span> <span class="token number">403</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html<span class="token punctuation">;</span><span class="token keyword">location</span> <span class="token operator">=</span> <span class="token operator">/</span><span class="token number">404</span><span class="token punctuation">.</span>html <span class="token punctuation">{</span>    <span class="token keyword">root</span> <span class="token operator">/</span>var<span class="token operator">/</span>www<span class="token operator">/</span>hexo<span class="token operator">/</span>error<span class="token punctuation">;</span><span class="token punctuation">}</span>    </code></pre><p><code>hexo g &amp;&amp; hexo d</code> 👌</p><h4 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h4><p>原来部署在<code>Github pages</code> 时，<code>github</code> 禁止搜索引擎爬虫，SEO做不做其实影响不大，既然迁移到自己的服务商了就还是做一些吧，虽然SEO我只懂点皮毛。</p><p>首先我能想到的就是 URL 路径的优化，原来我的文章路径都是<code>:year/:month/:day/:title/</code> 格式,很不利于SEO。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># permalink: :year/:month/:day/:title/</span><span class="token key atrule">permalink</span><span class="token punctuation">:</span> <span class="token punctuation">:</span>title.html  <span class="token comment" spellcheck="true">#优化 URL 利于SEO</span></code></pre><p>文章直接修改在根路径下。</p><p>然后打开百度搜索：</p><pre class=" language-tex"><code class="language-tex">site:zhangdi.site</code></pre><p>发现果然没收录，收录的内容还是原来我再百度云托管的 简历页面。</p><p>打开<a href="https://ziyuan.baidu.com/" target="_blank" rel="noopener">百度站长平台</a> 注册并认证域名：我使用的是 域名解析认证，因为这个最方便，直接在云解析中添加解析就行。</p><p>添加 sitemap 插件</p><pre class=" language-bash"><code class="language-bash">yarn add hexo-generator-sitemap hexo-generator-baidu-sitemap</code></pre><p>然后打开 <a href="http://zhangdi.site/baidusitemap.xml">http://zhangdi.site/baidusitemap.xml</a> 查看<code>sitemap.xml</code> 已经生成。👌</p><p>然后配置 主动向 百度提交链接：</p><p>安装插件：</p><pre class=" language-bash"><code class="language-bash">yarn add hexo-baidu-url-submit</code></pre><p>在百度站长平台 &gt; 链接提交 &gt; 主动推送 下找到 <code>token</code></p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-23/52408285.jpg" alt=""></p><p>添加配置项：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">baidu_url_submit</span><span class="token punctuation">:</span>  <span class="token key atrule">count</span><span class="token punctuation">:</span> <span class="token number">100 </span>  <span class="token key atrule">host</span><span class="token punctuation">:</span> zhangdi.site <span class="token comment" spellcheck="true"># 注册的域名</span>  <span class="token key atrule">token</span><span class="token punctuation">:</span> xxxxxxxxxxxxx <span class="token comment" spellcheck="true"># 秘钥 token</span>  <span class="token key atrule">path</span><span class="token punctuation">:</span> baidu_urls.txt <span class="token comment" spellcheck="true"># 文本文档的地址， 新链接会保存在此文本文档里</span>  ·····<span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> git  <span class="token key atrule">repo</span><span class="token punctuation">:</span> xxxxxxxxx  <span class="token key atrule">branch</span><span class="token punctuation">:</span> master<span class="token punctuation">-</span> <span class="token key atrule">type</span><span class="token punctuation">:</span> baidu_url_submitter </code></pre><p>配置完成后，每次<code>hexo d</code> 提交时，都会向百度推送链接。</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-23/44138147.jpg" alt=""></p><p>但是百度的反应很慢，提交了一天了 也没什么反应。。好吧，先这样吧；</p><p>其他搜索引擎应该也差不多，但是懒得搞 -_-</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> SEO </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GitHub部署的Hexo博客迁移到云主机</title>
      <link href="/hexo-blog-deployed-by-github-migrated-to-cloud-host.html"/>
      <content type="html"><![CDATA[<p>​    最近由于一些 <strong>未知的原因</strong>  ╮(╯_╰)╭导致Github 访问异常的缓慢，甚至打不开的情况，我考虑把博客迁移出Github，选择了一圈下来，免费的无非就是 码云/Coding，这俩都是国内的服务 速度就比较正常，不快不慢，但问题在于 码云没有部署 <code>CNAME</code> 域名无法用，只能用<code>gitee.io</code> 的主域名，Pass！ Coding 可以部署自己的域名，但是免费用户需要进行广告页跳转，也是非常的恶心，199元年费会员能够解决问题，本想下手的，无意间群里发了消息说是 ￥360/3年 甚至5年的 腾讯云服务，5年需要简配（1C1G1M配置），其实想一想算下来真的还不如搞个云服务，买服务的时候发现我原来的域名马上到期了，正好腾讯上有个 .xyz 的域名 首年￥11，果断下手备案，总计花费：371元。</p><p>首先说一下部署的整体思路：</p><ul><li>使用<code>Nginx</code> 来做静态Web服务器</li><li>通过<code>Git</code> 来连接本地与服务器</li></ul><p>下面进入正题一步步完成部署。</p><h4 id="服务器环境搭建"><a href="#服务器环境搭建" class="headerlink" title="服务器环境搭建"></a>服务器环境搭建</h4><p>&lt;服务器是 ubuntu server 16.04&gt;</p><p>连接到服务器：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> ubuntu@xxx.xx.xx.xx<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>//输入密码//连接成功后//更新 <span class="token function">apt-get</span><span class="token function">sudo</span> <span class="token function">apt-get</span> update    //安装 GIt 和 Nginx<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span> nginx -y</code></pre><h4 id="本地环境（由于本地环境之前已经搭建完毕，略过-）"><a href="#本地环境（由于本地环境之前已经搭建完毕，略过-）" class="headerlink" title="本地环境（由于本地环境之前已经搭建完毕，略过..）"></a>本地环境（由于本地环境之前已经搭建完毕，略过..）</h4><h4 id="服务器端配置（Git-Nginx）"><a href="#服务器端配置（Git-Nginx）" class="headerlink" title="服务器端配置（Git/Nginx）"></a>服务器端配置（Git/Nginx）</h4><ul><li>创建一个本地仓库，作为hexo 静态页面的远程仓库</li><li>配置<code>Nginx</code> </li><li>配置<code>Git</code> 远程仓库 Hooks</li></ul><pre class=" language-bash"><code class="language-bash">//新建 repo 目录sodu <span class="token function">mkdir</span>  /var/repo//配置用户权限<span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token variable">$USER</span><span class="token keyword">:</span><span class="token variable">$USER</span> /var/repo/<span class="token function">sudo</span> <span class="token function">chown</span> -R 755 /var/repo///在 /var/repo 下新建裸仓库<span class="token function">cd</span> /var/repo<span class="token function">git</span> init --bare hexo_static.git</code></pre><p>配置<code>Nginx</code>，在<code>www</code> 目录下新建一个存放 <code>hexo</code> 静态页面的文件夹:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> -p /var/www/hexo//授权<span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token variable">$USER</span><span class="token keyword">:</span><span class="token variable">$USER</span> /var/www/hexo<span class="token function">sudo</span> <span class="token function">chmod</span> -R 755 /var/www/hexo</code></pre><p>然后，修改 <code>Nginx</code> 的  default 配置：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> vim /etc/nginx/sites-available/default</code></pre><p>将其中的 root 指令指向 /var/www/hexo 目录。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token punctuation">...</span>server <span class="token punctuation">{</span>    listen 80 default_server;    listen <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>80 default_server ipv6only=on;    root /var/www/hexo; <span class="token comment" spellcheck="true"># 需要修改的部分</span>    index index.html index.htm;<span class="token punctuation">...</span></code></pre><p>保存并退出文件。<br>因为域名正在备案，所以先不填,备案成功后可以再将配置中的 default_server 修改为域名。</p><p>最后，重启 Nginx 服务，使得改动生效。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> nginx restart</code></pre><hr><p>这里要提一下 <code>vi</code> 的用法，打开文件后有三种状态，</p><ul><li>分别是命令模式（command mode），控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下或者到 last line mode</li><li>插入模式（Insertmode），只有在Insert mode下，才可以做文字输入，按<code>ESC</code>键可回到命令行模式。</li><li>底行模式（last line mode），将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。</li></ul><p>进入vi之后，是处于<code>命令行模式（command mode）</code>，要切换到<code>插入模式（Insert mode）</code>才能够输入文字，在<code>命令行模式（command mode）</code>下按一下字母<code>i</code>就可以进入<code>插入模式（Insert mode）</code>，这时候你就可以开始输入文字了。</p><p>在<code>命令行模式（command mode）</code>下，按一下<code>:</code>冒号键进入<code>Last line mode</code>，例如：</p><p><code>:w filename</code>（输入 「w filename」将文章以指定的文件名filename保存）</p><p><code>:wq</code>(输入「wq」，存盘并退出vi)</p><p><code>:q!</code>(输入q!， 不存盘强制退出vi)</p><hr><p>配置 <code>Git</code> 钩子</p><p>在服务器上的裸仓库 hexo_static 创建一个钩子，在满足特定条件时将静态 HTML 文件传送到 Web 服务器的目录下，即 /var/www/hexo，在自动生成的 hooks 目录下创建一个新的钩子文件：</p><pre class=" language-bash"><code class="language-bash">vim /var/repo/hexo_static.git/hooks/post-receive</code></pre><pre class=" language-shell"><code class="language-shell">#!/bin/bashgit --work-tree=/var/www/hexo --git-dir=/var/repo/hexo_static.git checkout -f</code></pre><p>在该文件中添加两行代码，指定 Git 的工作树（源代码）和 Git 目录（配置文件等），保存并退出文件，并让该文件变为可执行文件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> +x /var/repo/hexo_static.git/hooks/post-receive</code></pre><p>至此，服务端的配置基本结束了。</p><p>下来就是修改 本地 <code>hexo</code> 的配置了。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># URL</span><span class="token comment" spellcheck="true">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//server<span class="token punctuation">-</span>ip <span class="token comment" spellcheck="true"># 域名或IP地址</span><span class="token key atrule">root</span><span class="token punctuation">:</span> /····<span class="token key atrule">deploy</span><span class="token punctuation">:</span>    <span class="token key atrule">type</span><span class="token punctuation">:</span> git    <span class="token key atrule">repo</span><span class="token punctuation">:</span> ubuntu@(xxx.xx.xx.xx云服务器的IP地址)<span class="token punctuation">:</span>/var/repo/hexo_static    <span class="token key atrule">branch</span><span class="token punctuation">:</span> master</code></pre><p>然后本地执行 <code>hexo d</code> 就会提交到 <code>/var/www/hexo</code> 下。</p><p>这里有个坑，我还没有解决：</p><p><code>hexo d</code> 提交时提示：<code>Everything up-to-date</code></p><p>我认为应该是 git 暂存的问题，应该是 <code>hexo d</code> 这个命令的执行过程的问题，具体我没搞明白。</p><p>最后想了个笨办法，<code>init</code> 一个新的工程，然后把原来的文章配置等覆盖过来，然后提交能够解决问题。</p><p>解决了再来更新吧。</p><p>end…</p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Hexo </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解JavaScript原型</title>
      <link href="/understanding-javascript-prototypes.html"/>
      <content type="html"><![CDATA[<p>对于学习<strong>JavaScript</strong>来说，理解原型的工作原理是非常重要的，毕竟它的对象模型是被视为基于原型的。</p><p>以下是对于理解原型的一些重要内容：</p><ul><li>每个函数都拥有的 <code>prototype</code>属性</li><li>如何给原型对象添加属性并使用</li><li>如何区分自身属性与原型属性</li><li><code>__proto__</code> </li><li>一些原型方法：<code>isPrototypeOf()</code> <code>hasOwnProperty()</code> <code>propertyIsEnumerable()</code> 等</li></ul><h4 id="原型属性"><a href="#原型属性" class="headerlink" title="原型属性"></a>原型属性</h4><p>在JavaScript中，函数本身也是包含了方法和属性的对象；</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">}</span>foo<span class="token punctuation">.</span>length        <span class="token comment" spellcheck="true">//2</span></code></pre><p>这是会看到，我们在定义<code>foo()</code>函数时并未给它定义<code>length</code>属性，但依然打印出了结果。然后我们打印<code>foo.prototype</code>    可以在控制台中看到如下结果：</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-18/29650977.jpg" alt=""></p><p><code>protpotype</code>中包含两个属性：一个函数<code>constructor</code>和 一个对象<code>__proto__</code> ，<code>constructor</code> 中又存在<code>prototype</code>和<code>__proto__</code>,当我看到这里 我实际上是懵逼的😳</p><p>下面通过一个构造函数来整理一下思路：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'My name is '</span><span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span>'<span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> tom <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> mike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'mike'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React Native 开发环境搭建</title>
      <link href="/react-native-development-environment.html"/>
      <content type="html"><![CDATA[<p>对搭建<code>React Native</code> 开发环境（其实是打包编译环境Building Projects with Native Code）做一个记录，和一些踩到的坑。</p><p>首先需要准备的一些环境：</p><ul><li>NodeJs v6.0+</li><li>Mac环境需要<a href="http://brew.sh/" target="_blank" rel="noopener">Homebrew</a></li><li>yarn</li></ul><p>首先需要安装<code>node</code> 6.0+ 过程不赘述；</p><p>Mac环境安装<code>Homebrew</code> 不赘述，直接看官网；</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> nodebrew <span class="token function">install</span> watchman</code></pre><blockquote><p><a href="https://facebook.github.io/watchman" target="_blank" rel="noopener">Watchman</a> is a tool by Facebook for watching changes in the filesystem. It is highly recommended you install it for better performance.</p></blockquote><blockquote><p>Watchman是Facebook关注文件系统变化的工具。强烈建议安装它以获得更好的性能。</p></blockquote><p>目前主要针对 Android 环境，所以需要安装 <code>Android studio</code> 和 <code>Android SDK</code></p><p><a href="https://developer.android.com/studio/index.html" target="_blank" rel="noopener">Download and install Android Studio</a></p><p><code>Android Studio</code>需要<code>Java Development Kit [JDK] 1.8</code>  过程不赘述；</p><p>通过 <code>javac -version</code> 查看JDK版本；</p><p>选择默认安装，<code>Android Support Repository</code> React-Native 必须依赖的，务必要勾选；</p><p>安装完成后打开进入欢迎界面，选择<code>Configure</code> =&gt;<code>SDK Manager</code></p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-15/52135133.jpg" alt=""></p><p><strong>Appearance &amp; Behavior</strong> → <strong>System Settings</strong> → <strong>Android SDK</strong>.</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-15/94387439.jpg" alt=""></p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-15/94387439.jpg" alt=""></p><p>应用安装成功后继续：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">export</span> ANDROID_HOME<span class="token operator">=</span><span class="token variable">$HOME</span>/Library/Android/sdk<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$ANDROID_HOME</span>/tools<span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span><span class="token keyword">:</span><span class="token variable">$ANDROID_HOME</span>/platform-tools</code></pre><p>将上面的代码添加到<code>$HOME/.bash_profile</code> 配置文件中，确保<code>ANDROID_HOME</code>环境变量正确地指向了你安装的Android SDK的路径；<strong>如果你不是通过Android Studio安装的sdk，则其路径可能不同，请自行确定清楚。</strong></p><p>~ 可以使用<code>vi</code>,不熟悉的话(比如我~~)，可以使用 <code>open .bash_profile</code> 使用编辑器打开。</p><p>然后使用下列命令使其立即生效（否则重启后才生效）：</p><pre class=" language-Bash"><code class="language-Bash">source ~/.bash_profile</code></pre><p>可以使用<code>echo $ANDROID_HOME</code>检查此变量是否已正确设置。</p><p>至此环境配置基本完成，下面创建一个项目来进行测试；</p><pre class=" language-Bash"><code class="language-Bash">react-native init firstAppcd firstAppreact-native run-android</code></pre><p>启动的时候需要开启模拟器或真机调试，但是Android Studio自带的模拟器我不会开，所以使用第三方的一个模拟器 <strong><a href="https://www.genymotion.com/download" target="_blank" rel="noopener">Genymotion</a></strong></p><ol><li>下载和安装<a href="https://www.genymotion.com/download" target="_blank" rel="noopener">Genymotion</a>（genymotion需要依赖VirtualBox虚拟机，下载选项中提供了包含VirtualBox和不包含的选项，请按需选择）。</li><li>打开Genymotion。如果你还没有安装VirtualBox，则此时会提示你安装。</li><li>创建一个新模拟器并启动。</li><li>启动React Native应用后，可以按下⌘+M来打开开发者菜单。</li></ol><p>新建模拟器之前需要先在<code>setting</code>中设置<code>Android SDK</code> 的路径(不知道路径的话，在终端中 <code>echo $ANDROID_HOME</code> 命令获取)，然后选择一个版本的模拟器进行创建。</p><p>然后在<code>websorm</code> 中打开项目，启动栏选择<code>Edit Configurations</code> 会自动创建 <code>react native</code> 启动配置。如下：</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-16/91834467.jpg" alt=""></p><p>点击启动==&gt;</p><p>控制台打印</p><pre class=" language-bash"><code class="language-bash">BUILD SUCCESSFULTotal time: 9.856 secs</code></pre><p>说明启动成功了，在模拟器中查看==&gt;</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-16/91889314.jpg" alt=""></p><p>然后开大 <code>app.js</code>添加：</p><pre class=" language-jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>instructions<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>    hello world<span class="token operator">!</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span></code></pre><p>打开模拟器 double click <code>R</code>；页面会即时刷新；</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-3-16/10471384.jpg" alt=""></p><p>至此 <code>React Native</code> 的开发环境及 <code>hello world</code> 就完成了。</p><p>期间虽然遇到一些坑，幸好坑不算大，跟着官方文档走 基本都能搞定；</p>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React-Native </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue+Webpack开发环境构建</title>
      <link href="/.html"/>
      <content type="html"><![CDATA[<p>Vue+Webpack 构建一个基础 vue 开发环境。废话不多说直接上。</p><p>首先，创建一个新的工程，执行<code>yarn init</code></p><p>然后安装必要依赖包。</p><pre class=" language-bash"><code class="language-bash">yarn add vue vue-loader vue-template-compiler webpack webpack-dev-server css-loader</code></pre><p>然后在<code>package.json</code>中添加</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"dev"</span><span class="token punctuation">:</span> <span class="token string">"webpack-dev-server --hot"</span><span class="token punctuation">}</span></code></pre><p>新建<code>src</code> 文件夹，然后依次创建 <code>main.js</code> <code>router.js</code> <code>app.vue</code> 和 <code>views</code>文件夹。</p><p>新建<code>webpack.config.js</code> 配置<code>webpack</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src/main.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        publicPath<span class="token punctuation">:</span> <span class="token string">'/static/'</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"vue-loader"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span> <span class="token regex">/\.css$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"vue-style-loader"</span><span class="token punctuation">,</span> <span class="token string">"css-loader"</span><span class="token punctuation">]</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置项不赘述。</p><p>新建<code>index.html</code> </p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Vue-Demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>修改入口文件：<code>main.js</code> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./app.vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> routerConfig <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span>routerConfig<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>    router<span class="token punctuation">:</span> router<span class="token punctuation">,</span>    render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>修改路由配置文件：<code>router.js</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> index <span class="token keyword">from</span> <span class="token string">'./views/index.vue'</span><span class="token keyword">import</span> page1 <span class="token keyword">from</span> <span class="token string">'./views/page1.vue'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>            redirect<span class="token punctuation">:</span> <span class="token string">'/index'</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/index'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> index        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>            path<span class="token punctuation">:</span> <span class="token string">'/page1'</span><span class="token punctuation">,</span>            component<span class="token punctuation">:</span> page1        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>修改 <code>app.vue</code></p><pre class=" language-vue"><code class="language-vue"><template>    <div>        <div class="navbar">            <router-link to="/index">Home</router-link>            <router-link to="/page1">Page1</router-link>        </div>        <div>            <router-view></router-view>        </div>    </div></template><style>    .navbar a{        text-decoration: none;        color: black;        display: inline-block;        padding: 3px 5px;        border: 1px solid #ccc;    }    /** 使用<router-link> 时 vue会为当前路由设置 router-link-active 类 */    .navbar a.router-link-active{        color: red;    }</style></code></pre><p>在<code>views</code> 下新建<code>index.vue</code> <code>page1.vue</code></p><pre class=" language-vue"><code class="language-vue">//index.vue<template>    <div>        <h1>This page is {{pageName}}</h1>    </div></template><script>    export default {        data: function () {            return {                pageName:'Home'            }        }    }</script></code></pre><pre class=" language-vue"><code class="language-vue">//page1.vue<template>    <h1>This page is {{pageName}}</h1></template><script>    export default {        data: function () {            return {                pageName: 'Page1'            }        }    }</script></code></pre><p>终端中运行：<code>yarn run dev</code> 项目启动成功 浏览器：localhost:8080</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-2-26/9912271.jpg" alt=""></p><p>至此一个非常简单的vue工程 就搭建完成了。</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RxJs学习笔记(一)</title>
      <link href="/rxjs-study-notes-1.html"/>
      <content type="html"><![CDATA[<h4 id="RxJs是什么？"><a href="#RxJs是什么？" class="headerlink" title="RxJs是什么？"></a>RxJs是什么？</h4><blockquote><p><code>RxJS</code> 是一个库，它通过使用 <code>observable</code> 序列来编写异步和基于事件的程序。它提供了一个核心类型 <code>Observable</code>，附属类型 (<code>Observer</code>、 <code>Schedulers</code>、 <code>Subjects</code>) 和受 [Array#extras] 启发的操作符 (<code>map</code>、<code>filter</code>、<code>reduce</code>、<code>every</code>, 等等)，这些数组操作符可以把异步事件作为集合来处理。</p></blockquote><p><code>ReactiveX</code> 结合了 观察者模式、迭代器模式 和 使用集合的函数式编程，以满足以一种理想方式来管理事件序列所需要的一切。</p><p>RxJS 中用来解决异步事件管理的的基本概念：</p><ul><li><code>Observable</code> (可观察对象): 表示一个概念，这个概念是一个可调用的未来值或事件的集合。</li><li><code>Observer</code> (观察者): 一个回调函数的集合，它知道如何去监听由 <code>Observable</code> 提供的值。</li><li><code>Subscription</code> (订阅): 表示 <code>Observable</code> 的执行，主要用于取消 <code>Observable</code> 的执行。</li><li><code>Operators</code> (操作符): 采用函数式编程风格的纯函数 (pure function)，使用像 <code>map</code>、<code>filter</code>、<code>concat</code>、<code>flatMap</code> 等这样的操作符来处理集合。</li><li><code>Subject</code> (主体): 相当于 <code>EventEmitter</code>，并且是将值或事件多路推送给多个 <code>Observer</code> 的唯一方式。</li><li><code>Schedulers</code> (调度器): 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 <code>setTimeout</code> 或 <code>requestAnimationFrame</code> 或其他。</li></ul><p>示例：</p><p>注册事件监听器的常规写法。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Clicked!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 RxJS 的话，创建一个 observable 来代替。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>button<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Clicked!'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>以上是对RxJs的基本示例，下面搭建一个 webpack + babel 的工程来做一些简单的演示。（顺便复习webpack配置）</p><h5 id="1-新建工程"><a href="#1-新建工程" class="headerlink" title="1. 新建工程"></a>1. 新建工程</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> rxjs-demo <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> rxjs-demoyarn inityarn add webpack webpack-dev-server babel babel-loader babel-preset-env rxjs <span class="token function">mkdir</span> src <span class="token function">mkdir</span> public</code></pre><p> 因为使用 ES6语法，所以使用 babel-loader babel-preset-env;</p><h5 id="2-配置webpack"><a href="#2-配置webpack" class="headerlink" title="2. 配置webpack"></a>2. 配置webpack</h5><p>新建 <code>webpack.config.js</code> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'src/index.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//配置入口</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        path<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span><span class="token string">'bundle.js'</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    devServer<span class="token punctuation">:</span><span class="token punctuation">{</span>        contentBase<span class="token punctuation">:</span> <span class="token string">"./public"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//本地服务器所加载的页面所在的目录</span>        historyApiFallback<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//不跳转</span>        inline<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        hot<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">//热更新</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        rules<span class="token punctuation">:</span><span class="token punctuation">[</span>            <span class="token punctuation">{</span>                test<span class="token punctuation">:</span><span class="token regex">/\.js$/</span><span class="token punctuation">,</span>                use<span class="token punctuation">:</span><span class="token punctuation">{</span>                    loader<span class="token punctuation">:</span><span class="token string">'babel-loader'</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                exclude<span class="token punctuation">:</span><span class="token operator">/</span>node_module<span class="token operator">/</span>        <span class="token comment" spellcheck="true">//排除node_module</span>            <span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span><span class="token punctuation">[</span>        <span class="token keyword">new</span> <span class="token class-name">wenpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//添加热更新插件</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>修改package.json </p><pre class=" language-json"><code class="language-json">//添加 <span class="token property">"scripts"</span><span class="token operator">:</span><span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span><span class="token string">"webpack-dev-server --open"</span> <span class="token punctuation">}</span></code></pre><p>Ok，webpack配置完成。</p><h5 id="3-实践RxJs-在public-下新建-index-html"><a href="#3-实践RxJs-在public-下新建-index-html" class="headerlink" title="3. 实践RxJs 在public 下新建 index.html"></a>3. 实践RxJs 在public 下新建 <code>index.html</code></h5><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zh-cn<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>RxJs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>在src下新建<code>index.js</code> </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Rx <span class="token keyword">from</span> <span class="token string">'rxjs/Rx'</span><span class="token punctuation">;</span><span class="token keyword">const</span> root <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> createButton <span class="token operator">=</span> <span class="token punctuation">(</span>buttonName<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    button<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> buttonName<span class="token punctuation">;</span>    root<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>button<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> button<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>执行 <code>yarn start</code></p><hr><h3 id="纯净性-Purity"><a href="#纯净性-Purity" class="headerlink" title="纯净性 (Purity)"></a>纯净性 (Purity)</h3><p>使得 RxJS 强大的正是它使用纯函数来产生值的能力。这意味着你的代码更不容易出错。</p><p>通常你会创建一个非纯函数，这个函数之外也使用了共享变量的代码会把将你的应用状态搞得一团糟。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> globalCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> btn1 <span class="token operator">=</span> <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token string">'RxJs方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> btn2 <span class="token operator">=</span> <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token string">'常规方式'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> btn3 <span class="token operator">=</span> <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token string">'检查GlobalCount'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// scan 操作符的工作原理与数组的 reduce 类似。</span><span class="token comment" spellcheck="true">// 它需要一个暴露给回调函数当参数的初始值。每次回调函数运行后的返回值会作为下次回调函数运行时的参数。</span>Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>btn1<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>count <span class="token operator">=</span><span class="token operator">></span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span> count <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn2<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`当前globalCount:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">++</span>globalCount<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>btn3<span class="token punctuation">,</span><span class="token string">'click'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">alert</span><span class="token punctuation">(</span>globalCount<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="流动性-Flow"><a href="#流动性-Flow" class="headerlink" title="流动性 (Flow)"></a>流动性 (Flow)</h3><p>RxJS 提供了一整套操作符来帮助你控制事件如何流经 observables 。</p><p>下面的代码展示的是如何控制一秒钟内最多点击一次，先来看使用普通的 JavaScript：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> rate <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">let</span> lastClick <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> rate<span class="token punctuation">;</span><span class="token keyword">const</span> btn4 <span class="token operator">=</span> <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token string">'每秒最多点击一次-原生'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn4<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastClick <span class="token operator">>=</span> rate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token operator">++</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        lastClick <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 RxJS：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> btn5 <span class="token operator">=</span> <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token string">'每秒最多点击一次-RxJs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>btn5<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">throttleTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span>count <span class="token operator">=</span><span class="token operator">></span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>count <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`Clicked </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>count<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> times`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其他流程控制操作符有 filter 、delay、debounceTime、take、takeUntil、distinct、distinctUntilChanged 等。</p><h3 id="值-Values"><a href="#值-Values" class="headerlink" title="值 (Values)"></a>值 (Values)</h3><p>对于流经 observables 的值，你可以对其进行转换。</p><p>下面的代码展示的是如何累加每次点击的鼠标 x 坐标，先来看使用普通的 JavaScript：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">let</span> rate <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">let</span> lastClick <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> rate<span class="token punctuation">;</span><span class="token keyword">const</span> btn6 <span class="token operator">=</span> <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token string">'原生'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>btn6<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastClick <span class="token operator">>=</span> rate<span class="token punctuation">)</span> <span class="token punctuation">{</span>        count <span class="token operator">+</span><span class="token operator">=</span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>        lastClick <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用 RxJS：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> btn7 <span class="token operator">=</span> <span class="token function">createButton</span><span class="token punctuation">(</span><span class="token string">'RxJs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Rx<span class="token punctuation">.</span>Observable<span class="token punctuation">.</span><span class="token function">fromEvent</span><span class="token punctuation">(</span>btn7<span class="token punctuation">,</span> <span class="token string">'click'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">throttleTime</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>event <span class="token operator">=</span><span class="token operator">></span> event<span class="token punctuation">.</span>clientX<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">scan</span><span class="token punctuation">(</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> clientX<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> count <span class="token operator">+</span> clientX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>count <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>其他产生值的操作符有pluck、pairwise、sample等。</p><p>未完待续…</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> RxJs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack 学习笔记(二)</title>
      <link href="/webpack-study-notes-2.html"/>
      <content type="html"><![CDATA[<p>接着上一篇的 入口 <code>entry</code> 和 出口 （输出） <code>output</code>  然后就是  <code>loader</code> / <code>plugins</code></p><h4 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h4><p><code>webpack</code> 中提供一种处理多种文件格式的机制，便是使用 <code>loader</code>。我们可以把 loader 理解为是一个转换器，负责把某种文件格式的内容转换成 <code>webpack</code> 可以支持打包的模块。</p><p>举个例子，在没有添加额外插件的情况下，<code>webpack</code> 会默认把所有依赖打包成<code>js</code>文件，如果<code>import</code>一个 <code>.css</code> 的样式文件，那么我们需要 <code>css-loader</code> 来处理 <code>.css</code> 文件（这里其实还需要 <code>style-loader</code>，后续详解），最终把不同格式的文件都解析成<code>js</code>代码，以便打包后在浏览器中运行。</p><p>当我们需要使用不同的 <code>loader</code> 来解析处理不同类型的文件时，我们可以在 <code>module.rules</code> 字段下来配置相关的规则，例如使用 Babel 来处理 .js 文件:</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token regex">/\.jsx?/</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 匹配文件路径的正则表达式，通常我们都是匹配文件类型后缀</span>      include<span class="token punctuation">:</span> <span class="token punctuation">[</span>        path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 指定哪些路径下的文件需要经过 loader 处理</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 指定使用的 loader</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><code>loader</code> 是 <code>webpack</code> 中比较复杂的一块内容，它支撑着 <code>webpack</code> 来处理文件的多样性。</p><h4 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h4><p>在 <code>webpack</code> 的构建流程中，<code>plugin</code> 用于处理更多其他的一些构建任务。可以这么理解，模块代码转换的工作由 <code>loader</code> 来处理，除此之外的其他任何工作都可以交由 <code>plugin</code> 来完成。通过添加我们需要的 <code>plugin</code>，可以满足更多构建中特殊的需求。例如，要使用压缩<code>JS</code> 代码的 <code>uglifyjs-webpack-plugin</code> 插件，只需在配置中通过 <code>plugins</code> 字段添加新的 <code>plugin</code> 即可：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> UglifyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">UglifyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>除了压缩 JS 代码的 <code>uglifyjs-webpack-plugin</code>，常用的还有定义环境变量的 <code>DefinePlugin</code>，生成 <code>CSS</code> 文件的 <code>ExtractTextWebpackPlugin</code> 等。在这里提到这些 <code>plugin</code>，只是希望读者们能够对 <code>plugin</code> 的作用有个大概的印象，后续的小节会详细介绍如何使用这些 <code>plugin</code>。</p><p><code>plugin</code> 理论上可以干涉 <code>webpack</code> 整个构建流程，可以在流程的每一个步骤中定制自己的构建需求。</p><p><code>webpack</code> 的 4大主要内容就了解完了，接下来示例一个简单的 <code>webpack</code> 配置：</p><h4 id="一个简单的-Webpack-配置："><a href="#一个简单的-Webpack-配置：" class="headerlink" title="一个简单的 Webpack 配置："></a>一个简单的 Webpack 配置：</h4><p>我们把上述涉及的几部分配置内容合到一起，就可以创建一个简单的 <code>webpack</code> 配置了，<code>webpack</code> 运行时默认读取项目下的 <code>webpack.config.js</code> 文件作为配置。</p><p>所以我们在项目中创建一个 <code>webpack.config.js</code>文件：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> UglifyPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  entry<span class="token punctuation">:</span> <span class="token string">'./src/index.js'</span><span class="token punctuation">,</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> <span class="token string">'bundle.js'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.jsx?/</span><span class="token punctuation">,</span>        include<span class="token punctuation">:</span> <span class="token punctuation">[</span>          path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        use<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 代码模块路径解析的配置</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token string">"node_modules"</span><span class="token punctuation">,</span>      path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'src'</span><span class="token punctuation">)</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".wasm"</span><span class="token punctuation">,</span> <span class="token string">".mjs"</span><span class="token punctuation">,</span> <span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".jsx"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">UglifyPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 使用 uglifyjs-webpack-plugin 来压缩 JS 代码</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p><code>webpack</code> 的配置其实是一个 <code>Node.js</code>的脚本，这个脚本对外暴露一个配置对象，<code>webpack</code> 通过这个对象来读取相关的一些配置。因为是 <code>Node.js</code> 脚本，所以可玩性非常高，你可以使用任何的 <code>Node.js</code> 模块，如上述用到的 <code>path</code> 模块，当然第三方的模块也可以。</p><p>创建了 <code>webpack.config.js</code> 后再执行 <code>webpack</code> 命令，<code>webpack</code> 就会使用这个配置文件的配置了。</p><p>有的时候我们开始一个新的前端项目，并不需要从零开始配置 <code>webpack</code>，而可以使用一些工具来帮助快速生成 <code>webpack</code> 配置。</p><h4 id="脚手架中的Webpack配置"><a href="#脚手架中的Webpack配置" class="headerlink" title="脚手架中的Webpack配置"></a>脚手架中的Webpack配置</h4><p>现今，大多数前端框架都提供了简单的工具来协助快速生成项目基础文件，一般都会包含项目使用的 <code>webpack</code> 的配置，如：</p><h5 id="create-react-app"><a href="#create-react-app" class="headerlink" title="create-react-app"></a>create-react-app</h5><p><code>create-react-app</code> 的 <code>webpack</code> 配置在这个项目下：<code>react-scripts</code>。</p><h5 id="angular-devkit-build-webpack"><a href="#angular-devkit-build-webpack" class="headerlink" title="angular/devkit/build-webpack"></a>angular/devkit/build-webpack</h5><p>通常 <code>angular</code> 的项目开发和生产的构建任务都是使用 <code>angular-cli</code> 来运行的，但 <code>angular-cli</code>只是命令的使用接口，基础功能是由 <code>angular/devkit</code> 来实现的，<code>webpack</code> 的构建相关只是其中一部分，详细的配置可以参考 <code>webpack-configs</code> 。</p><h5 id="vue-cli"><a href="#vue-cli" class="headerlink" title="vue-cli"></a>vue-cli</h5><p><code>vue-cli</code> 使用 <code>webpack</code> 模板生成的项目文件中，<code>webpack</code> 相关配置存放在 <code>build</code> 目录下。</p><p>这些工具都提供了极其完整的配置来帮助开发者快捷开始一个项目，我们可以学习了解它们所提供的 <code>webpack</code> 配置，有些情况下，还会尝试修改这些配置以满足特殊的需求。</p><p>所以发现，这些极其流行的前端类库或者框架都提供了基于 <code>webpack</code> 的工具，<code>webpack</code> 基本成为前端项目构建工具的标配.</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><code>webpack</code> 的安装和使用和大多数使用 <code>Node.js</code>开发的命令行工具一样，使用 <code>npm</code> 安装后执行命令即可，<code>webpack 4.x</code> 版本的零配置特性也让上手变得更加简单。</p><p>前面已经学习了 <code>webpack</code> 的几个重要的概念：<code>入口(entry)</code>、<code>loader</code>、<code>plugin</code> 和<code>输出(output)</code>，并且展示了一个简单的 <code>webpack</code> 配置例子，最后了解了前端社区三大框架基于 <code>webpack</code> 的脚手架工具的链接。</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git小技巧</title>
      <link href="/git-tips.html"/>
      <content type="html"><![CDATA[<p>今天发现一个 Git 小技巧.github上的项目我们有时只想down它其中的某一个模块或者说只要其中的一文件夹,又不想把整个项目down下来,这种情况,可以使用一个小技巧:</p><p>比如说我们想要 <code>Spring Boot</code>工程中的 <code>spring-boot-project/spring-boot</code> 的内容 其他的不需要,</p><h5 id="首先打开-Github-的-spring-boot-项目-进入-spring-boot-project-spring-boot-目录-拷贝url"><a href="#首先打开-Github-的-spring-boot-项目-进入-spring-boot-project-spring-boot-目录-拷贝url" class="headerlink" title="首先打开 Github 的 spring boot 项目 进入 spring-boot-project/spring-boot 目录,拷贝url:"></a>首先打开 Github 的 <code>spring boot</code> 项目 进入 <code>spring-boot-project/spring-boot</code> 目录,拷贝url:</h5><pre><code>https://github.com/spring-projects/spring-boot/tree/master/spring-boot-project/spring-boot</code></pre><h5 id="修改-url-地址的-tree-master-gt-trunk"><a href="#修改-url-地址的-tree-master-gt-trunk" class="headerlink" title="修改 url 地址的 tree/master ==&gt; trunk"></a>修改 url 地址的 <code>tree/master</code> ==&gt; <code>trunk</code></h5><pre><code>https://github.com/spring-projects/spring-boot/trunk/spring-boot-project/spring-boot</code></pre><h5 id="命令行执行"><a href="#命令行执行" class="headerlink" title="命令行执行"></a>命令行执行</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> workspacesvn checkout https://github.com/spring-projects/spring-boot/trunk/spring-boot-project/spring-boot</code></pre><p>就完美解决问题了. -.- </p><p>end…</p>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> SVN </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jQuery源码之html()方法解析</title>
      <link href="/html-method-parsing-of-jquery-source-code.html"/>
      <content type="html"><![CDATA[<p>最近尝试通过 前端路由(hash)来实现一单页面应用的demo.过程中遇到一个问题:</p><p><code>ajax</code> 请求加载 <code>HTML</code> 并使用 <code>innerHTML</code> 方法添加到容器中,但 <code>innerHTML</code> 有很多局限性，比如<code>HTML</code>中有<code>&lt;script&gt;</code>标签并且包含一个立即执行的函数,如果将此字符串通过 <code>innerHTML</code> 转化为html碎片,<code>&lt;script&gt;</code>标签中的函数并不会被执行.</p><p>后来想起来 之前使用 <code>jQuery</code> 时 使用的 <code>html()</code> 方法  内包含的 脚本 都是可以执行的,所以查看了 <code>jQuery</code> 源码的 <code>html()</code> 方法:</p><pre class=" language-javascript"><code class="language-javascript">html<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">access</span><span class="token punctuation">(</span> <span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> elem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>            l <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> value <span class="token operator">===</span> undefined <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> elem<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token operator">?</span>                elem<span class="token punctuation">.</span>innerHTML<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span> rinlinejQuery<span class="token punctuation">,</span> <span class="token string">""</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span>                undefined<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// See if we can take a shortcut and just use innerHTML</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token keyword">typeof</span> value <span class="token operator">===</span> <span class="token string">"string"</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>rnoInnerhtml<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span> support<span class="token punctuation">.</span>htmlSerialize <span class="token operator">||</span> <span class="token operator">!</span>rnoshimcache<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token punctuation">(</span> support<span class="token punctuation">.</span>leadingWhitespace <span class="token operator">||</span> <span class="token operator">!</span>rleadingWhitespace<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>            <span class="token operator">!</span>wrapMap<span class="token punctuation">[</span> <span class="token punctuation">(</span> rtagName<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">""</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">[</span> <span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            value <span class="token operator">=</span> jQuery<span class="token punctuation">.</span><span class="token function">htmlPrefilter</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// Remove element nodes and prevent memory leaks</span>                    elem <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span> i <span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span> elem<span class="token punctuation">.</span>nodeType <span class="token operator">===</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>                        jQuery<span class="token punctuation">.</span><span class="token function">cleanData</span><span class="token punctuation">(</span> <span class="token function">getAll</span><span class="token punctuation">(</span> elem<span class="token punctuation">,</span> <span class="token boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                        elem<span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> value<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                elem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// If using innerHTML throws an exception, use the fallback method</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> e <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> elem <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span> value <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> arguments<span class="token punctuation">.</span>length <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码解析:</p><p><code>html()</code>函数返回一个单例闭包<code>access()</code>函数,避免作用域污染;</p><p>接下来主要看这段代码中的 三个 <code>if</code>,其中:<code>rnoInnerhtml = /&lt;script|&lt;style|&lt;link/i</code>;</p><ol><li>判断<code>value</code>是否存在,如果<code>value</code>不存在 就返回 当前元素的 <code>innerHTML</code>;</li><li>确定<code>value</code> 是 <code>String</code>类型 并且 <code>rnoInnerhtml.test(value)</code> 正则匹配value中是否包含<code>&lt;script|&lt;style|&lt;link</code>这些标签等一些列判断,如果不存在就过滤等操作后 最终使用 <code>innerHTML</code> 把内容添加进去.</li><li>如果存在<code>script</code>则先清空元素,然后调用 <code>append()</code>方法;</li></ol><p>接下来 看看 <code>append()</code>方法:</p><pre class=" language-JavaScript"><code class="language-JavaScript">append: function() {    return domManip( this, arguments, function( elem ) {        if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {            var target = manipulationTarget( this, elem );            target.appendChild( elem );        }    } );}</code></pre><p><code>append()</code>方法调用<code>domManip()</code>方法,回调中的参数<code>elem</code>是经<code>domManip()</code>方法处理后的<code>fragment</code></p><p>然后看 <code>domManip()</code>方法:</p><pre class=" language-JavaScript"><code class="language-JavaScript">function domManip( collection, args, callback, ignored ) {    // Flatten any nested arrays    args = concat.apply( [], args );    var first, node, hasScripts,        scripts, doc, fragment,        i = 0,        l = collection.length,        iNoClone = l - 1,        value = args[ 0 ],        isFunction = jQuery.isFunction( value );    // We can't cloneNode fragments that contain checked, in WebKit    if ( isFunction ||            ( l > 1 && typeof value === "string" &&                !support.checkClone && rchecked.test( value ) ) ) {        return collection.each( function( index ) {            var self = collection.eq( index );            if ( isFunction ) {                args[ 0 ] = value.call( this, index, self.html() );            }            domManip( self, args, callback, ignored );        } );    }    if ( l ) {        fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );        first = fragment.firstChild;        if ( fragment.childNodes.length === 1 ) {            fragment = first;        }        // Require either new content or an interest in ignored elements to invoke the callback        if ( first || ignored ) {            scripts = jQuery.map( getAll( fragment, "script" ), disableScript );            hasScripts = scripts.length;            // Use the original fragment for the last item            // instead of the first because it can end up            // being emptied incorrectly in certain situations (#8070).            for ( ; i < l; i++ ) {                node = fragment;                if ( i !== iNoClone ) {                    node = jQuery.clone( node, true, true );                    // Keep references to cloned scripts for later restoration                    if ( hasScripts ) {                        // Support: Android<4.1, PhantomJS<2                        // push.apply(_, arraylike) throws on ancient WebKit                        jQuery.merge( scripts, getAll( node, "script" ) );                    }                }                callback.call( collection[ i ], node, i );            }            if ( hasScripts ) {                doc = scripts[ scripts.length - 1 ].ownerDocument;                // Reenable scripts                jQuery.map( scripts, restoreScript );                // Evaluate executable scripts on first document insertion                for ( i = 0; i < hasScripts; i++ ) {                    node = scripts[ i ];                    if ( rscriptType.test( node.type || "" ) &&                        !jQuery._data( node, "globalEval" ) &&                        jQuery.contains( doc, node ) ) {                        if ( node.src ) {                            // Optional AJAX dependency, but won't run scripts if not present                            if ( jQuery._evalUrl ) {                                jQuery._evalUrl( node.src );                            }                        } else {                            jQuery.globalEval(                                ( node.text || node.textContent || node.innerHTML || "" )                                    .replace( rcleanScript, "" )                            );                        }                    }                }            }            // Fix #11809: Avoid leaking memory            fragment = first = null;        }    }    return collection;}</code></pre><p>然后经过一系列的判断处理,获取所有的 <code>&lt;script&gt;</code> 节点并克隆,如果<code>&lt;script&gt;</code>节点 有src 属性说明是引用外部脚本,然后调用<code>jQuery._evalUrl()</code>方法执行引入脚本.否则调用<code>jQuery.globalEval()</code>方法执行脚本;</p><p>最后 看<code>jQuery.globalEval()</code>方法:</p><pre class=" language-JavaScript"><code class="language-JavaScript">globalEval: function( data ) {    if ( data && jQuery.trim( data ) ) {        // We use execScript on Internet Explorer        // We use an anonymous function so that context is window        // rather than jQuery in Firefox        ( window.execScript || function( data ) {            window[ "eval" ].call( window, data ); // jscs:ignore requireDotNotation        } )( data );    }}</code></pre><p>使用 window.eval()计算字符串，并执行其中的的 JavaScript 代码。</p><p>嗯 到这里就结束了,虽然很多细节没有讲清楚,但梳理了其主要执行逻辑:</p><p><strong>正则匹配<code>&lt;script&gt;</code>标签，获取JavaScript函数，然后用<code>eval()</code>函数解析并执行</strong>;</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于Google Cloud Platform搭建Shadowsocks服务</title>
      <link href="/building-shadowsocks-service-based-on-google-cloud-platform.html"/>
      <content type="html"><![CDATA[<p>之前买的SS 服务要到期了,但是不能续费,涨价了..</p><p>所以求人不如求己.决定自己搭一个,于是找到了 Google Cloud Platform 试用给300刀 用一年的消息..那就搭一个吧.</p><p>必要条件:</p><ol><li>能够访问 Google 的网络环境.(免费的vpn也很多,只是不够稳定.使用gogole cloud 必须能够访问google)</li><li>一张Visa信用卡.(据说能够使用模拟生成的数据,但是很遗憾我测试不行,因为google 要扣取$1,之后会返还.测试信用卡是否能用.)</li></ol><h4 id="Google-Cloud-Platform虚拟机部署"><a href="#Google-Cloud-Platform虚拟机部署" class="headerlink" title="Google Cloud Platform虚拟机部署"></a>Google Cloud Platform虚拟机部署</h4><h5 id="1-申请试用"><a href="#1-申请试用" class="headerlink" title="1. 申请试用"></a>1. 申请试用</h5><p>#####<a href="https://cloud.google.com/free/" target="_blank" rel="noopener">申请地址</a></p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-29/80989601.jpg" alt=""></p><p>我已经申请过了,所以跟未申请的页面略有不同.</p><p>登陆你的谷歌账户，必须使用信用卡，而且不能使用虚拟卡，招商银行、中信银行的全币种卡、浦发银行的 VISA 卡均可以通过验证。</p><p>理论上 VISA 卡均可获得通过，选择中国后绑定信用卡会填写个人信息可以如实填写信用卡账单地址，有人说要选择国外地区比较好,怕被封号,这一点我一开始也挺担心,但是还是选择了中国,使用一个月后并没有被封号,听天由命吧 😎 添加信用卡和购物网站一样，不赘述。成功后会于扣款1刀，验证卡片后会很快返还。</p><p><strong>Google Cloud Platform 现在免费赠送300刀期限是一年，也就是300刀和一年时间谁先用完就以谁为准，结束之后你不点继续使用时不会扣费的。</strong></p><h5 id="2-修改防火墙"><a href="#2-修改防火墙" class="headerlink" title="2. 修改防火墙"></a>2. 修改防火墙</h5><p>VPC网络 —&gt; 防火墙规则 —&gt; 创建防火墙 —&gt;  分别(入站/出站)</p><p>名称:随便起</p><p>目标：网络中所有的实例</p><p>来源过滤：IP地址范围，并设置为0.0.0.0/0</p><p>协议和端口：全部允许</p><h5 id="3-获取静态IP"><a href="#3-获取静态IP" class="headerlink" title="3. 获取静态IP"></a>3. 获取静态IP</h5><h5 id=""><a href="#" class="headerlink" title=""></a><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-29/34248975.jpg" alt=""></h5><p>名称随意填写,</p><p>区域的话一般选择 亚洲比较好.推荐选择台湾的机房 <code>asia-east1-c</code> ,亚洲东区东京机房<code>asia-northeast1-a</code> .</p><p>然后保留.(<strong>貌似静态 IP 只能申请一个,我也没试过申请第二个..</strong>)</p><h5 id="4-创建VM实例"><a href="#4-创建VM实例" class="headerlink" title="4. 创建VM实例"></a>4. 创建VM实例</h5><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-29/309148.jpg" alt=""></p><p>Compute —&gt; VM实例 —&gt; 创建实例</p><p>名称:随意.</p><p>地区:跟上面一样选择<code>asia-east1-c</code></p><p>机器类型: 选择微型.(最便宜的那种,否则不够用一年..)</p><p>防火墙:HTTP/HTTPS 流量都勾上.</p><p>网络:打开IP选择刚才申请的静态IP</p><p>启动磁盘:默认debian就行(也可根据自己喜好选择)</p><p>SSH密钥:可以不填,我填了,因为不喜欢用浏览器内打开的终端,感觉延迟非常严重.所以我使用本地的SSH远程连接.</p><p>Mac自带的终端可以远程连接服务器.如果是windows系统可以下载SSH工具进行连接.</p><p>Google Cloud Platform 文档:</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-29/46908704.jpg" alt=""></p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-29/48237231.jpg" alt=""></p><h4 id="升级vps内核开启BBR"><a href="#升级vps内核开启BBR" class="headerlink" title="升级vps内核开启BBR"></a>升级vps内核开启BBR</h4><p>我第一次搭建时没有开启BBR,速度不是很理想,后面查阅资料开启后速度提升很明显.</p><p>SSH连接后不是root权限，先获取root权限</p><pre class=" language-Bash"><code class="language-Bash">sudo –i</code></pre><p>更新系统</p><pre class=" language-bash"><code class="language-bash">apt updateapt upgrade</code></pre><p>查看当前内核版本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">uname</span> –r </code></pre><p>写入配置</p><pre class=" language-Bash"><code class="language-Bash">echo "net.core.default_qdisc=fq" >> /etc/sysctl.confecho "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf</code></pre><p>配置生效</p><pre class=" language-Bash"><code class="language-Bash">sysctl -p</code></pre><p>检验</p><pre class=" language-Bash"><code class="language-Bash">lsmod | grep bbr</code></pre><p>看到回显<code>tcp_bbr 20480 0</code>说明已经成功开启 BBR,不需要重新启动，我们接下来直接开始在虚拟机部署SSR</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> -N --no-check-certificate https://softs.fun/Bash/ssrmu.sh <span class="token operator">&amp;&amp;</span> <span class="token function">chmod</span> +x ssrmu.sh <span class="token operator">&amp;&amp;</span> <span class="token function">bash</span> ssrmu.sh</code></pre><p>然后执行脚本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bash</span> ssrmu.sh</code></pre><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-29/72004990.jpg" alt=""></p><p>根据选项安装就好.</p><p>至于使用就不赘述了.Mac/Windows/iphone/android 都有相应的Shadowsocks客服端.</p><p>ok..可以放心撸了.油管1080 无压力.</p>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Google Cloud </tag>
            
            <tag> Shadowsocks </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux 常用命令</title>
      <link href="/linux-common-commands.html"/>
      <content type="html"><![CDATA[<p>最近折腾 linux 学一些常用的 命令.转载一篇很实用的文章.<br>上图:<br><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-9/60070522.jpg" alt=""></p><h4 id="1-tar"><a href="#1-tar" class="headerlink" title="1.tar"></a>1.tar</h4><p>创建一个新的tar文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tar</span> cvf archive_name.tar dirname/</code></pre><p>解压tar文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tar</span> xvf archive_name.tar</code></pre><p>查看tar文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tar</span> tvf archive_name.tar</code></pre><h4 id="2-grep"><a href="#2-grep" class="headerlink" title="2.grep"></a>2.grep</h4><p>在文件中查找字符串(不区分大小写)</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -i <span class="token string">"the"</span> demo_file</code></pre><p>输出成功匹配的行，以及该行之后的三行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -A 3 -i <span class="token string">"example"</span> demo_text</code></pre><p>在一个文件夹中递归查询包含指定字符串的文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">grep</span> -r <span class="token string">"ramesh"</span> *</code></pre><h4 id="3-find"><a href="#3-find" class="headerlink" title="3.find"></a>3.find</h4><p>查找指定文件名的文件(不区分大小写)</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">find</span> -iname <span class="token string">"MyProgram.c"</span></code></pre><p>对找到的文件执行某个命令</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">find</span> -iname <span class="token string">"MyProgram.c"</span> -exec md5sum <span class="token punctuation">{</span><span class="token punctuation">}</span> \<span class="token punctuation">;</span></code></pre><p>查找home目录下的所有空文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">find</span> ~ -empty</code></pre><h4 id="4-ssh"><a href="#4-ssh" class="headerlink" title="4.ssh"></a>4.ssh</h4><p>登录到远程主机</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -l jsmith remotehost.example.com</code></pre><p>调试ssh客户端</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -v -l jsmith remotehost.example.com</code></pre><p>显示ssh客户端版本</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ssh</span> -V</code></pre><h4 id="5-sed"><a href="#5-sed" class="headerlink" title="5.sed"></a>5.sed</h4><p>当你将Dos系统中的文件复制到Unix/Linux后，这个文件每行都会以\r\n结尾，sed可以轻易将其转换为Unix格式的文件，使用\n结尾的文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sed</span> <span class="token string">'s/.$//'</span> filename</code></pre><p>反转文件内容并输出</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sed</span> -n <span class="token string">'1!G; h; p'</span> filename</code></pre><p>为非空行添加行号</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sed</span> <span class="token string">'/./='</span> thegeekstuff.txt <span class="token operator">|</span> <span class="token function">sed</span> <span class="token string">'N; s/\n/ /'</span></code></pre><h4 id="6-awk"><a href="#6-awk" class="headerlink" title="6.awk"></a>6.awk</h4><p>删除重复行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">awk</span> <span class="token string">'!(<span class="token variable">$0</span> in array) { array[<span class="token variable">$0</span>]; print}'</span> temp</code></pre><p>打印/etc/passwd中所有包含同样的uid和gid的行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">awk</span> -F <span class="token string">':'</span> <span class="token string">'<span class="token variable">$3</span>=<span class="token variable">$4</span>'</span> /etc/passwd</code></pre><p>打印文件中的指定部分的字段</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">awk</span> <span class="token string">'{print <span class="token variable">$2</span>,<span class="token variable">$5</span>;}'</span> employee.txt</code></pre><h4 id="7-vim"><a href="#7-vim" class="headerlink" title="7.vim"></a>7.vim</h4><p>打开文件并跳到第10行</p><pre class=" language-bash"><code class="language-bash">$ vim +10 filename.txt</code></pre><p>打开文件跳到第一个匹配的行</p><pre class=" language-bash"><code class="language-bash">$ vim +/search-term filename.txt</code></pre><p>以只读模式打开文件</p><pre class=" language-bash"><code class="language-bash">$ vim -R /etc/passwd</code></pre><h4 id="8-diff"><a href="#8-diff" class="headerlink" title="8. diff"></a>8. diff</h4><p>比较的时候忽略空白符</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">diff</span> -w name_list.txt name_list_new.txt</code></pre><h4 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a>9. sort</h4><p>以升序对文件内容排序</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sort</span> names.txt</code></pre><p>以降序对文件内容排序</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sort</span> -r names.txt</code></pre><p>以第三个字段对/etc/passwd的内容排序</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sort</span> -t: -k 3n /etc/passwd <span class="token operator">|</span> <span class="token function">more</span></code></pre><h4 id="10-export"><a href="#10-export" class="headerlink" title="10. export"></a>10. export</h4><p>输出跟字符串oracle匹配的环境变量</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">export</span> <span class="token operator">|</span> <span class="token function">grep</span> ORCALE<span class="token keyword">declare</span> -x ORACLE_BASE<span class="token operator">=</span><span class="token string">"/u01/app/oracle"</span><span class="token keyword">declare</span> -x ORACLE_HOME<span class="token operator">=</span><span class="token string">"/u01/app/oracle/product/10.2.0"</span><span class="token keyword">declare</span> -x ORACLE_SID<span class="token operator">=</span><span class="token string">"med"</span><span class="token keyword">declare</span> -x ORACLE_TERM<span class="token operator">=</span><span class="token string">"xterm"</span></code></pre><p>设置全局环境变量</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">export</span> ORACLE_HOME<span class="token operator">=</span>/u01/app/oracle/product/10.2.0</code></pre><h4 id="11-xargs"><a href="#11-xargs" class="headerlink" title="11. xargs"></a>11. xargs</h4><p>将所有图片文件拷贝到外部驱动器</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ls</span> *.jpg <span class="token operator">|</span> <span class="token function">xargs</span> -n1 -i <span class="token function">cp</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> /external-hard-drive/directory</code></pre><p>将系统中所有jpd文件压缩打包</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">find</span> / -name *.jpg -type f -print <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">tar</span> -cvzf images.tar.gz</code></pre><p>下载文件中列出的所有url对应的页面</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> url-list.txt <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">wget</span> –c</code></pre><h4 id="12-ls"><a href="#12-ls" class="headerlink" title="12. ls"></a>12. ls</h4><p>以易读的方式显示文件大小(显示为MB,GB…)</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ls</span> -lh -rw-r----- 1 ramesh team-dev 8.9M Jun 12 15:27 arch-linux.txt.gz</code></pre><p>以最后修改时间升序列出文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ls</span> -ltr</code></pre><p>在文件名后面显示文件类型</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ls</span> -F</code></pre><h4 id="13-pwd"><a href="#13-pwd" class="headerlink" title="13. pwd"></a>13. pwd</h4><p>输出当前工作目录</p><h4 id="14-cd"><a href="#14-cd" class="headerlink" title="14. cd"></a>14. cd</h4><p><code>cd</code> -可以在最近工作的两个目录间切换<br>使用 <code>shopt -s cdspell</code> 可以设置自动对 <code>cd</code> 命令进行拼写检查</p><h4 id="15-gzip"><a href="#15-gzip" class="headerlink" title="15. gzip"></a>15. gzip</h4><p>创建一个 *.gz 的压缩文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">gzip</span> test.txt</code></pre><p>解压 *.gz 文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">gzip</span> -d test.txt.gz</code></pre><p>显示压缩的比率</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">gzip</span> -l *.gz     compressed        uncompressed  ratio uncompressed_name          23709               97975  75.8% asp-patch-rpms.txt</code></pre><h4 id="16-bzip2"><a href="#16-bzip2" class="headerlink" title="16. bzip2"></a>16. bzip2</h4><p>创建 *.bz2 压缩文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">bzip2</span> test.txt</code></pre><p>解压 *.bz2 文件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">bzip2</span> -d test.txt.bz2</code></pre><h4 id="17-uzip"><a href="#17-uzip" class="headerlink" title="17. uzip"></a>17. uzip</h4><p>解压 *.zip 文件</p><pre class=" language-bash"><code class="language-bash">$ unzip test.zip</code></pre><p>查看 *.zip 文件的内容</p><pre class=" language-bash"><code class="language-bash">$ unzip -l jasper.zipArchive:  jasper.zipLength     Date   Time    Name--------    ----   ----    ----40995  11-30-98 23:50   META-INF/MANIFEST.MF32169  08-25-98 21:07   classes_15964  08-25-98 21:07   classes_names10542  08-25-98 21:07   classes_ncomp</code></pre><h4 id="18-shutdown"><a href="#18-shutdown" class="headerlink" title="18. shutdown"></a>18. shutdown</h4><p>关闭系统并立即关机</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">shutdown</span> -h now</code></pre><p>10分钟后关机</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">shutdown</span> -h +10</code></pre><p>重启</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">shutdown</span> -r now</code></pre><p>重启期间强制进行系统检查</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">shutdown</span> -Fr now</code></pre><h4 id="19-ftp"><a href="#19-ftp" class="headerlink" title="19. ftp"></a>19. ftp</h4><p>ftp命令和sftp命令的用法基本相似连接ftp服务器并下载多个文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ftp</span> IP/hostnameftp<span class="token operator">></span> mget *.html</code></pre><p>显示远程主机上文件列表</p><pre class=" language-bash"><code class="language-bash">ftp<span class="token operator">></span> mls *.html -/ftptest/features.html/ftptest/index.html/ftptest/othertools.html/ftptest/samplereport.html/ftptest/usage.html</code></pre><h4 id="20-crontab"><a href="#20-crontab" class="headerlink" title="20. crontab"></a>20. crontab</h4><p>查看某个用户的 <code>crontab</code> 入口</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">crontab</span> -u john -l</code></pre><p>设置一个每十分钟执行一次的计划任务</p><pre class=" language-bash"><code class="language-bash">*/10 * * * * /home/ramesh/check-disk-space</code></pre><h4 id="21-service"><a href="#21-service" class="headerlink" title="21. service"></a>21. service</h4><p>service 命令用于运行 <code>System V init</code> 脚本，这些脚本一般位于<code>/etc/init.d</code>文件下，这个命令可以直接运行这个文件夹里面的脚本，而不用加上路径</p><p>查看服务状态</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> <span class="token function">ssh</span> status</code></pre><p>查看所有服务状态</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> --status-all</code></pre><p>重启服务</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">service</span> <span class="token function">ssh</span> restart</code></pre><h4 id="22-ps"><a href="#22-ps" class="headerlink" title="22. ps"></a>22. ps</h4><p>ps命令用于显示正在运行中的进程的信息，ps命令有很多选项，这里只列出了几个</p><p>查看当前正在运行的所有进程</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">more</span></code></pre><p>以树状结构显示当前正在运行的进程，H选项表示显示进程的层次结构</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ps</span> -efH <span class="token operator">|</span> <span class="token function">more</span></code></pre><h4 id="23-free"><a href="#23-free" class="headerlink" title="23. free"></a>23. free</h4><p>这个命令用于显示系统当前内存的使用情况，包括已用内存、可用内存和交换内存的情况</p><p>默认情况下free会以字节为单位输出内存的使用量</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">free</span>             total       used       <span class="token function">free</span>     shared    buffers     cachedMem:       3566408    1580220    1986188          0     203988     902960-/+ buffers/cache:     473272    3093136Swap:      4000176          0    4000176</code></pre><p>如果你想以其他单位输出内存的使用量，需要加一个选项，-g为GB，-m为MB，-k为KB，-b为字节</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">free</span> -g             total       used       <span class="token function">free</span>     shared    buffers     cachedMem:             3          1          1          0          0          0-/+ buffers/cache:          0          2Swap:            3          0          3</code></pre><p>如果你想查看所有内存的汇总，请使用-t选项，使用这个选项会在输出中加一个汇总行</p><pre class=" language-bash"><code class="language-bash">ramesh@ramesh-laptop:~$ <span class="token function">free</span> -t             total       used       <span class="token function">free</span>     shared    buffers     cachedMem:       3566408    1592148    1974260          0     204260     912556-/+ buffers/cache:     475332    3091076Swap:      4000176          0    4000176Total:     7566584    1592148    5974436</code></pre><h4 id="24-top"><a href="#24-top" class="headerlink" title="24. top"></a>24. top</h4><p>top命令会显示当前系统中占用资源最多的一些进程（默认以CPU占用率排序）如果你想改变排序方式，可以在结果列表中点击O（大写字母O）会显示所有可用于排序的列，这个时候你就可以选择你想排序的列</p><pre class=" language-bash"><code class="language-bash">Current Sort Field:  P  <span class="token keyword">for</span> window 1:DefSelect <span class="token function">sort</span> field via field letter, <span class="token function">type</span> any other key to <span class="token keyword">return</span>  a: PID        <span class="token operator">=</span> Process Id              v: nDRT       <span class="token operator">=</span> Dirty Pages count  d: UID        <span class="token operator">=</span> User Id                 y: WCHAN      <span class="token operator">=</span> Sleeping <span class="token keyword">in</span> Function  e: USER       <span class="token operator">=</span> User Name               z: Flags      <span class="token operator">=</span> Task Flags  <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span></code></pre><p>如果只想显示某个特定用户的进程，可以使用-u选项</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">top</span> -u oracle</code></pre><h4 id="25-df"><a href="#25-df" class="headerlink" title="25. df"></a>25. df</h4><p>显示文件系统的磁盘使用情况，默认情况下df -k 将以字节为单位输出磁盘的使用量</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">df</span> -kFilesystem           1K-blocks      Used Available Use% Mounted on/dev/sda1             29530400   3233104  24797232  12% //dev/sda2            120367992  50171596  64082060  44% /home</code></pre><p>使用 -h 选项可以以更符合阅读习惯的方式显示磁盘使用量</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">df</span> -hFilesystem                  Size   Used  Avail Capacity  iused      ifree %iused  Mounted on/dev/disk0s2               232Gi   84Gi  148Gi    37% 21998562   38864868   36%   /devfs                      187Ki  187Ki    0Bi   100%      648          0  100%   /devmap -hosts                   0Bi    0Bi    0Bi   100%        0          0  100%   /netmap auto_home                0Bi    0Bi    0Bi   100%        0          0  100%   /home/dev/disk0s4               466Gi   45Gi  421Gi    10%   112774  440997174    0%   /Volumes/BOOTCAMP//app@izenesoft.cn/public  2.7Ti  1.3Ti  1.4Ti    48%        0 18446744073709551615    0%   /Volumes/public</code></pre><p>使用 -T 选项显示文件系统类型</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">df</span> -TFilesystem    Type   1K-blocks      Used Available Use% Mounted on/dev/sda1     ext4    29530400   3233120  24797216  12% //dev/sda2     ext4   120367992  50171596  64082060  44% /home</code></pre><h4 id="26-kill"><a href="#26-kill" class="headerlink" title="26. kill"></a>26. kill</h4><p><code>kill</code> 用于终止一个进程。一般我们会先用ps -ef查找某个进程得到它的进程号，然后再使用kill -9 进程号终止该进程。你还可以使用killall、pkill、xkill来终止进程</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> vimramesh    7243  7222  9 22:43 pts/2    00:00:00 vim</code></pre><pre class=" language-bash"><code class="language-bash">$ <span class="token function">kill</span> -9 7243</code></pre><h4 id="27-rm"><a href="#27-rm" class="headerlink" title="27. rm"></a>27. rm</h4><p>删除文件前先确认</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">rm</span> -i filename.txt</code></pre><p>在文件名中使用shell的元字符会非常有用。删除文件前先打印文件名并进行确认</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">rm</span> -i file*</code></pre><p>递归删除文件夹下所有文件，并删除该文件夹</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">rm</span> -r example</code></pre><h4 id="28-cp"><a href="#28-cp" class="headerlink" title="28. cp"></a>28. cp</h4><p>拷贝文件1到文件2，并保持文件的权限、属主和时间戳</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> -p file1 file2</code></pre><p>拷贝file1到file2，如果file2存在会提示是否覆盖</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cp</span> -i file1 file2</code></pre><h4 id="29-mv"><a href="#29-mv" class="headerlink" title="29. mv"></a>29. mv</h4><p>将文件名file1重命名为file2，如果file2存在则提示是否覆盖</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mv</span> -i file1 file2</code></pre><p>注意如果使用-f选项则不会进行提示</p><p><code>-v</code>会输出重命名的过程，当文件名中包含通配符时，这个选项会非常方便</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mv</span> -v file1 file2</code></pre><h4 id="30-cat"><a href="#30-cat" class="headerlink" title="30. cat"></a>30. cat</h4><p>你可以一次查看多个文件的内容，下面的命令会先打印file1的内容，然后打印file2的内容</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> file1 file2</code></pre><p>-n命令可以在每行的前面加上行号</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> -n /etc/logrotate.conf/var/log/btmp <span class="token punctuation">{</span>missingok3        monthly4        create 0660 root utmp5        rotate 16 <span class="token punctuation">}</span></code></pre><h4 id="31-mount"><a href="#31-mount" class="headerlink" title="31. mount"></a>31. mount</h4><p>如果要挂载一个文件系统，需要先创建一个目录，然后将这个文件系统挂载到这个目录上</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># mkdir /u01</span><span class="token comment" spellcheck="true"># mount /dev/sdb1 /u01</span></code></pre><p>也可以把它添加到fstab中进行自动挂载，这样任何时候系统重启的时候，文件系统都会被加载</p><pre class=" language-bash"><code class="language-bash">/dev/sdb1 /u01 ext2 defaults 0 2</code></pre><h4 id="32-chmod"><a href="#32-chmod" class="headerlink" title="32. chmod"></a>32. chmod</h4><p><code>chmod</code>用于改变文件和目录的权限</p><p>给指定文件的属主和属组所有权限(包括读、写、执行)</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> ug+rwx file.txt</code></pre><p>删除指定文件的属组的所有权限</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> g-rwx file.txt</code></pre><p>修改目录的权限，以及递归修改目录下面所有文件和子目录的权限</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chmod</span> -R ug+rwx file.txt</code></pre><h4 id="33-chown"><a href="#33-chown" class="headerlink" title="33. chown"></a>33. chown</h4><p>chown用于改变文件属主和属组</p><p>同时将某个文件的属主改为<code>oracle</code>，属组改为db</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chown</span> oracle:dba dbora.sh</code></pre><p>使用-R选项对目录和目录下的文件进行递归修改</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">chown</span> -R oracle:dba /home/oracle</code></pre><h4 id="34-passwd"><a href="#34-passwd" class="headerlink" title="34. passwd"></a>34. passwd</h4><p><code>passwd</code>用于在命令行修改密码，使用这个命令会要求你先输入旧密码，然后输入新密码</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">passwd</span></code></pre><p>超级用户可以用这个命令修改其他用户的密码，这个时候不需要输入用户的密码</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># passwd USERNAME</span></code></pre><p>passwd还可以删除某个用户的密码，这个命令只有root用户才能操作，删除密码后，这个用户不需要输入密码就可以登录到系统</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># passwd -d USERNAME</span></code></pre><h4 id="35-mkdir"><a href="#35-mkdir" class="headerlink" title="35. mkdir"></a>35. mkdir</h4><p>在<code>home</code>目录下创建一个名为temp的目录</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> ~/temp</code></pre><p>使用-p选项可以创建一个路径上所有不存在的目录</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p dir1/dir2/dir3/dir4/</code></pre><h4 id="36-ifconfig"><a href="#36-ifconfig" class="headerlink" title="36. ifconfig"></a>36. ifconfig</h4><p><code>ifconfig</code>用于查看和配置Linux系统的网络接口</p><p>查看所有网络接口及其状态</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ifconfig</span> -a</code></pre><p>使用up和down命令启动或停止某个接口</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ifconfig</span> eth0 up$ <span class="token function">ifconfig</span> eth0 down</code></pre><h4 id="37-uname"><a href="#37-uname" class="headerlink" title="37. uname"></a>37. uname</h4><p><code>uname</code>可以显示一些重要的系统信息，例如内核名称、主机名、内核版本号、处理器类型之类的信息</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">uname</span> -aLinux john-laptop 2.6.32-24-generic <span class="token comment" spellcheck="true">#41-Ubuntu SMP Thu Aug 19 01:12:52 UTC 2010 i686 GNU/Linux</span></code></pre><h4 id="38-whereis"><a href="#38-whereis" class="headerlink" title="38. whereis"></a>38. whereis</h4><p>当你不知道某个命令的位置时可以使用<code>whereis</code>命令，下面使用<code>whereis</code>查找<code>ls</code>的位置</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">whereis</span> <span class="token function">ls</span>ls: /bin/ls /usr/share/man/man1/ls.1.gz /usr/share/man/man1p/ls.1p.gz</code></pre><p>当你想查找某个可执行程序的位置，但这个程序又不在whereis的默认目录下，你可以使用-B选项，并指定目录作为这个选项的参数。下面的命令在/tmp目录下查找lsmk命令</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">whereis</span> -u -B /tmp -f lsmklsmk: /tmp/lsmk</code></pre><h4 id="39-whatis"><a href="#39-whatis" class="headerlink" title="39. whatis"></a>39. whatis</h4><p>wathis显示某个命令的描述信息</p><pre class=" language-bash"><code class="language-bash">$ whatis <span class="token function">ls</span><span class="token function">ls</span>        <span class="token punctuation">(</span>1<span class="token punctuation">)</span>  - list directory contents$ whatis <span class="token function">ifconfig</span><span class="token function">ifconfig</span> <span class="token punctuation">(</span>8<span class="token punctuation">)</span>         - configure a network interface</code></pre><h4 id="40-locate"><a href="#40-locate" class="headerlink" title="40. locate"></a>40. locate</h4><p><code>locate</code>命名可以显示某个指定文件（或一组文件）的路径，它会使用由updatedb创建的数据库</p><p>下面的命令会显示系统中所有包含crontab字符串的文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">locate</span> <span class="token function">crontab</span>/etc/anacrontab/etc/crontab/usr/bin/crontab/usr/share/doc/cron/examples/crontab2english.pl.gz/usr/share/man/man1/crontab.1.gz/usr/share/man/man5/anacrontab.5.gz/usr/share/man/man5/crontab.5.gz/usr/share/vim/vim72/syntax/crontab.vim</code></pre><h4 id="41-man"><a href="#41-man" class="headerlink" title="41. man"></a>41. man</h4><p>显示某个命令的man页面</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">man</span> <span class="token function">crontab</span></code></pre><p>有些命令可能会有多个man页面，每个man页面对应一种命令类型</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">man</span> SECTION-NUMBER commandname</code></pre><p>man页面一般可以分为8种命令类型</p><p>用户命令<br>系统调用<br>c库函数<br>设备与网络接口<br>文件格式<br>游戏与屏保<br>环境、表、宏<br>系统管理员命令和后台运行命令<br>例如，我们执行 whatis crontab，你可以看到 crontab 有两个命令类型1和5，所以我们可以通过下面的命令查看命令类型5的man页面</p><pre class=" language-bash"><code class="language-bash">$ whatis <span class="token function">crontab</span><span class="token function">crontab</span> <span class="token punctuation">(</span>1<span class="token punctuation">)</span>          - maintain <span class="token function">crontab</span> files <span class="token keyword">for</span> individual <span class="token function">users</span> <span class="token punctuation">(</span>V3<span class="token punctuation">)</span><span class="token function">crontab</span> <span class="token punctuation">(</span>5<span class="token punctuation">)</span>          - tables <span class="token keyword">for</span> driving <span class="token function">cron</span>$ <span class="token function">man</span> 5 <span class="token function">crontab</span></code></pre><h4 id="42-tail"><a href="#42-tail" class="headerlink" title="42. tail"></a>42. tail</h4><p><code>tail</code>命令默认显示文件最后的10行文本</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tail</span> filename.txt</code></pre><p>你可以使用-n选项指定要显示的行数</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tail</span> -n N filename.txt</code></pre><p>你也可以使用-f选项进行实时查看，这个命令执行后会等待，如果有新行添加到文件尾部，它会继续输出新的行，在查看日志时这个选项会非常有用。你可以通过CTRL-C终止命令的执行</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">tail</span> -f log-file</code></pre><h4 id="43-less"><a href="#43-less" class="headerlink" title="43. less"></a>43. less</h4><p>这个命名可以在不加载整个文件的前提下显示文件内容，在查看大型日志文件的时候这个命令会非常有用</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">less</span> huge-log-file.log</code></pre><p>当你用less命令打开某个文件时，下面两个按键会给你带来很多帮助，他们用于向前和向后滚屏</p><pre class=" language-bash"><code class="language-bash">CTRL+F – forward one windowCTRL+B – backward one window</code></pre><h4 id="44-su"><a href="#44-su" class="headerlink" title="44. su"></a>44. su</h4><p>su命令用于切换用户账号，超级用户使用这个命令可以切换到任何其他用户而不用输入密码</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">su</span> - USERNAME</code></pre><p>用另外一个用户名执行一个命令下面的示例中用户john使用raj用户名执行ls命令，执行完后返回john的账号</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>john@dev-server<span class="token punctuation">]</span>$ <span class="token function">su</span> - raj -c <span class="token string">'ls'</span><span class="token punctuation">[</span>john@dev-server<span class="token punctuation">]</span>$</code></pre><p>用指定用户登录，并且使用指定的shell程序，而不用默认的</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">su</span> -s <span class="token string">'SHELLNAME'</span> USERNAME</code></pre><h4 id="45-mysql"><a href="#45-mysql" class="headerlink" title="45. mysql"></a>45. mysql</h4><p>mysql可能是Linux上使用最广泛的数据库，即使你没有在你的服务器上安装mysql，你也可以使用mysql客户端连接到远程的mysql服务器</p><p>连接一个远程数据库，需要输入密码</p><pre class=" language-bash"><code class="language-bash">$ mysql -u root -p -h 192.168.1.2</code></pre><p>连接本地数据库</p><pre class=" language-bash"><code class="language-bash">$ mysql -u root -p</code></pre><p>你也可以在命令行中输入数据库密码，只需要在-p后面加上密码作为参数，可以直接写在p后面而不用加空格</p><h4 id="46-yum"><a href="#46-yum" class="headerlink" title="46. yum"></a>46. yum</h4><p>使用<code>yum</code>安装<code>apache</code></p><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> httpd</code></pre><p>更新apache</p><pre class=" language-bash"><code class="language-bash">$ yum update httpd</code></pre><p>卸载/删除apache</p><pre class=" language-bash"><code class="language-bash">$ yum remove httpd</code></pre><h4 id="47-rpm"><a href="#47-rpm" class="headerlink" title="47. rpm"></a>47. rpm</h4><p>使用rpm安装apache</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># rpm -ivh httpd-2.2.3-22.0.1.el5.i386.rpm</span>更新apache<span class="token comment" spellcheck="true"># rpm -uvh httpd-2.2.3-22.0.1.el5.i386.rpm</span>卸载/删除apache<span class="token comment" spellcheck="true"># rpm -ev httpd</span></code></pre><h4 id="48-ping"><a href="#48-ping" class="headerlink" title="48. ping"></a>48. ping</h4><p><code>ping</code>一个远程主机，只发5个数据包</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">ping</span> -c 5 gmail.com</code></pre><h4 id="49-date"><a href="#49-date" class="headerlink" title="49. date"></a>49. date</h4><p>设置系统日期</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># date -s "01/31/2010 23:59:53"</span>当你修改了系统时间，你需要同步硬件时间和系统时间<span class="token comment" spellcheck="true"># hwclock –systohc</span><span class="token comment" spellcheck="true"># hwclock --systohc –utc</span></code></pre><h4 id="50-wget"><a href="#50-wget" class="headerlink" title="50. wget"></a>50. wget</h4><p>使用wget从网上下载软件、音乐、视频</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span> http://prdownloads.sourceforge.net/sourceforge/nagios/nagios-3.2.1.tar.gz</code></pre><p>下载文件并以指定的文件名保存文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">wget</span> -O taglist.zip http://www.vim.org/scripts/download_script.php?src_id<span class="token operator">=</span>7701</code></pre><blockquote><p>本文由 王爵nice 创作<br>原文: <a href="https://blog.biezhi.me/2017/08/write-code-must-linux-command.html" target="_blank" rel="noopener">https://blog.biezhi.me/2017/08/write-code-must-linux-command.html</a></p></blockquote>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RequireJs从理论到实战</title>
      <link href="/requirejs-from-theory-to-actual-combat.html"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> requireJs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解Spring-data-jpa</title>
      <link href="/understand-springdatajpa.html"/>
      <content type="html"><![CDATA[<h5 id="什么是JPA"><a href="#什么是JPA" class="headerlink" title="什么是JPA:"></a>什么是JPA:</h5><blockquote><p>JPA(JAVA Persistence API) 是 Sun 官方提出的Java 持久化规范.  它为Java开发人员提供了一种对象关系映射工具来管理 Java应用中的关系数据.它的出现主要唉是为了简化现有的持久化开发工作和整合ORM技术.</p></blockquote><h5 id="什么是Spring-Data-JPA"><a href="#什么是Spring-Data-JPA" class="headerlink" title="什么是Spring Data JPA:"></a>什么是Spring Data JPA:</h5><blockquote><p>Spring Data JPA, part of the larger Spring Data family, makes it easy to easily implement JPA based repositories. This module deals with enhanced support for JPA based data access layers. It makes it easier to build Spring-powered applications that use data access technologies.</p><p>Spring Data JPA是Spring Data系列的一部分，可以轻松实现基于JPA的存储库。该模块处理对基于JPA的数据访问层的增强支持。这使得构建使用数据访问技术的Spring应用程序变得更加容易。<br>(SPring Data 系列还有Spring-data-jpa,Spring-data-template,Spring-data-mongodb,Spring-data-redis 等一些列包.)</p></blockquote><h5 id="Spring-Data-JPA-特性"><a href="#Spring-Data-JPA-特性" class="headerlink" title="Spring Data JPA 特性:"></a>Spring Data JPA 特性:</h5><ul><li>Sophisticated support to build repositories based on Spring and JPA</li><li>基于Spring和JPA构建存储库的完善支持</li><li>Support for Querydsl predicates and thus type-safe JPA queries</li><li>支持Querydsl谓词，从而支持类型安全的JPA查询</li><li>Transparent auditing of domain class</li><li>域类的透明审计</li><li>Pagination support, dynamic query execution, ability to integrate custom data access code</li><li>分页支持，动态查询执行，集成自定义数据访问代码的能力</li><li>Validation of @Query annotated queries at bootstrap time</li><li>@Query在引导时验证注释查询</li><li>Support for XML based entity mapping</li><li>支持基于XML的实体映射</li><li>JavaConfig based repository configuration by introducing @EnableJpaRepositories.</li><li>通过引入基于JavaConfig的存储库配置@EnableJpaRepositories</li></ul><hr><p>在我看来实际开发过程中,对于常用功能开发, Spring-Data-JPA 几乎不需要写任何一条的SQL语句就能实现.这是它非常强大的一点.</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>macOS安装Redis</title>
      <link href="/macos-install-redis.html"/>
      <content type="html"><![CDATA[<p>在Mac上安装Redis,还是用最简单的办法  brew安装.</p><p>打开终端:</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> redis</code></pre><p>安装成功后提示:</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">==</span><span class="token operator">></span> Downloading https://homebrew.bintray.com/bottles/redis-4.0.6.sierra.bottle.tar.gz<span class="token comment" spellcheck="true">######################################################################## 100.0%</span><span class="token operator">==</span><span class="token operator">></span> Pouring redis-4.0.6.sierra.bottle.tar.gz<span class="token operator">==</span><span class="token operator">></span> CaveatsTo have launchd start redis now and restart at login:  brew services start redisOr, <span class="token keyword">if</span> you don't want/need a background <span class="token function">service</span> you can just run:  redis-server /usr/local/etc/redis.conf<span class="token operator">==</span><span class="token operator">></span> Summary🍺  /usr/local/Cellar/redis/4.0.6: 13 files, 2.8MB</code></pre><p>使用<code>redis-cli -h</code> 测试是否安装成功. <code>redis-cli ping</code> 测试redis服务是否开启.</p><pre class=" language-bash"><code class="language-bash">//开启redis 服务.brew services start redis</code></pre><pre class=" language-bash"><code class="language-bash">//连接redisredis-cli</code></pre><p><a href="!http://doc.redisfans.com/">Redis 命令参考</a></p>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> macOS </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SpringBoot集成Mybatis</title>
      <link href="/springboot-integration-mybatis.html"/>
      <content type="html"><![CDATA[<p>在传统项目中使用<code>mybatis</code>需要很多配置文件,但是在springboot项目中,一切都化繁为简.</p><p>下面我们以传统xml方式和配置方式分别来配置 mybatis在springboot 中应用.</p><h3 id="创建springboot工程-在pom-xml中加入mybatis依赖"><a href="#创建springboot工程-在pom-xml中加入mybatis依赖" class="headerlink" title="创建springboot工程,在pom.xml中加入mybatis依赖;"></a>创建springboot工程,在<code>pom.xml</code>中加入<code>mybatis</code>依赖;</h3><pre class=" language-xml"><code class="language-xml"> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="在application-properties-或-yml-中添加如下配置"><a href="#在application-properties-或-yml-中添加如下配置" class="headerlink" title="在application.properties 或 yml 中添加如下配置:"></a>在<code>application.properties</code> 或 yml<code></code> 中添加如下配置:</h3><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">##数据库连接信息</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/test_db?characterEncoding=utf8&amp;useSSL=true</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span></code></pre><pre class=" language-yml"><code class="language-yml">spring:    datasource:        name: test        url: jdbc:mysql://localhost:3306/test_db?characterEncoding=utf8&useSSL=true        username: root        password: root        # 使用druid数据源        type: com.alibaba.druid.pool.DruidDataSource        driver-class-name: com.mysql.jdbc.Driver</code></pre><p>springboot 会自动加载 配置文件中的 spring.datasource.* 相关配置,把<code>datasource</code>注入到<code>sqlSessionFactory</code>中,然后把<code>sqlSessionFactory</code>注入到Mapper中.接下来就可以直接使用了.</p><h3 id="在启动类-Application-中添加注解-MapperScan"><a href="#在启动类-Application-中添加注解-MapperScan" class="headerlink" title="在启动类 Application 中添加注解 @MapperScan."></a>在启动类 Application 中添加注解 <code>@MapperScan</code>.</h3><pre class=" language-java"><code class="language-java">@SpringBootApplication<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.zhangdi.mapper"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扫描mapper下所有的类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>或者直接在每个Mapper类上面添加注解<code>@Mapper</code>;</p><h3 id="开发-Mapper"><a href="#开发-Mapper" class="headerlink" title="开发 Mapper"></a>开发 Mapper</h3><p>表字段如下:<br><code>user</code>(<code>id</code>, <code>user_name</code>, <code>password</code>, <code>nick_name</code>, <code>age</code>);</p><p>实体字段如下:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token keyword">private</span> String nickname<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//....省略getter/setter</span><span class="token punctuation">}</span></code></pre><p>基于注解方式实现增删改查</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>id <span class="token operator">=</span> <span class="token string">"userMapper"</span>            value <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"nickname"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"nick_name"</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE id = #{id}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Results</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">/**        *property 实体字段, column 数据库表字段        * 一个 @Result 表示 实体和数据库表的映射关系        * 实体字段和数据库字段不一样 需要 描述映射关系,如果一样可以省略.        */</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//jdbcType = "",javaType = ""  具体类型暂时省略 后面会说.</span>        <span class="token annotation punctuation">@Result</span><span class="token punctuation">(</span>property <span class="token operator">=</span> <span class="token string">"nickname"</span><span class="token punctuation">,</span>column <span class="token operator">=</span> <span class="token string">"nick_name"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"SELECT * FROM user WHERE id = #{username}"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResultMap</span><span class="token punctuation">(</span><span class="token string">"userMapper"</span><span class="token punctuation">)</span>    User <span class="token function">findByUsername</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO user(user_name,password,nick_name,age) VALUES(#{username},#{password},#{nickname},#{age})"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"UPDATE user SET user_name=#{username},nick_name=#{nickname},age=#{age}  WHERE id = #{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"DELETE FROM user WHERE id =#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>首先说 <code>@Result</code>,以上代码可以看出,没有给 @Results 设置id看属性需要给所有方法都添加一遍 映射关系配置,代码冗余.所以添加id 并使用<code>@ResultMap</code> 实现代码复用;</p><p>@Insert<br>@Update<br>@Delete<br>@Select</p><p>这些注解中的每一个代表了执行的真 实 SQL。 它们每一个都使用字符串数组 (或单独的字符串)。如果传递的是字符串数组, 它们由每个分隔它们的单独 空间串联起来。这就当用 Java 代码构 建 SQL 时避免了“丢失空间”的问题。</p><p>还有很多的注解项, <a href="!http://www.mybatis.org/mybatis-3/zh/java-api.html">具体请文档查阅这里</a>. </p><p>以上就完成了基于注解方式的<code>Mapper</code>,基于xml 配置文件的方式只需要 在 <code>application.yml or application.properties</code>中添加配置项:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mybatis/mapper/*.xml</span></code></pre><p>传统xml配置.就不多做赘述;<br><strong>Example:</strong></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zhangdi.mapper.UserMapper<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.zhangdi.entity.User<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">jdbcType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BIGINT<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nick_name<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>nickname<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>        id, user_name, password, nick_name, gae    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>findAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span>  <span class="token punctuation">></span></span>       SELECT        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Base_Column_List<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>       FROM users    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><h4 id="基于注解的事务管理"><a href="#基于注解的事务管理" class="headerlink" title="基于注解的事务管理"></a>基于注解的事务管理</h4><p>先简单的说一下什么是事务:</p><p>事务管理对于企业应用来说是至关重要的,即使出现异常情况,它也可以保证数据的一致性;</p><p>事务的定义:事务是指多个操作单元组成的合集,多个单元操作是整体不可分割的,要么都操作成功,要么都不成功.</p><p>其必须遵守4个原则:</p><ul><li>原子性:即事务是补课分隔的最小工作单元,事务内的操作要么全做,要么不做;</li><li>一致性:在事务执行前数据库的数据处于正确的状态,而事务执行完成后数据库的数据还是应该处于正确的状态,即数据完整性约束没有被破坏;</li><li>隔离性:并发事务执行间互不影响,在一个事务内部的操作对其他事务是不产生影响的,这需要事务隔离级别来指定隔离性;</li><li>持久性:事务一旦执行成功,它对数据库的数据的改变必须是永久的,不会因任何故障导致数据不一致性;</li></ul><p>事务的管理方式又分为两种:编程式事务管理 和 声明式事务管理;</p><p>编程式事务管理顾名思义就是在编写代码时直接手动操作事务,这样做就需要在业务逻辑代码中参杂事务管理的代码,显得很不友好;</p><p>而声明式的事务管理是基于注解/xml配置来做相关的事务声明,在spring中是建立在AOP之上的,其本质就是对方法代码进行拦截,然后在目标方法前加入一个事务,在执行完目标方法之后根据执行情况提交或者回滚事务,声明式事务的最大优点就是非侵入性的开发方式,使业务代码不受污染;</p><p>至于事务的 隔离级别 传播行为 超时 回滚规则等操作不在本文的探讨范围之内.</p><ol><li><p>首先在springboot 启动类上添加注解:<code>@EnableTransactionManagement</code> 以开启事务注解.</p><pre class=" language-java"><code class="language-java">@SpringBootApplication<span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"com.zhangdi.mapper"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//扫描mapper下所有的类</span><span class="token annotation punctuation">@EnableTransactionManagement</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Application</span><span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>     SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>Application<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>在需要开启事务的 <code>service</code>类上添加<code>@Transactional</code>注解,添加在类上后,该类下的所有方法都开启事务,但是实际上我们只有 增/删/改 需要事务管理,所以还是建议在方法上添加事务注解.</li></ol><h4 id="基于注解的动态SQL-SQL语句构建器"><a href="#基于注解的动态SQL-SQL语句构建器" class="headerlink" title="基于注解的动态SQL(SQL语句构建器)"></a>基于注解的动态SQL(SQL语句构建器)</h4><p>@InsertProvider<br>@UpdateProvider<br>@DeleteProvider<br>@SelectProvider</p><p>字面意思sql提供者..我们以<code>@SelectProvider</code>为例:</p><p>userMapper:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SelectProvider</span><span class="token punctuation">(</span>type <span class="token operator">=</span> UserMapperProvider<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"findByKeyWord"</span><span class="token punctuation">)</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">findBykeyWord</span><span class="token punctuation">(</span>String keyWord<span class="token punctuation">)</span></code></pre><p>UserMapperProvider:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperProvider</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">findByKeyWord</span><span class="token punctuation">(</span>String keyWord<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">{</span>                <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"user_name like %"</span> <span class="token operator">+</span> keyWord <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//或是直接返回 sql String</span>        <span class="token keyword">return</span> <span class="token string">"SELECT * FROM user WHERE user_name like %"</span> <span class="token operator">+</span> keyWord <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//又或者</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"user_name like %"</span> <span class="token operator">+</span> keyWord <span class="token operator">+</span> <span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*这样拼接sql又显得非常丑陋. * *方式灵活多变 可采用如下任意方式,优雅的构建动态sql * */</span><span class="token keyword">public</span> String <span class="token function">deletePersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token function">DELETE_FROM</span><span class="token punctuation">(</span><span class="token string">"PERSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"ID = #{id}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">insertPersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  String sql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">INSERT_INTO</span><span class="token punctuation">(</span><span class="token string">"PERSON"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">"ID, FIRST_NAME"</span><span class="token punctuation">,</span> <span class="token string">"#{id}, #{firstName}"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">"LAST_NAME"</span><span class="token punctuation">,</span> <span class="token string">"#{lastName}"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> sql<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">selectPersonLike</span><span class="token punctuation">(</span><span class="token keyword">final</span> String id<span class="token punctuation">,</span> <span class="token keyword">final</span> String firstName<span class="token punctuation">,</span> <span class="token keyword">final</span> String lastName<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token function">SELECT</span><span class="token punctuation">(</span><span class="token string">"P.ID, P.USERNAME, P.PASSWORD, P.FIRST_NAME, P.LAST_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">FROM</span><span class="token punctuation">(</span><span class="token string">"PERSON P"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"P.ID like #{id}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>firstName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"P.FIRST_NAME like #{firstName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastName <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"P.LAST_NAME like #{lastName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">ORDER_BY</span><span class="token punctuation">(</span><span class="token string">"P.LAST_NAME"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">deletePersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token function">DELETE_FROM</span><span class="token punctuation">(</span><span class="token string">"PERSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"ID = #{id}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">insertPersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token function">INSERT_INTO</span><span class="token punctuation">(</span><span class="token string">"PERSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">"ID, FIRST_NAME"</span><span class="token punctuation">,</span> <span class="token string">"#{id}, #{firstName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">VALUES</span><span class="token punctuation">(</span><span class="token string">"LAST_NAME"</span><span class="token punctuation">,</span> <span class="token string">"#{lastName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">updatePersonSql</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>    <span class="token function">UPDATE</span><span class="token punctuation">(</span><span class="token string">"PERSON"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">SET</span><span class="token punctuation">(</span><span class="token string">"FIRST_NAME = #{firstName}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">WHERE</span><span class="token punctuation">(</span><span class="token string">"ID = #{id}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><a href="!http://www.mybatis.org/mybatis-3/zh/statement-builders.html">文档参考</a></p><p>…end</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Spring-boot </tag>
            
            <tag> myBatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解React高阶组件</title>
      <link href="/understand-react-highlevel-components.html"/>
      <content type="html"><![CDATA[<p>当我看到高阶组件(Higher-Order Components) 这个词时,这个牛逼闪闪的名词吧我镇住了,听了几位大师的讲解之后霍然开朗,这个牛逼闪闪的名词背后其实也是很简单的.</p><h3 id="什么是-高阶组件"><a href="#什么是-高阶组件" class="headerlink" title="什么是 高阶组件"></a>什么是 <strong>高阶组件</strong></h3><blockquote><p>高阶组件就是一个函数,能够接受一个组件并返回一个新的组件;</p></blockquote><p>在React中高阶组件是重用组件逻辑的一项高级技术.高阶组件并不是React API 的一部分,其源自 React 生态. </p><p>组件是将props转化成UI，然而高阶组件将一个组价转化成另外一个组件。</p><p>下面我们来拆解这个词, 高阶组件 可以理解为 <code>高级的</code> <code>组件</code>.</p><p>先来说说什么是组件:React中定义,组件使你可以将UI划分为一个个的 独立的 可复用的 小部件,并可以对每个部件进行单独的设计.从定义上来说,组件就像是<code>JavaScript</code>的函数,组件可以接受任意输入(props),并返回React元素.</p><p>组件可以是 函数形式,也可以是类形式,但是我们又知道 <code>JavaScript</code>的 类(Class)可以看做是 一个语法糖,它的类写法只是让对象原型的写法更清晰,更像面向对象编程的语法而已,说到底 它还是<code>Function</code>;</p><p>以上,我们得出 <code>组件 == 函数</code> 故: <code>高阶组件 == 高阶函数</code>;</p><p>接下来 看一个函数:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye'</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>上面两个函数 按照代码复用的原则可以这么改造:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">sayBye</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye'</span> <span class="token operator">+</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">higherFn</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> newFn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token keyword">var</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fn</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newFn<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从这个例子不难看出,我们做到了代码复用,符合高阶组件的定义<strong>接受一个函数,并返回一个新的函数</strong>,上面我们说了 组件也就是一个函数,那我们把上面的例子转化为 React 的组件 再来看看;</p><p>SayHello原始组件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SayHello</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            user<span class="token punctuation">:</span><span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            user<span class="token punctuation">:</span>user        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>hello <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>SayBye原始组件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">SayBye</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>            user<span class="token punctuation">:</span><span class="token string">''</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>            user<span class="token punctuation">:</span>user        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Bye<span class="token operator">!</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>高阶组件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">export</span> <span class="token keyword">default</span> higherComponent <span class="token operator">=</span> <span class="token punctuation">(</span>InnerComponent<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">class</span> <span class="token class-name">NewComponent</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">{</span>                user<span class="token punctuation">:</span><span class="token string">''</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">componentWillMount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> user <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                user<span class="token punctuation">:</span>user            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token operator">&lt;</span>InnerComponent usr<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token operator">></span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> NewComponent<span class="token punctuation">}</span></code></pre><p>改造后的 SayHello,SayBye 组件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> higherComponent <span class="token keyword">from</span> <span class="token string">'higherComponent'</span><span class="token keyword">class</span> <span class="token class-name">SayHello</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>hello<span class="token operator">!</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//把组件传入 高阶组件 返回一个新的组件.</span>SayHello <span class="token operator">=</span> <span class="token function">higherComponent</span><span class="token punctuation">(</span>SayHello<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> SayHello</code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token keyword">import</span> higherComponent <span class="token keyword">from</span> <span class="token string">'higherComponent'</span><span class="token keyword">class</span> <span class="token class-name">SayBye</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span><span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">&lt;</span>div<span class="token operator">></span>Bye<span class="token operator">!</span> <span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>user<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//把组件传入 高阶组件 返回一个新的组件.</span>SayBye <span class="token operator">=</span> <span class="token function">higherComponent</span><span class="token punctuation">(</span>SayBye<span class="token punctuation">)</span><span class="token keyword">export</span> <span class="token keyword">default</span> SayBye</code></pre><p>接着就引生出 <code>react-redux</code>的<code>connect</code>函数:</p><pre class=" language-JavaScript"><code class="language-JavaScript">export default connect(mapStateToProps, mapDispatchToProps)(Component)</code></pre><pre class=" language-JavaScript"><code class="language-JavaScript">// connect是一个返回函数的函数（就是个高阶函数）const enhance = connect(mapStateToProps, mapDispatchToProps);// 返回的函数就是一个高阶组件，该高阶组件返回一个与Redux store// 关联起来的新组件const ConnectedComment = enhance(Component);</code></pre><p>注意看<code>mapStateToProps</code> <code>mapDispatchToProps</code>,这两个名字已经明确了他们的含义:<br>把<code>redux</code>的<code>state</code>和<code>action</code>创建函数，通过<code>props</code>注入给了<code>Component</code>。</p><p>到这里，高阶组件就讲完了。再返回去理解下定义，是不是豁然开朗~</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何写一个jQuery插件</title>
      <link href="/how-to-write-a-jquery-plugin.html"/>
      <content type="html"><![CDATA[<p>现在前端技术日新月异,Angular React Vue 三剑客是当前前端技术栈中最火热的框架.但是目前我们公司的技术栈还停留在 jQuery 打天下的段位,不过不得不说 jQuery 是一个非常非常非常非常非常(省略无数个)牛逼的 js库…</p><p>在一段时间的工作中发现,后端同学非常的依赖jQuery,但是在使用jQuery时会犯很多错误,如变量/function直接写在全局作用域下,为了所谓的代码复用,简单的抽出一些公共的部分写成一个全局的 <code>function</code>,做后每个人都写一套自己抽出的函数,造成页面引入大量名字不同但作用一样的所谓的工具类.然后就出现各种各样奇葩的 Bug..</p><p>为了解决这些问题,下面就来说说 如何写一个jQuery 插件吧;</p><p>首先要知道jQuery 最牛逼的地方就在于它的扩展性.扩展一个jQuery插件的方式有以下三种:</p><ol><li>通过$.extend()来扩展jQuery</li><li>通过$.fn 向jQuery添加新的方法</li><li>通过$.widget()应用jQuery UI的部件工厂方式创建(能力有限我暂时还没使用过这种方式:(</li></ol><h3 id="第一种-extend"><a href="#第一种-extend" class="headerlink" title="第一种:$.extend()"></a>第一种:$.extend()</h3><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    sayHello<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span> <span class="token operator">+</span> name <span class="token operator">||</span> <span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>$<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//hello world!</span>$<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">'zhangsan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//hello zhangsan</span></code></pre><p>这种方式详单与直接在$上添加一个 <code>sayHello</code>的属性来扩展<code>jQuery</code>,相当于添加一个静态方法,这样做就完全不能使用<code>jQuery</code>强大的选择器..如果只是想添加静态方法这种方法是没有问题的.</p><h3 id="第二种-通过-fn-向jQuery添加新的方法"><a href="#第二种-通过-fn-向jQuery添加新的方法" class="headerlink" title="第二种:通过$.fn 向jQuery添加新的方法"></a>第二种:通过$.fn 向jQuery添加新的方法</h3><p>这种方法也是最常用的;</p><p>首先有人会问 <code>$.fn</code> 是什么?</p><p>使用过 <code>jQuery</code>的同学都应该知道 <code>$ === jQuery</code>,<code>$([selector])</code> 和 <code>jQuery([selector])</code>完全一样.</p><p>阅读<code>jQuery</code>源码会发现. </p><pre class=" language-javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//其中 jQuery == $ so:</span>jQuery<span class="token punctuation">.</span>fn <span class="token operator">==</span> $<span class="token punctuation">.</span>fn <span class="token operator">==</span> $<span class="token punctuation">.</span>prototype</code></pre><p>然后我们来看一下它的基本格式:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">,</span>window<span class="token punctuation">,</span>document<span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>pluginName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> defaulats <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> opts <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>defaults<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//fn..</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">,</span>window<span class="token punctuation">,</span>document<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用插件</span><span class="token function">$</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pluginName</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>下面我们来解释为什么这么写.</p><ol><li><code>;</code> 可以避免在执行我们写的代码前引用了他人写的代码最后没写<code>;</code>造成错误.</li><li>一个自调用的<code>function</code>,接收4个参数 <code>$</code>,<code>window</code>,<code>document</code>,<code>undefined</code> 底部传入 3个参数:<code>jQuery</code>,<code>window</code>,<code>document</code><ol><li>首先解释为什么传入3个参数却要接受4个参数,多了个 <code>undefined</code>,它是js预定义的一个全局变量，他的值就是’undefined’。在ES3中，有一个bug,<code>undefined</code> 是一个可读可写的变量,可以给他赋任意值,但到了ES5就被修复了,他是一个只读的值,所以虽然没有报错,但是赋值语句是没有效果的.这么做的目的就是为了避免<code>undefined</code>不是我们想要的<code>undefined</code>;</li><li>同样 传入 <code>jQuery</code>,<code>window</code>,<code>document</code> 也是防止 这些变量被改写或被污染;</li><li>自调用函数,是为了避免污染全局作用域;这样我们不管有多少个插件 他们内部的 变量都是在内部使用 不会影响其他插件的使用;</li></ol></li><li><code>$.fn.pluginName = function(){}</code> 中 <code>pluginName</code>就是我们的插件的名称;就是把我们的插件挂载在jquery的原型链上,这样我们就可以使用jQuery的一切方法.</li><li><code>options</code>参数 和 <code>defauls</code> 是为了方便的自定义插件的参数,通过 使用 <code>$.extend()</code>方法来合并 我们调用插件时传入的参数和插件的默认参数,同时返回一个新的<code>opts</code> 这样做不会覆盖掉传入的 参数对象 和 默认参数对象.</li></ol><p>然后我们来写一个简单的插件:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">,</span>window<span class="token punctuation">,</span>document<span class="token punctuation">,</span>undefined<span class="token punctuation">)</span><span class="token punctuation">{</span>    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>myPlugin <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> defaults <span class="token operator">=</span> <span class="token punctuation">{</span>            color<span class="token punctuation">:</span><span class="token string">'red'</span><span class="token punctuation">,</span>            fontSize<span class="token punctuation">:</span><span class="token string">'20px'</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> opts <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>defaults<span class="token punctuation">,</span>options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//这里的 this 就是jQuery选择器选中的元素集合.</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这里的this 是遍历后 当前元素 this</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//或</span>            <span class="token comment" spellcheck="true">/*$(this).css({                color:opts.color,                fontSize:opts.fontSize            });*/</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">,</span>window<span class="token punctuation">,</span>document<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调用插件</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">myPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    color<span class="token punctuation">:</span><span class="token string">'blue'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这样我们就把页面上所有的 <code>p</code> 元素 颜色设置为蓝色,字号设置为20px;如果不传入任何参数就把所有<code>p</code>元素颜色设置为红色字号20px;</p><p> 代码中 <code>return</code> 返回当前选择器的 this 对象, 是为了能够链式调用 .</p><pre class=" language-JavaScript"><code class="language-JavaScript">$('p').myPlugin().css('border','1px solid #ccc');</code></pre><p>效果如下:</p><p> <img src="http://oox9lo3vp.bkt.clouddn.com/17-12-2/19534312.jpg" alt="效果"></p><p>或者使用构造函数的写法:</p><pre class=" language-JavaScript"><code class="language-JavaScript">;(function($,window,document,undefined){    //定义构造函数.    var MyPlugin = function(ele, opts) {        this.$element = ele,        this.defaults = {            color: 'red',            fontSize: '20px',            textDecoration: 'none'        },        this.options = $.extend({}, this.defaults, opts)    }    //定义方法    MyPlugin.prototype = {        beautify: function() {            return this.$element.css({                color: this.options.color,                fontSize: this.options.fontSize,                textDecoration: this.options.textDecoration            });        }    }    $.fn.myPlugin = function(options) {        //创建插件实例        var myPlugin = new MyPlugin(this, options);        //调用其方法        return myPlugin.beautify();    }})(jQuery,window,document);//使用方法和之前的一样.</code></pre>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解像素和DPR</title>
      <link href="/understanding-pixels-and-dpr.html"/>
      <content type="html"><![CDATA[<p>首先把问题提出来:在Web开发中最常用的就是单位就是像素(px),PC/Mobile 等设备也都有像素,分辨率,PPI等一大堆的概念,实际开发中总是会有疑惑,这些概念到底是什么意思,它们之间的关系?下面来做一个总结;</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>理解浏览器对象模型--BOM</title>
      <link href="/understanding-the-browser-object-modelbom.html"/>
      <content type="html"><![CDATA[<blockquote><p>ECMAScript是JavaScript的核心,但是在Web(浏览器环境)中使用JavaScript,BOM(浏览器对象模型)是真正的核心.</p></blockquote><p>W3C为了把浏览器中的JavaScript最基本的部分标准化,已经将BOM的主要方面纳入HTML5的规范中.</p><h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><blockquote><p>BOM的核心对象是 <code>window</code>,它表示浏览器的一个实例;在浏览器中,<code>window</code>对象有双重角色,它既是通过JavaScript访问浏览器窗口的一个接口,又是ECMAScript规定的 <code>Global</code>对象.这意味着网页上定义的任何一个对象\变量\函数,都以 <code>window</code> 对象作为其 <code>Global</code> 对象.因此在全局作用域中声明的变量函数都会变成<code>window</code>对象的属性和方法.</p></blockquote><pre class=" language-JavaScript"><code class="language-JavaScript">var name = 'zhangsan';function sayName(){    alert(this.name);}alert(name);            //zhangsanalert(window.name);     //zhangsanwindow.sayName();       //zhangsan</code></pre><p>虽然定义全局变量最终都会成为<code>window</code>对象的属性,但是全局变量和直接定义在<code>window</code>对象下的属性还是有些差别的:<em>全局变量不能通过 <code>delete</code>操作符来删除;</em><br>使用<code>var</code> 关键字创建的变量有一个 <code>configurable</code>属性,值为<code>false</code>,因此不能通过<code>delete</code>操作符来删除;</p><p><strong>小技巧:</strong><br>当你尝试访问 一个未声明的变量时,会抛出一个错误,但是通过查询<code>window</code>对象可以知道某个可能未声明的变量是否存在;</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arg1 <span class="token operator">=</span> arg2<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//arg2 未声明 会抛出一个错误</span><span class="token keyword">var</span> arg1 <span class="token operator">=</span> window<span class="token punctuation">.</span>arg2<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// arg1 == undefined</span></code></pre><h3 id="窗口关系及框架"><a href="#窗口关系及框架" class="headerlink" title="窗口关系及框架"></a>窗口关系及框架</h3><blockquote><p>如果页面中包含框架,则每个框架都拥有自己的<code>window</code>对象,并且保存在<code>frames</code>集合中;在<code>frames</code>集合中,可以通过数值索引,或者框架名称来访问相应的<code>window</code>对象.每个框架都有一个<code>name</code>属性,其中包含框架的名称;</p></blockquote><p>在一个框架集(多层frame嵌套)中,可以使用<code>top.frames[index]</code>来获取框架对象.其中<code>top</code>始终指向最外层的框架,也就是浏览器的窗口的<code>window</code>对象,使用<code>top</code>对象可以确保在一个框架中正确的访问另一个框架,因为对于在一个框架中编写的任何代码来说,其中的<code>window</code>对象指向的都是哪个框架的特定实例(当前框架的实例),而非最外层(最高层)的框架;</p><p>除了<code>top</code>之外还有另一个<code>window</code>对象<code>parent</code>;顾名思义,<code>parent</code>对象始终指向当前框架的直接上层框架;</p><h3 id="导航和打开窗口"><a href="#导航和打开窗口" class="headerlink" title="导航和打开窗口"></a>导航和打开窗口</h3><p>使用<code>window.open()</code>方法可以导航到特定的URL,也可以打开一个新的浏览器窗口.</p><p>这个方法可以接受4个参数,[要加载的URL],[窗口目标],[特性字符串],[新页面是否取代浏览器历史纪录中当前加载页面的布尔值],通常只须传递第一个参数,最后一个参数只在不打开新窗口的情况下使用;</p><p>如果为<code>window.open()</code>传递第二个参数,而且改参数是已有窗口或框架的名称,那么就会在具有该名称的窗口或框架中加载第一个参数指定的URL.</p><pre class=" language-javascript"><code class="language-javascript">window<span class="token punctuation">,</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'frameName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>等同于</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>frameName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>如果有一个名叫 <code>frameName</code> 的窗口或者框架,就会在改窗口或者框架加载这个URL,否则就会新建一个新窗口并将其命名为<code>frameName</code>;此外,第二个蚕食也可以是一个特殊的窗口名称:<code>_self</code> , <code>_parent</code> , <code>_top</code> , <code>_blank</code></p><p>如果第二个参数不是一个已经存在的窗口或框架,那么改gai方法就会根据第三个参数的字符串创建一个新的窗口或者标签页,如果没传入第三个参数则使用默认值创建;第三个参数是一个逗号分隔的设置字符串,标识新窗口中都显示哪些特性.</p><table><thead><tr><th>设置</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>fullscreen</td><td>yes/no</td><td>浏览器窗口是否最大化(仅IE浏览器)</td></tr><tr><td>height</td><td>数值</td><td>新窗口的高度,不能小于100</td></tr><tr><td>width</td><td>数值</td><td>新窗口的宽度,不能小于100</td></tr><tr><td>left</td><td>数值</td><td>新窗口的左坐标,不能是负值</td></tr><tr><td>left</td><td>数值</td><td>新窗口的上坐标,不能是负值</td></tr><tr><td>location</td><td>yes/no</td><td>是否在浏览器窗口中显示地址栏.不同的浏览器的额默认值不同,如果设置为no,地址栏可能会隐藏,也可能被禁用.</td></tr><tr><td>menubar</td><td>yes/no</td><td>是否在浏览器窗口中显示菜单栏.默认no</td></tr><tr><td>toolbar</td><td>yes/no</td><td>是否在浏览器窗口中显示工具栏,默认no</td></tr><tr><td>status</td><td>yes/no</td><td>是否在浏览器窗口中显示状态栏,默认no</td></tr><tr><td>resizable</td><td>yes/no</td><td>是否可以通过拖动浏览器窗口的边框改变其大小.默认no</td></tr><tr><td>scrollbars</td><td>yes/no</td><td>如果内容在视口中显示不下,是否允许滚动.默认no</td></tr></tbody></table><p><code>window.open()</code>方法会返回一个指向新窗口的引用.引用的对象与其他<code>window</code>对象大致相似,但我们可以对其进行跟多的控制.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> openWin <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'http://baidu.com'</span><span class="token punctuation">,</span><span class="token string">'baiduWindow'</span><span class="token punctuation">,</span><span class="token string">'height=400,width=400,top=100,ledt=100'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调整大小为800*800</span>openWin<span class="token punctuation">.</span><span class="token function">resizeTo</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//调整位置</span>openWin<span class="token punctuation">.</span><span class="token function">moveTo</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭</span>openWin<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="间歇调用和超时调用"><a href="#间歇调用和超时调用" class="headerlink" title="间歇调用和超时调用"></a>间歇调用和超时调用</h3><p>JavaScript 是单线程语言,但它允许通过设置超时值和简写时间的值来调度代码在特定的时刻执行.超时调用是在指定的时间过后执行代码,间歇调用是每隔指定时间就执行一次代码;</p><p>JavaScript单线程的特性决定了,JavaScript在一定时间内只能执行一段代码.为了控制要执行的代码,就有一个JavaScript任务队列,这些任务将那招将他们添加到队列的顺序执行.</p><p><code>setTimeout()</code> 的第二个参数的含义是,告诉JavaScript再过多长时间把当前任务添加到执行队列中.如果队列是空的则添加的代码会立即执行,如果不为空,那添加的代码就到等到之前的代码执行完成后再执行.</p><p>调用<code>setTimeout()</code>后,改方法会返回一个数值ID,这个ID是计划执行代码的唯一标识符.可以通过它来取消超时调用.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//设置超时调用</span><span class="token keyword">var</span> timeoutId <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//取消超时调用</span><span class="token function">clearTimeout</span><span class="token punctuation">(</span>timeoutId<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>间歇调用与超时调用类似.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//设置间歇调用</span><span class="token keyword">var</span> intervalId <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> random <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> random <span class="token operator">></span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//取消间歇调用</span>        <span class="token function">clearInterval</span><span class="token punctuation">(</span>intervalId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>一般认为 使用超时调用<code>setTimeout()</code>模拟实现间歇调用<code>setInterval()</code>是最佳模式,因为<code>setInterval()</code> <font color="red"><strong>最后一个间歇调用可能会在前一个间歇调用结束之前启动.</strong> </font></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>max <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">incrementNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果执行次数未达到最大执行次数,则设置另一次超时调用</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> max<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span>incrementNumber<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">'done!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">setTimeout</span><span class="token punctuation">(</span>incrementNumber<span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h3><p>浏览器通过<code>alert()</code> <code>confirm()</code> <code>prompt()</code>方法可以调用系统对话框向用户显示消息.系统对话框与浏览器中显示的网页没有关系,也不包含HTML.他们的外观有操作系统或浏览器设置决定,通过这几个方法打开的对话框都是同步和模态的,也就是说,显示这些对话框的时候代码会停止执行.而关掉这些对话框后代码又会恢复执行;<br>此外还有:显示打印对话框 <code>window.print()</code>,显示查找对话框:<code>window.find()</code>;</p><h3 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h3><p><code>location</code>是最有用的BOM对象之一,它提供了与当前窗口中加载的文档有关信息,还提供了一些导航功能.同时<code>location</code>也是一个特别的对象,因为它既是<code>window</code>对象的属性,也是<code>document</code>对象的属性.<code>window.location</code>和<code>document.location</code>引用的是同一个对象;<code>location</code>对象不仅保存着当前文档的信息,还将URL解析为独立的片段,让开发人员可以通过不同的属性访问这些片段;</p><p>如: http:/ /<a href="http://www.zhangdi.site:8080/article/list?page=1#contents" target="_blank" rel="noopener">www.zhangdi.site:8080/article/list?page=1#contents</a></p><table><thead><tr><th>属性名</th><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>hash</td><td>“#content”</td><td>返回URL中的hash(#后跟零个或多个字符),如果URL中不包含散列,则返回空字符串.</td></tr><tr><td>host</td><td>“<a href="http://www.zhangdi.site:8080&quot;" target="_blank" rel="noopener">www.zhangdi.site:8080&quot;</a></td><td>返回服务器名称和端口号</td></tr><tr><td>hostname</td><td>“<a href="http://www.zhangdi.site&quot;" target="_blank" rel="noopener">www.zhangdi.site&quot;</a></td><td>返回不带端口号的服务器名称</td></tr><tr><td>href</td><td>“http:/ /<a href="http://www.zhangdi.site&quot;" target="_blank" rel="noopener">www.zhangdi.site&quot;</a></td><td>返回当前加载页面的完成URL,而<code>location</code>对象的<code>toString()</code>方法也返回这个值.</td></tr><tr><td>pathname</td><td>“/article/list”</td><td>返回URL中的目录或文件名</td></tr><tr><td>port</td><td>“8080”</td><td>返回URL中指定的端口号,如果URL中不包含端口号,则这个属性返回空字符串.</td></tr><tr><td>protocol</td><td>“http:”</td><td>返回页面使用的协议.</td></tr><tr><td>search</td><td>“?page=1”</td><td>返回URL的查询字符串,这个字符串一问好开头.</td></tr></tbody></table><p>虽然通过上面的属性可以访问到<code>location</code>对象的大多数对象,但是其中访问URL包含的查询字符串的属性并不方便.尽管 <code>location.search</code>返回从问号到URL末尾的所有内容,但却没有办法逐个访问其中的每个查询字符串参数,为此可以创建一个函数,用以解析查询字符串,然后返回包含所有参数的一个对象:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> getQueryStringArgs <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token punctuation">(</span>location<span class="token punctuation">.</span>search<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> location<span class="token punctuation">.</span>search<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    items <span class="token operator">=</span> qs<span class="token punctuation">.</span>length <span class="token operator">?</span> qs<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>value <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        item <span class="token operator">=</span> item<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        value <span class="token operator">=</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span>lenth<span class="token punctuation">)</span><span class="token punctuation">{</span>            args<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> args<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>还可以通过<code>location</code>对象改变浏览器位置:</p><ol><li><code>location.assign(&#39;http://baidu.com&#39;);</code></li><li><code>window.location = &#39;http://baicu.com&#39;;</code></li><li><code>location.href = &#39;http://baidu.com&#39;</code></li></ol><p>通过修改<code>location</code>的属性(hash除外),页面都会以新URL重新加载,并且浏览器的历史纪录中就会生成一条新纪录,因此用户通过单击”后退”按钮都会导航到前一个页面.要禁用这种行为,了一使用<code>replace()</code>方法.这个方法只接受一个参数,即要导航到的URL;结果虽然会导致浏览器位置改变,但不会在历史纪录中生成新纪录,在调用<code>replace()</code>方法后,用户不能回到前一个页面;</p><h3 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h3><p><code>history</code>对象保存用户上网的历史纪录,从窗口被打开的那一刻算起;因为<code>history</code>是<code>window</code>对象的属性,因此每个浏览器窗口,每个标签页,每个框架都有自己的<code>history</code>对象与特定的<code>window</code>对象关联;</p><p>使用 <code>history</code>的 <code>go()</code>方法可以在用户的历史纪录中任意跳转;</p><p>另外还可以用 <code>back()</code>和<code>forward()</code> 方法来替代<code>go()</code>;</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>浏览器对象模型(BOM)以<code>window</code>对象为依托,表示浏览器窗口以及页面可见区域,同时<code>window</code>对象还是ECMAScript中的 <code>Global</code>对象.因而所有全局变量和函数都是它的属性,且所有原生的构造函数以及其他函数也都存在与它的命名空间下;</p><p>除了上面列出的 BOM 组成部分外,还有 <code>navigator</code>对象,它提供了与浏览器有关的信息,到底提供哪些信息,很大程度上取决于用户的浏览器;</p><p>还有 <code>screen</code> 但它功能有限,<code>screen</code>对象中保存着与客户端显示器有关的信息,这些信息一般只用于站点分析.</p></blockquote>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>React+Node.js全栈开发(一)</title>
      <link href="/.html"/>
      <content type="html"><![CDATA[<h4 id="技术栈-React-Redux-React-Router-Antd-mobile-Webpack-NodeJs-Express-MongoDB"><a href="#技术栈-React-Redux-React-Router-Antd-mobile-Webpack-NodeJs-Express-MongoDB" class="headerlink" title="技术栈: React Redux React-Router Antd-mobile Webpack NodeJs Express MongoDB"></a>技术栈: React Redux React-Router Antd-mobile Webpack NodeJs Express MongoDB</h4><p>开发前准备:</p><p>nodeJS MongoDB create-react-app的安装就不赘述了.</p><p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ES6语法参考 &lt;&lt;阮一峰-ECMAScript 6 入门&gt;&gt;</a></p><h3 id="正式开始"><a href="#正式开始" class="headerlink" title="正式开始:"></a>正式开始:</h3><ol><li><p>使用create-react-app 搭建 react全家桶(react redux router webpack antd-mobile …) <a href="!http://zhangdi.site/2017/11/02/%E5%9F%BA%E4%BA%8Ecreate-react-app%E6%9E%84%E5%BB%BAReact%E5%85%A8%E5%AE%B6%E6%A1%B6/">过程&gt;&gt;</a></p><p> <img src="http://oox9lo3vp.bkt.clouddn.com/17-11-27/16476351.jpg" alt="项目结构"></p><p> <img src="http://oox9lo3vp.bkt.clouddn.com/17-11-27/36406085.jpg" alt="默认package.json"></p><p> 终端执行<code>npm run eject</code></p><p> <strong>(如果项目使用git)执行这里可能会遇到一个错误</strong></p><p> <img src="http://oox9lo3vp.bkt.clouddn.com/17-11-27/43474637.jpg" alt="run eject 错误"></p><p> 解决办法是:在<code>.gitignore</code>文件中添加<code>/.idea</code>过滤项.然后重新<code>commit</code> and <code>push</code>;我认为原因是弹出配置这个操作是不可逆的,所以fb的工程师很人性化的去检查了<code>git</code>是否有未提交的内容,如果只是像看看配置项,或者不想弹出配置项了,还可以从<code>git</code>上恢复.<code>.idea</code>是<code>webstorm</code>生成的编辑器配置文件,应该是随时变化的,所以把<code>.idea</code>过滤掉就可以了.</p><p> <img src="http://oox9lo3vp.bkt.clouddn.com/17-11-27/8862925.jpg" alt="弹出配置后文件目录"></p></li><li><p>安装各种插件</p></li></ol><pre class=" language-bash"><code class="language-bash">yarn add redux react-redux react-router-dom antd-mobile babel-plugin-import babel-plugin-transform-decorators-legacy axiosyarn add express mongoose --dev</code></pre><ol><li>配置及前后台联调.</li></ol><p>接下来在<code>package.json</code>中配置 <code>plugins</code>部分.其中第一项为<code>antd-mobile</code>的按需加载,第二项为<code>transform-decorators-legacy</code>插件,使<code>babel</code>支持装饰器写法.</p><pre class=" language-json"><code class="language-json"><span class="token property">"babel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"react-app"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"plugins"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">[</span>        <span class="token string">"import"</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span>          <span class="token property">"libraryName"</span><span class="token operator">:</span> <span class="token string">"antd-mobile"</span><span class="token punctuation">,</span>          <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"css"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"transform-decorators-legacy"</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>然后配置server,在项目根路径下新建 <code>server</code>文件夹,用于存放后端server的内容.<code>src</code>下是前台内容.</p><p>关于<code>express</code> <a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">官方文档</a>有详细介绍.</p><p>在<code>server</code>下新建<code>server.js</code>:</p><pre class=" language-JavaScript"><code class="language-JavaScript">const express = require('express');const app = express();//监听8080端口启动serverconst server = app.listen('8080',function(){    let host = server.address().address,        port = server.address().port;    //启动成功后在控制台打印.    console.log('Express app listening at http://%s:%s',host,port);})</code></pre><p>在 <code>package.json</code>添加<code>proxy</code>配置项. 表示把请求转发到<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a>.</p><pre class=" language-json"><code class="language-json"> <span class="token property">"proxy"</span><span class="token operator">:</span><span class="token string">"http://localhost:8080"</span></code></pre><p>ok,到这一步就基本完成了前后台的配置.接下来进行测试:</p><p>启动<code>server.js</code>,这里推荐 <code>nodemon</code>  自动重启的工具,使用 <code>nodemon</code>来启动<code>server.js</code>;</p><pre class=" language-"><code class="language-">nodemon server/server.js </code></pre><p>同时启动 react</p><pre><code>yarn start</code></pre><p><code>server.js</code>添加路由</p><pre class=" language-JavaScript"><code class="language-JavaScript">app.get('/user',function (req,res) {    res.json({        name:'张三',        age:18    })});</code></pre><p>修改<code>/src/App.js</code></p><pre class=" language-JavaScript"><code class="language-JavaScript">import React from 'react';import {Button} from 'antd-mobile';import axios from 'axios';import './App.css';class App extends React.Component {    constructor(props){        super(props);        this.state = {            user:{                name:'李四',                age:12            }        }    }    componentDidMount(){        console.log('component did mount!');    }    handleClick(){        axios.get('/user').then(res => {            console.log(res);            if(res.status === 200){                this.setState({                    user:res.data                })            }        })    }    render() {        return (            <div className="App">                <Button type="primary" onClick={this.handleClick.bind(this)}>获取</Button>                <p>                    我叫{this.state.user.name} ,我今年{this.state.user.age}岁.                </p>            </div>        );    }}export default App;</code></pre><p>到这里前后端联调已经通了,但是后台还没有链接数据库(mongodb),react还没有使用 redux 和 router 等,接下来我们需要对 项目进一步改造.</p><p>未完待续…</p><ol><li>配置使用 mongodb</li></ol><p>关于<code>mongodb</code>.<a href="http://www.runoob.com/mongodb/mongodb-tutorial.html" target="_blank" rel="noopener">查看文档了解更多</a></p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Redux </tag>
            
            <tag> React-router </tag>
            
            <tag> NodeJs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>macOS 环境下 SVN 的使用(客户端)</title>
      <link href="/svn-usage-client-environment-under-macos.html"/>
      <content type="html"><![CDATA[<p>macOS 环境下 自带有 svn,下面来说说这个svn 怎么用.(针对 <strong>客户端</strong> ,服务端还没有实践过)</p><h4 id="从本地把已有项目上传至SVN服务器-初始化"><a href="#从本地把已有项目上传至SVN服务器-初始化" class="headerlink" title="从本地把已有项目上传至SVN服务器(初始化)"></a>从本地把已有项目上传至SVN服务器(初始化)</h4><pre class=" language-bash"><code class="language-bash">//svn <span class="token function">import</span> <span class="token punctuation">[</span>本地项目地址<span class="token punctuation">]</span> <span class="token punctuation">[</span>svn仓库地址<span class="token punctuation">]</span> --username<span class="token operator">=</span>账号 --password<span class="token operator">=</span>密码 -m <span class="token string">"注释"</span>svn <span class="token function">import</span> <span class="token punctuation">[</span>localhost project url<span class="token punctuation">]</span> <span class="token punctuation">[</span>svn:url<span class="token punctuation">]</span> --username<span class="token operator">=</span>xxxxx --password<span class="token operator">=</span>xxxxx -m <span class="token string">"注释."</span></code></pre><h4 id="从SVN服务器端下载到本地"><a href="#从SVN服务器端下载到本地" class="headerlink" title="从SVN服务器端下载到本地"></a>从SVN服务器端下载到本地</h4><pre class=" language-bash"><code class="language-bash">svn checkout <span class="token punctuation">[</span>svn:url<span class="token punctuation">]</span> --username<span class="token operator">=</span>xxxxx --password<span class="token operator">=</span>xxxxx <span class="token punctuation">[</span>localhost project url<span class="token punctuation">]</span></code></pre><h4 id="提交-更新"><a href="#提交-更新" class="headerlink" title="提交/更新"></a>提交/更新</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> project/svn commit -m <span class="token string">"注释说明"</span>svn update</code></pre><h4 id="查看svn仓库"><a href="#查看svn仓库" class="headerlink" title="查看svn仓库"></a>查看svn仓库</h4><pre class=" language-bash"><code class="language-bash">svn list <span class="token punctuation">[</span>svn:url<span class="token punctuation">]</span> --username<span class="token operator">=</span>xxxxx --password<span class="token operator">=</span>xxxxx</code></pre><h4 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h4><pre class=" language-bash"><code class="language-bash">~$: svn <span class="token function">help</span>Available subcommands:   add   auth   blame <span class="token punctuation">(</span>praise, annotate, ann<span class="token punctuation">)</span>   <span class="token function">cat</span>   changelist <span class="token punctuation">(</span>cl<span class="token punctuation">)</span>   checkout <span class="token punctuation">(</span>co<span class="token punctuation">)</span>   cleanup   commit <span class="token punctuation">(</span>ci<span class="token punctuation">)</span>   copy <span class="token punctuation">(</span>cp<span class="token punctuation">)</span>   delete <span class="token punctuation">(</span>del, remove, rm<span class="token punctuation">)</span>   <span class="token function">diff</span> <span class="token punctuation">(</span>di<span class="token punctuation">)</span>   <span class="token function">export</span>   <span class="token function">help</span> <span class="token punctuation">(</span>?, h<span class="token punctuation">)</span>   <span class="token function">import</span>   info   list <span class="token punctuation">(</span>ls<span class="token punctuation">)</span>   lock   log   merge   mergeinfo   <span class="token function">mkdir</span>   move <span class="token punctuation">(</span>mv, rename, ren<span class="token punctuation">)</span>   patch   propdel <span class="token punctuation">(</span>pdel, pd<span class="token punctuation">)</span>   propedit <span class="token punctuation">(</span>pedit, pe<span class="token punctuation">)</span>   propget <span class="token punctuation">(</span>pget, pg<span class="token punctuation">)</span>   proplist <span class="token punctuation">(</span>plist, pl<span class="token punctuation">)</span>   propset <span class="token punctuation">(</span>pset, ps<span class="token punctuation">)</span>   relocate   resolve   resolved   revert   status <span class="token punctuation">(</span>stat, st<span class="token punctuation">)</span>   switch <span class="token punctuation">(</span>sw<span class="token punctuation">)</span>   unlock   update <span class="token punctuation">(</span>up<span class="token punctuation">)</span>   upgradeSubversion is a tool <span class="token keyword">for</span> version control.</code></pre><p>括号中代表 命令的简写,如:</p><pre class=" language-bash"><code class="language-bash">svn commit   <span class="token operator">==</span><span class="token operator">=</span>     svn cisvn checkout   <span class="token operator">==</span><span class="token operator">=</span>     svn co</code></pre><font color="red"><strong>*注意</strong></font><p>在输入地址时  精良不要出现特殊字符如<code>()</code>中文等.</p><p>() 括号在使用是需要转义成  <code>%28</code>  <code>%29</code> 否则报错.</p><pre><code>另附上ASCII字符与URL编码的对照表。  ASCII字符   URL编码  空格          %20  !            %21  &quot;            %22  #            %23  $            %24  %            %25  &amp;            %26  &#39;            %27  (            %28  )            %29  *            %2A  +            %2B  ,            %2C  -            %2D  .            %2E  /            %2F  0            %30  1            %31  2            %32  3            %33  4            %34  5            %35  6            %36  7            %37  8            %38  9            %39  :            %3A  ;            %3B  &lt;            %3C =            %3D &gt;            %3E  ?            %3F  @            %40  A            %41  B            %42  C            %43  D            %44  E            %45  F            %46  G            %47  H            %48  I            %49  J            %4A  K            %4B  L            %4C  M            %4D  N            %4E  O            %4F  P            %50  Q            %51  R            %52  S            %53  T            %54  U            %55  V            %56  W            %57  X            %58  Y            %59  Z            %5A  [            %5B  \            %5C  ]            %5D  ^            %5E  _            %5F  `            %60  a            %61  b            %62  c            %63  d            %64  e            %65  f            %66  g            %67  h            %68  i            %69  j            %6A  k            %6B  l            %6C  m            %6D  n            %6E  o            %6F  p            %70  q            %71  r            %72  s            %73  t            %74  u            %75  v            %76  w            %77  x            %78  y            %79  z            %7A  {            %7B  |            %7C  }            %7D  ~            %7E  %7F  €            %80  %81  ‚            %82  ƒ            %83  „            %84  …            %85  †            %86  ‡            %87  ˆ            %88  ‰            %89  Š            %8A  ‹            %8B  Œ            %8C  %8D  Ž            %8E  %8F  %90  ‘            %91  ’            %92  “            %93  ”            %94  •            %95  –            %96  —            %97  ˜            %98  ™            %99  š            %9A  ›            %9B  œ            %9C  %9D  ž            %9E  Ÿ            %9F  %A0  ¡            %A1  ¢            %A2  £            %A3  %A4  ¥            %A5  |            %A6  §            %A7  ¨            %A8  ©            %A9  ª            %AA  «            %AB  ¬            %AC  ¯            %AD  ®            %AE  ¯            %AF  °            %B0  ±            %B1  ²            %B2  ³            %B3  ´            %B4  µ            %B5  ¶            %B6  ·            %B7  ¸            %B8  ¹            %B9  º            %BA  »            %BB  ¼            %BC  ½            %BD  ¾            %BE  ¿            %BF  À            %C0  Á            %C1  Â            %C2  Ã            %C3  Ä            %C4  Å            %C5  Æ            %C6  Ç            %C7  È            %C8  É            %C9  Ê            %CA  Ë            %CB  Ì            %CC  Í            %CD  Î            %CE  Ï            %CF  Ð            %D0  Ñ            %D1  Ò            %D2  Ó            %D3  Ô            %D4  Õ            %D5  Ö            %D6  %D7  Ø            %D8  Ù            %D9  Ú            %DA  Û            %DB  Ü            %DC  Ý            %DD  Þ            %DE  ß            %DF  à            %E0  á            %E1  â            %E2  ã            %E3  ä            %E4  å            %E5  æ            %E6  ç            %E7  è            %E8  é            %E9  ê            %EA  ë            %EB  ì            %EC  í            %ED  î            %EE  ï            %EF  ð            %F0  ñ            %F1  ò            %F2  ó            %F3  ô            %F4  õ            %F5  ö            %F6  ÷            %F7  ø            %F8  ù            %F9  ú            %FA  û            %FB  ü            %FC  ý            %FD  þ            %FE  ÿ            %FF</code></pre>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVN </tag>
            
            <tag> macOS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SASS 学习笔记</title>
      <link href="/sass-study-notes.html"/>
      <content type="html"><![CDATA[<blockquote><p>CSS预处理器(css preprocessor）基本思想是，用一种专门的编程语言，进行网页样式设计，然后再编译成正常的CSS文件。</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h3><p>SASS 是基于 <code>ruby</code> 的 CSS 预处理器. 既然基于 <code>ruby</code> ,那就得安装<code>ruby</code>(如何安装不在赘述);<br>ruby安装完成后 执行 <code>gem install sass</code>;</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用:"></a>使用:</h3><p>把<code>test.scss</code> 编译成 <code>test.css</code></p><pre class=" language-bash"><code class="language-bash">sass test.scss test.css</code></pre><p>SASS提供四个编译风格的选项：</p><ul><li>nested：嵌套缩进的css代码，它是默认值。</li><li>expanded：没有缩进的、扩展的css代码。</li><li>compact：简洁格式的css代码。</li><li>compressed：压缩后的css代码。</li></ul><pre class=" language-bash"><code class="language-bash">sass --style compressed test.scss test.css</code></pre><p>也可以让SASS监听某个文件或目录，一旦源文件有变动，就自动生成编译后的版本。</p><pre class=" language-bash"><code class="language-bash">// 监听文件sass --watch input.scss:output.css// 监听目录sass --watch app/sass:public/stylesheets</code></pre><p>推荐编译工具: <a href="http://koala-app.com/index-zh.html" target="_blank" rel="noopener">koala</a></p><p>sass 有两种后缀名文件：一种后缀名为 <code>sass</code>，不使用大括号和分号；另一种就是 <code>scss</code> 文件，这种和我们平时写的 <code>css</code> 文件格式差不多，使用大括号和分号。建议使用后缀名为 <code>scss</code> 的文件，以避免 <code>sass</code> 后缀名的严格格式要求报错。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法:"></a>语法:</h3><h5 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h5><p>使用 <code>$</code> 开头hexo</p><pre class=" language-css"><code class="language-css"><span class="token selector">$color: red;div</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>$color<span class="token punctuation">}</span></code></pre><p>拼接字符串使用 <code>#{}</code></p><pre class=" language-css"><code class="language-css"><span class="token selector">$left: left;div</span><span class="token punctuation">{</span>    <span class="token selector">margin-#</span><span class="token punctuation">{</span>$left<span class="token punctuation">}</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="2-计算"><a href="#2-计算" class="headerlink" title="2.计算"></a>2.计算</h5><pre class=" language-scss"><code class="language-scss"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">20</span>px/<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">padding</span><span class="token punctuation">(</span><span class="token number">10</span>px <span class="token operator">+</span> <span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token variable">$var</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="3-嵌套"><a href="#3-嵌套" class="headerlink" title="3.嵌套"></a>3.嵌套</h5><p>选择器嵌套</p><pre class=" language-css"><code class="language-css"><span class="token selector">div p</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-scss"><code class="language-scss"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token selector">p</span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>属性嵌套</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//border后加冒号.</span><span class="token selector">p</span><span class="token punctuation">{</span>    <span class="token selector">border:</span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以使用<code>&amp;</code>引用父元素:</p><pre class=" language-scss"><code class="language-scss">    <span class="token selector">a</span><span class="token punctuation">{</span>        <span class="token selector"><span class="token parent important">&amp;</span>:hover</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="4-注释"><a href="#4-注释" class="headerlink" title="4.注释"></a>4.注释</h5><p>SASS共有两种注释风格。</p><p>标准的CSS注释 /<em> comment </em>/ ，会保留到编译后的文件。</p><p>单行注释 // comment，只保留在SASS源文件中，编译后被省略。</p><p>在/*后面加一个感叹号，表示这是”重要注释”。即使是压缩模式编译，也会保留这行注释，通常可以用于声明版权信息。</p><h5 id="5-继承"><a href="#5-继承" class="headerlink" title="5.继承"></a>5.继承</h5><p>SASS允许一个选择器，继承另一个选择器。比如，现有class1：</p><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.class1</span> </span><span class="token punctuation">{</span>　　　　<span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#ddd</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span></code></pre><p>class2要继承class1，就要使用@extend命令：</p><pre class=" language-scss"><code class="language-scss"><span class="token selector">.class2 </span><span class="token punctuation">{</span>　　　　<span class="token keyword">@extend</span> <span class="token number">.</span>class<span class="token number">1</span><span class="token punctuation">;</span>　　　　<span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">120%</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span></code></pre><h5 id="6-可重用代码块-mixin"><a href="#6-可重用代码块-mixin" class="headerlink" title="6.可重用代码块 @mixin"></a>6.可重用代码块 @mixin</h5><pre class=" language-scss"><code class="language-scss"><span class="token keyword">@mixin</span> <span class="token selector">left </span><span class="token punctuation">{</span>　　<span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>　　<span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-scss"><code class="language-scss"><span class="token selector">div</span><span class="token punctuation">{</span>    <span class="token keyword">@include</span> left<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//指定默认参数</span><span class="token keyword">@mixin</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token property"><span class="token variable">$value</span></span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">)</span> <span class="token punctuation">{</span>　　<span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>　　<span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token variable">$value</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">div </span><span class="token punctuation">{</span>　　<span class="token keyword">@include</span> <span class="token function">left</span><span class="token punctuation">(</span><span class="token number">20</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="7-条件语句"><a href="#7-条件语句" class="headerlink" title="7.条件语句"></a>7.条件语句</h5><p>@if  @else</p><pre class=" language-scss"><code class="language-scss"><span class="token property"><span class="token variable">$num</span></span> <span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">@if</span> <span class="token selector">1 + 1 == 2 </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">@else</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>@for @while @each</p><pre class=" language-scss"><code class="language-scss"><span class="token comment" spellcheck="true">//for</span><span class="token keyword">@for</span> <span class="token variable">$i</span> <span class="token keyword">from</span> <span class="token selector">1 to 10 </span><span class="token punctuation">{</span>　　<span class="token selector">.border-<span class="token variable">#{$i}</span> </span><span class="token punctuation">{</span>　　　　<span class="token property">border</span><span class="token punctuation">:</span> <span class="token variable">#{$i}</span>px solid blue<span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//while</span><span class="token property"><span class="token variable">$i</span></span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">@while</span> <span class="token selector"><span class="token variable">$i</span> > 0 </span><span class="token punctuation">{</span>　　<span class="token selector">.item-<span class="token variable">#{$i}</span> </span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">2</span>em <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>　　<span class="token property"><span class="token variable">$i</span></span><span class="token punctuation">:</span> <span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//each</span><span class="token keyword">@each</span> <span class="token selector"><span class="token variable">$member</span> in a, b, c, d </span><span class="token punctuation">{</span>　　<span class="token selector">.<span class="token variable">#{$member}</span> </span><span class="token punctuation">{</span>　　　　<span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url">url</span><span class="token punctuation">(</span><span class="token string">"/image/#{$member}.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　　<span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="8-函数"><a href="#8-函数" class="headerlink" title="8.函数"></a>8.函数</h5><pre class=" language-scss"><code class="language-scss"><span class="token keyword">@function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>　　<span class="token keyword">@return</span> <span class="token variable">$n</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">#sidebar </span><span class="token punctuation">{</span>　　<span class="token property">width</span><span class="token punctuation">:</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token number">5</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>end.</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML/CSS </tag>
            
            <tag> Sass </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack 学习笔记(一)</title>
      <link href="/webpack-study-notes-1.html"/>
      <content type="html"><![CDATA[<h4 id="webpack-是什么-它能做什么"><a href="#webpack-是什么-它能做什么" class="headerlink" title="webpack 是什么? 它能做什么?"></a>webpack 是什么? 它能做什么?</h4><p> webpack 官网上通过这张图来解释的.</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-16/43017484.jpg" alt=""></p><p>官方说法:</p><blockquote><p>本质上，webpack 是一个现代 JavaScript 应用程序的模块打包器(module bundler)。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p></blockquote><p>通俗说法:</p><blockquote><p>通过一个给定的主文件（如：index.js），Webpack将从这个文件开始找到你的项目的所有依赖文件，使用loaders处理它们，最后打包为一个（或多个）浏览器可识别的JavaScript文件。</p></blockquote><h4 id="如何使用webpack"><a href="#如何使用webpack" class="headerlink" title="如何使用webpack?"></a>如何使用webpack?</h4><p>使用 <code>webpack</code> 的前提就是安装 <code>node.js</code>(不再赘述.);</p><p>使用方式有两种:</p><ol><li>在命令行终端中使用命令来操作.</li><li>通过配置文件来使用<code>webpack</code>.</li></ol><p>显然通过<a href="https://www.cnblogs.com/sloong/p/5584684.html" target="_blank" rel="noopener">命令的方式</a>操作失误在所难免,所以推荐使用第二种 配置文件的形式来使用.</p><p>在使用<code>webpack</code>之前要先理解四个<strong>核心概念</strong>:</p><ul><li>入口(entry)<blockquote><p>入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。进入入口起点后，webpack 会找出有哪些模块和库是入口起点（直接和间接）依赖的。</p></blockquote></li><li>输出(output)<blockquote><p>output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件</p></blockquote></li><li>loader</li><li>插件(plugins)</li></ul><p>下面我们通过实例来详细了解这四个核心概念.(习惯使用 <code>yarn</code>,抽时间要整理一下 <code>yarn</code>)</p><p>创建一个新项目 <code>hello-webpack</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> init<span class="token function">npm</span> <span class="token function">install</span> webpack --save--dev</code></pre><p>然后在项目中创建 <code>public</code> <code>src</code> 文件夹</p><ol><li>在根路径新建 <code>webpack.config.js</code></li><li>在<code>public</code>下 新建 <code>index.html</code></li><li>在<code>src</code>下新建 <code>app.js</code> 和 <code>hello.js</code></li></ol><p>webpack.config.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// path.resolve() 解析路径</span><span class="token comment" spellcheck="true">//__dirname 是node.js 的全局变量,它指向当前执行脚本所在的目录</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./src/app.js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">//entry  指定入口文件路径</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//输出</span>        path<span class="token punctuation">:</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span><span class="token string">'./build'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//打包输出文件路径</span>        filename<span class="token punctuation">:</span><span class="token string">'bundle.js'</span>                        <span class="token comment" spellcheck="true">//打包后的文件名</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>index.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>hello-webpack<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 这里配置的就是 打包输出的文件路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../build/bundle.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>hello.js</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span>innerHTML  <span class="token operator">=</span> <span class="token string">'hello world!'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>app.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token operator">/</span>hello<span class="token punctuation">.</span>js<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ok,接下来只需在终端里运行<code>webpack</code>(非全局安装需使用<code>./node_modules/.bin/webpack</code>)命令就可以了，这条命令会自动引用<code>webpack.config.js</code>文件中的配置选项，示例如下：<br><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-16/15720071.jpg" alt=""></p><p>然后打开 index.html</p><p><img src="http://oox9lo3vp.bkt.clouddn.com/18-1-16/77954312.jpg" alt=""></p><p><code>./node_modules/.bin/webpack</code>这条命令 又长又丑陋..接下来优化它.</p><p><code>npm</code>可以引导任务执行，对<code>npm</code>进行配置后可以在命令行中使用简单的<code>npm start</code>命令来替代上面略微繁琐的命令。在<code>package.json</code>中添加配置<code>scripts</code>:</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">"scripts"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token string">"start"</span><span class="token punctuation">:</span><span class="token string">"webpack"</span><span class="token punctuation">}</span></code></pre><blockquote><p>注：package.json中的script会安装一定顺序寻找命令对应位置，本地的node_modules/.bin路径就在这个寻找清单中，所以无论是全局还是局部安装的Webpack，你都不需要写前面那指明详细的路径了。</p></blockquote><p><code>npm</code>的<code>start</code>命令是一个特殊的脚本名称，其特殊性表现在，在命令行中使用<code>npm start</code>就可以执行其对于的命令，如果对应的此脚本名称不是<code>start</code>，想要在命令行中运行时，需要这样用<code>npm run {script name}</code>如<code>npm run build</code>;</p><p>执行<code>npm start</code> 后效果跟执行<code>webpack</code>是一样的.</p><p>到这里.webpack的两大特性<strong>入口</strong> 和 <strong>输出</strong> 就完成了.</p><p>未完待续…</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS常用实用整理</title>
      <link href="/commonly-used-css.html"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>理解Redux</title>
      <link href="/understand-redux.html"/>
      <content type="html"><![CDATA[<p>React 是 DOM 层的一个抽象层,并不是 Web 应用的完整解决方案.<br>有两个方面没有涉及:</p><blockquote><ul><li>代码结构</li><li>组件之间通信</li></ul></blockquote><p>当我还没搞明白redux 到底是个啥东西的时候,大师说了这句:</p><blockquote><p>“如果你不知道是否需要 Redux ,那就是不需要它”.</p></blockquote><p>WTF?<br>当我第一次尝试使用react做项目时,翻了一天文档,写了几个demo后 觉得 react so easy…我也真的不知道我是否需要 Redux.听大师的就是不需要..<br>结果当项目复杂度提升后,因为组件间通信的问题,搞的焦头烂额!甚至一度想过放弃react..这特么什么玩意? 单向数据流? 怎么通信? 然后开始把注意力转向 Angular..因为双向数据绑定.Form 等一切都是那么美好.<br>然而大师又说:</p><blockquote><p>“只有遇到 React 实在解决不了的问题,你才需要 Redux “</p></blockquote><p>我仿佛懂了,我需要Redux..!</p><p>接着看到阮一峰大神的博客,他列举了几种场景:<br>不需要:</p><blockquote><ul><li>用户的使用方式非常简单</li><li>用户之间没有协作</li><li>不需要与服务器大量交互,也没有使用 WebSocket</li><li>视图层（View）只从单一来源获取数据</li></ul></blockquote><p>需要:</p><blockquote><ul><li>用户的使用方式复杂</li><li>不同身份的用户有不同的使用方式（比如普通用户和管理员）</li><li>多个用户之间可以协作</li><li>与服务器大量交互,或者使用了WebSocket</li><li>View要从多个来源获取数据</li></ul></blockquote><p>考虑使用:</p><blockquote><ul><li>某个组件的状态,需要共享</li><li>某个状态需要在任何地方都可以拿到</li><li>一个组件需要改变全局状态</li><li>一个组件需要改变另一个组件的状态</li></ul></blockquote><p>阮一峰说 Redux 的核心思想:</p><blockquote><ul><li>web应用是个状态机,视图与状态是一一对应的;</li><li>所有的状态,保存在一个对象里;</li></ul></blockquote><p>然后我说说我的理解吧.</p><p>先说一下组件通信:比如组件A 需要根据 组件B 的一些操作来改变自身,或者根据组件A的状态来改变自己的状态.这时就需要组件A改变时通知组件B.甚至还有组件C会依赖组件B…..</p><p>react的优势同时也是痛点 单向数据流 数据从父组件一级一级的往下传递,组件嵌套多层后,数据的传递就非常复杂,组件间的通信也需要通过一个桥梁,公共父组件来传递消息.如果两个组件是兄弟组件还好说,如果不是,可以想想这么做有多痛苦.</p><p>Redux 就是来解决这些问题的,解决的核心思想就是<strong>所有状态保存在一个对象里.</strong>,</p><p>它带来了几个概念:</p><p><code>store</code>  <code>action</code>  <code>reducer</code></p><h4 id="1-Store"><a href="#1-Store" class="headerlink" title="1. Store"></a>1. Store</h4><p><strong>所有状态保存在一个对象里.</strong>这个对象就是 <code>store</code></p><p>Store对象包含所有数据.如果想得到某个时点的数据,就要对 <code>Store</code>生成快照.这种时点的数据集合,就叫做 <code>State</code>.</p><p>Redux 规定, 一个 <code>State</code> 对应一个 View.只要 <code>State</code> 相同,View 就相同.你知道 <code>State</code>,就知道 View 是什么样,反之亦然.</p><h4 id="2-Action"><a href="#2-Action" class="headerlink" title="2. Action"></a>2. Action</h4><p><code>State</code> 的变化,会导致 View 的变化.但是,用户接触不到 State,只能接触到 View.所以,<code>State</code> 的变化必须是 View 导致的.<code>Action</code> 就是 View 发出的通知,表示 <code>State</code> 应该要发生变化了.<br>可以这样理解,Action 描述当前发生的事情.改变 State 的唯一办法,就是使用 Action.它会运送数据到 Store.</p><h4 id="3-Action-Creator"><a href="#3-Action-Creator" class="headerlink" title="3. Action Creator"></a>3. Action Creator</h4><p>定义一个函数来生成 <code>Action</code> ,这个函数就叫 <code>Action Creator</code>,为什么需要这个? 看下面.</p><h4 id="4-store-dispatch"><a href="#4-store-dispatch" class="headerlink" title="4. store.dispatch()"></a>4. store.dispatch()</h4><p>store.dispatch()是 View 发出 Action 的唯一方法.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//默认写法</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span><span class="token string">'ADD'</span><span class="token punctuation">,</span>payload<span class="token punctuation">:</span><span class="token string">'需要携带的数据..'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//type:'ADD',payload:'需要携带的数据..'} 就是action 每次都这么写会很麻烦,so 定义function来生成action</span><span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token string">'ADD'</span><span class="token punctuation">;</span><span class="token keyword">const</span> addTodo <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span>text<span class="token punctuation">}</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">addTodo</span><span class="token punctuation">(</span><span class="token string">'需要携带的数据..'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="6-Reducer"><a href="#6-Reducer" class="headerlink" title="6. Reducer"></a>6. Reducer</h4><p><code>Store</code> 收到 <code>Action</code> 以后,必须给出一个新的 <code>State</code>,这样 View 才会发生变化.这种 <code>State</code> 的计算过程就叫做 <code>Reducer</code>.</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//reducer 是一个函数,它接受 Action 和当前 State 作为参数,返回一个新的 State</span><span class="token keyword">const</span> reducer <span class="token operator">=</span> <span class="token punctuation">(</span>state <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//store 收到action 后 根据 action.type 来判断如何计算state</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token string">'ADD'</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">//必须返回一个新的state 不能直接操作state</span>      <span class="token keyword">return</span> state <span class="token operator">+</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> state<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> ADD <span class="token operator">=</span> <span class="token string">'ADD'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//action creator</span><span class="token keyword">const</span> addTodo <span class="token operator">=</span> <span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>type<span class="token punctuation">:</span> ADD<span class="token punctuation">,</span>payload<span class="token punctuation">:</span>text<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>总结起来说就是:  要想改变<code>store</code> 只有发送 <code>action</code> , 要想发出<code>action</code> 只有通过<code>store.dispatch()</code>, 改变的具体实现就是 <code>reducer</code> 生成<code>action</code>可以通过<code>action creator</code>.</p><p>end.</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>基于create-react-app构建React全家桶</title>
      <link href="/building-react-family-bucket-based-on-createreactapp.html"/>
      <content type="html"><![CDATA[<h3 id="什么是create-react-app"><a href="#什么是create-react-app" class="headerlink" title="什么是create-react-app?"></a>什么是create-react-app?</h3><blockquote><p><a href="https://github.com/facebookincubator/create-react-app" target="_blank" rel="noopener">create-react-app</a>是Facebook官方推出的React应用开发脚手架工具,几乎可以零配置的构建webpack+react的开发环境,内置了热更新等一系列功能;</p></blockquote><hr><p>create-react-app 可以使用 yarn 替代 npm 来安装包.</p><pre><code>常用命令:npm start or yarn start          //启动npm test or yarn test           //测试npm run build or yarn build    //打包npm run eject                 //弹出配置项</code></pre><h3 id="Yarn"><a href="#Yarn" class="headerlink" title="Yarn"></a>Yarn</h3><ol><li>安装yarn</li></ol><p>windows  下载安装程序 <a href="https://yarnpkg.com/latest.msi" target="_blank" rel="noopener">Yarn</a> 直接安装</p><p>Mac 使用brew安装</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> yarn</code></pre><ol><li>基本命令</li></ol><pre class=" language-JavaScript"><code class="language-JavaScript">yarn add: 在你当前的包里添加一个包来使用。yarn init: 初始化包的开发环境。yarn install: 安装 package.json 文件里定义的所有依赖。yarn publish: 发布一个包到包管理器。yarn remove: 从你当前包里移除一个未使用的包。</code></pre><p>运行 yarn 不带命令将运行 <code>yarn install</code> ，并把参数标志传递给它。</p><p>命令跟 npm 类似. 区别 <code>add</code> 时不需要 <code>--save</code> 默认保存到 <code>package.json</code> , 开发依赖 <code>-dev</code></p><h3 id="Quick-Overview"><a href="#Quick-Overview" class="headerlink" title="Quick Overview"></a>Quick Overview</h3><pre class=" language-JavaScript"><code class="language-JavaScript">//全局安装 create-react-appnpm install -g create-react-app//新建一个 名为 my-app 的工程create-react-app my-app//构建完成之后 进入cd my-app///启动npm start</code></pre><p>浏览器打开  <a href="http://localhost:3000/" target="_blank" rel="noopener">http://localhost:3000/</a></p><p>生成的项目结构:</p><pre><code>my-app├── README.md├── node_modules├── package.json├── .gitignore├── public│   └── favicon.ico│   └── index.html│   └── manifest.json└── src    └── App.css    └── App.js    └── App.test.js    └── index.css    └── index.js    └── logo.svg    └── registerServiceWorker.js</code></pre><p>可以发现项目虽然是 基于 webpack 构建的 但是完全看不到熟悉的 <code>webpack.config.js</code>等配置文件,因为官方为了更<code>优雅</code>(?_?)的代码结构,就把配置项都通过 <code>react-scripts</code> 包配置好了.<br>在<code>node_modules</code>下找到 <code>react-scripts</code>可以看到 配置项都在这里.</p><p>打开 <code>package.json</code> </p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  ....  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"start"</span><span class="token operator">:</span> <span class="token string">"react-scripts start"</span><span class="token punctuation">,</span>    <span class="token property">"build"</span><span class="token operator">:</span> <span class="token string">"react-scripts build"</span><span class="token punctuation">,</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"react-scripts test --env=jsdom"</span><span class="token punctuation">,</span>    <span class="token property">"eject"</span><span class="token operator">:</span> <span class="token string">"react-scripts eject"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>实际开发中自定义配置在所难免,so 官方给了个 <code>eject</code>, </p><pre class=" language-javascript"><code class="language-javascript">npm run eject <span class="token comment" spellcheck="true">//弹出配置项</span></code></pre><blockquote><p>Note: this is a one-way operation. Once you eject, you can’t go back!<br>官方提示:这个操作是不可逆的,一旦操作就回不去了.</p></blockquote><p>配置弹出来然后开始安装react全家桶</p><pre class=" language-JavaScript"><code class="language-JavaScript">npm install --save react-router-dom         //4.*npm install --save redux react-redux        //redux  react-reduxnpm install --save redux-thunk              //异步中间件npm install --save less-loader              //less-loadernpm install --save ....                     //各种包</code></pre><p>在 <code>config</code> 目录下配置 <code>webpack</code> 如 less-loader  url-loader  插件等.</p><h3 id="配置ant-design"><a href="#配置ant-design" class="headerlink" title="配置ant-design"></a>配置ant-design</h3><blockquote><p>Ant Design 是一个致力于提升『用户』和『设计者』使用体验的中台设计语言。它模糊了产品经理、交互设计师、视觉设计师、前端工程师、开发工程师等角色边界，将进行 UE 设计和 UI 设计人员统称为『设计者』，利用统一的规范进行设计赋能，全面提高中台产品体验和研发效率。</p></blockquote><p>安装antd</p><pre class=" language-JavaScript"><code class="language-JavaScript">npm install --save antd   //或者 yarn add antd</code></pre><p>使用:   <code>import antd</code> 组件    </p><p>在文件顶部引入 <code>antd/dist/antd.css</code>。</p><pre class=" language-jsx"><code class="language-jsx">@<span class="token keyword">import</span> <span class="token string">'~antd/dist/antd.css'</span><span class="token punctuation">;</span><span class="token punctuation">.</span>App <span class="token punctuation">{</span>  text<span class="token operator">-</span>align<span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token operator">...</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Button <span class="token keyword">from</span> <span class="token string">'antd/lib/button'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><blockquote><p>现在已经把组件成功运行起来了，但是在实际开发过程中还有很多问题，例如上面的例子实际上加载了全部的 antd 组件的样式（对前端性能是个隐患）。</p></blockquote><h4 id="使用-babel-plugin-import"><a href="#使用-babel-plugin-import" class="headerlink" title="使用 babel-plugin-import"></a>使用 babel-plugin-import</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//安装babel-plugin-import</span>npm install <span class="token operator">--</span>save<span class="token operator">-</span>dev babel<span class="token operator">-</span>plugin<span class="token operator">-</span><span class="token keyword">import</span> <span class="token comment" spellcheck="true">//或者  yarn add babel-plugin-import --dev</span></code></pre><p>打开 package.json</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>    ...    <span class="token property">"babel"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"presets"</span><span class="token operator">:</span> <span class="token punctuation">[</span>      <span class="token string">"react-app"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"plugins"</span><span class="token operator">:</span><span class="token punctuation">[</span>      <span class="token punctuation">[</span><span class="token string">"import"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token property">"libraryName"</span><span class="token operator">:</span> <span class="token string">"antd"</span><span class="token punctuation">,</span> <span class="token property">"style"</span><span class="token operator">:</span> <span class="token string">"css"</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> //添加    <span class="token punctuation">]</span>    ...  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">}</span></code></pre><p>修改 App.js  再使用 <code>Button</code>组件就可以 import Button 就可以使用了.</p><pre class=" language-jsx"><code class="language-jsx">  <span class="token comment" spellcheck="true">// scr/App.js</span>  <span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token punctuation">{</span> Button <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'antd'</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span>  <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>App<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Button<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Button</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span></code></pre><p>其他 antd 配置可查看  <a href="http://ant-design.gitee.io/index-cn" target="_blank" rel="noopener">antd文档</a></p><p>end.</p>]]></content>
      
      <categories>
          
          <category> 技术向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> Webpack </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端问题总结-CSS</title>
      <link href="/front-end-problem-summary-css.html"/>
      <content type="html"><![CDATA[<p><strong>前端问题总结</strong></p><ol><li>HTML</li><li><strong>CSS</strong></li><li>JavaScript</li><li>ECMAScript 6</li><li>React 相关</li><li>其他</li></ol><h3 id="前端问题总结-CSS"><a href="#前端问题总结-CSS" class="headerlink" title="前端问题总结(CSS)"></a>前端问题总结(CSS)</h3><h5 id="1-介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"><a href="#1-介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？" class="headerlink" title="1.介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？"></a>1.介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h5><blockquote><p>CSS 框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式.</p><p>根据 W3C 的规范,元素内容占据的空间是由 width 属性设置的,而内容周围的 padding 和 border 值是另外计算的.<br>IE5,IE6 在怪异模式中使用自己的非标准模型,这些浏览器的 width 属性不是内容的宽度,而是内容、内边距和边框的宽度的总和.</p><p>标准的css盒子模型 -&gt;宽高 = 内容区宽高</p><p>低版本IE css盒子模型 -&gt;宽高 = 内容宽高 + 内边距 + 边框</p></blockquote><h5 id="2-CSS选择符有哪些？哪些属性可以继承？"><a href="#2-CSS选择符有哪些？哪些属性可以继承？" class="headerlink" title="2.CSS选择符有哪些？哪些属性可以继承？"></a>2.CSS选择符有哪些？哪些属性可以继承？</h5><blockquote><p>CSS选择器基本可以分为:</p><ul><li>通配选择器</li><li>标签选择器</li><li>类选择器</li><li>ID选择器</li><li>属性选择器(简单属性,具体属性,根据部分属性值选择,特定属性选择)</li><li>从结构上分还有 后代选择器,子元素选择器 相邻兄弟元素选择器以及伪类.</li></ul><p>可以继承的有: <code>font-size</code> <code>font-family</code> <code>color</code><br>不能继承的有: <code>border</code> <code>padding</code> <code>margin</code> <code>background</code> <code>width</code> <code>height</code>等</p></blockquote><h5 id="3-CSS优先级算法如何计算？"><a href="#3-CSS优先级算法如何计算？" class="headerlink" title="3.CSS优先级算法如何计算？"></a>3.CSS优先级算法如何计算？</h5><blockquote><p>CSS的specificity 特性或非凡性,他是衡量css优先级的一个标准,specificity用一个四位数表示,像是四个级别,从左到右,左边最大,一级大于以及,数位之间没有进制,多个选择符作用到同一个元素上是那么specificity上值最高的最终获得优先级.</p><p>简答的总结为:!important 可以改变优先级为最高,其次是 style对象, 然后是 id &gt; class &gt; tag ,另外统计样式按照申明的顺序,后出现的样式具有更高的优先级.</p></blockquote><h5 id="4-CSS3新增伪类有那些？"><a href="#4-CSS3新增伪类有那些？" class="headerlink" title="4.CSS3新增伪类有那些？"></a>4.CSS3新增伪类有那些？</h5><blockquote><p><img src="http://oox9lo3vp.bkt.clouddn.com/17-11-1/34098140.jpg" alt="CSS3选择器"><br><a href="http://www.w3school.com.cn/cssref/css_selectors.asp" target="_blank" rel="noopener">CSS3选择器详情</a><br>//懒得写了</p></blockquote><h5 id="5-如何居中div？"><a href="#5-如何居中div？" class="headerlink" title="5.如何居中div？"></a>5.如何居中div？</h5><blockquote><p>老生常谈的问题了,方法很多,各有优缺点,根据实际情况选用.</p></blockquote><p><strong>表格布局法</strong>   </p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cell<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Content goes here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  </code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#wrapper</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#cell</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>优点:content 可以动态改变高度(不需在 CSS 中定义).当 wrapper 里没有足够空间时, content 不会被截断.<br>缺点:IE中无效   </p><p><strong>inline-block</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>likeImg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Content goes here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  </code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#wrapper</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#likeImg</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>优点:在各种浏览器中兼容性都非常好,ie6和7中有间距问题.<br>缺点:很容易影响其他的布局,导致网页布局全部瘫痪.   </p><p><strong>绝对定位法</strong>   </p><p>这个方法使用绝对定位的 div,把它的 top 设置为 50％,top margin 设置为负的 content 高度.</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Content goes here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#content</span> </span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">240</span>px<span class="token punctuation">;</span>    <span class="token property">margin-top</span><span class="token punctuation">:</span> -<span class="token number">120</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 盒子本身高度的一半 */</span><span class="token punctuation">}</span></code></pre><p>优点:适用于所有浏览器,不需要嵌套标签.<br>缺点:没有足够空间时,content 会消失.   </p><p><strong>浮动</strong></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Content here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>floater<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#floater</span> </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">120</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token id">#content</span> </span><span class="token punctuation">{</span>    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">240</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>优点:适用于所有浏览器,没有足够空间时(例如:窗口缩小) content 不会被截断,滚动条出现.<br>缺点:空元素.  </p><h5 id="6-display有哪些值？说明他们的作用"><a href="#6-display有哪些值？说明他们的作用" class="headerlink" title="6.display有哪些值？说明他们的作用."></a>6.display有哪些值？说明他们的作用.</h5><blockquote><p><code>none</code>    此元素不会被显示.<br><code>block</code>    此元素将显示为块级元素,此元素前后会带有换行符.<br><code>inline</code>    默认.此元素会被显示为内联元素,元素前后没有换行符.<br><code>inline-block</code>    行内块元素.（CSS2.1 新增的值）<br><code>list-item</code>    此元素会作为列表显示.<br><code>run-in</code>    此元素会根据上下文作为块级元素或内联元素显示.<br><code>table</code>    此元素会作为块级表格来显示（类似 <code>&lt;table&gt;</code>）,表格前后带有换行符.<br><code>inline-table</code>    此元素会作为内联表格来显示（类似 <code>&lt;table&gt;</code>）,表格前后没有换行符.<br><code>table-row-group</code>    此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tbody&gt;</code>）.<br><code>table-header-group</code>    此元素会作为一个或多个行的分组来显示（类似 <code>&lt;thead&gt;</code>）.<br><code>table-footer-group</code>    此元素会作为一个或多个行的分组来显示（类似 <code>&lt;tfoot&gt;</code>）.<br><code>table-row</code>    此元素会作为一个表格行显示（类似 <code>&lt;tr&gt;</code>）.<br><code>table-column-group</code>    此元素会作为一个或多个列的分组来显示（类似 <code>&lt;colgroup&gt;</code>）.<br><code>table-column</code>    此元素会作为一个单元格列显示（类似 <code>&lt;col&gt;</code>）<br><code>table-cell</code>    此元素会作为一个表格单元格显示（类似 <code>&lt;td&gt;</code> 和 <code>&lt;th&gt;</code>）<br><code>table-caption</code>    此元素会作为一个表格标题显示（类似 <code>&lt;caption&gt;</code>）<br><code>inherit</code>    规定应该从父元素继承 display 属性的值.  </p></blockquote><h5 id="7-position的值relative和absolute定位原点是？"><a href="#7-position的值relative和absolute定位原点是？" class="headerlink" title="7.position的值relative和absolute定位原点是？"></a>7.position的值relative和absolute定位原点是？</h5><blockquote><ul><li>relative（相对定位）：定位原点是元素本身所在位置； </li><li>absolute（绝对定位）：定位原点是离自己这一级元素最近的一级position设置为absolute或者relative的父元素的左上角为原点的</li></ul></blockquote><h5 id="8-CSS3有哪些新特性？"><a href="#8-CSS3有哪些新特性？" class="headerlink" title="8.CSS3有哪些新特性？"></a>8.CSS3有哪些新特性？</h5><blockquote><ol><li>增加了选择器(解决了很多我们之前需要用 JavaScript 脚本才能解决的问题)</li><li>@Font-face 特性 能够加载服务器端的字体文件,让客户端显示客户端所没有安装的字体.</li><li>Word-wrap &amp; Text-overflow 样式<!-- ,Word-wrap设置或检索当当前行超过指定容器的边界时是否断开转行;Text-overflow设置或检索当当前行超过指定容器的边界时如何显示,有“clip”和“ellipsis”两种可供选择 --></li><li>多列布局（multi-column layout）</li><li>边框和颜色（color, border） 颜色的透明度,圆角</li><li>颜色渐变效果（Gradient） 线性渐变 径向渐变</li><li>阴影（Shadow）和反射（Reflect）效果  </li><li>盒子模型</li><li>Transitions(过渡效果), Transforms(指拉伸,压缩,旋转,偏移等等一些图形学里面的基本变换) 和 Animation(动画)</li></ol></blockquote><h5 id="9-请解释一下CSS3的Flexbox（弹性盒布局模型）-以及适用场景？"><a href="#9-请解释一下CSS3的Flexbox（弹性盒布局模型）-以及适用场景？" class="headerlink" title="9.请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？"></a>9.请解释一下CSS3的Flexbox（弹性盒布局模型）,以及适用场景？</h5><blockquote><p>引入弹性盒布局模型的目的是提供一种更加有效的方式来对一个容器中的条目进行排列、对齐和分配空白空间.即便容器中条目的尺寸未知或是动态变化的,弹性盒布局模型也能正常的工作.在该布局模型中,容器会根据布局的需要,调整其中包含的条目的尺寸和顺序来最好地填充所有可用的空间.当容器的尺寸由于屏幕大小或窗口尺寸发生变化时,其中包含的条目也会被动态地调整.<br>Web 应用的样式设计中,布局是非常重要的一部分.布局用来确定页面上不同组件和元素的尺寸和位置.随着响应式用户界面的流行,Web 应用一般都要求适配不同的设备尺寸和浏览器分辨率.响应式用户界面设计中最重要的一环就是布局.需要根据窗口尺寸来调整布局,从而改变组件的尺寸和位置,以达到最佳的显示效果.这也使得布局的逻辑变得更加复杂.CSS3 规范中引入的新布局模型：弹性盒模型（flex box）.弹性盒模型可以用简单的方式满足很多常见的复杂的布局需求.它的优势在于开发人员只是声明布局应该具有的行为,而不需要给出具体的实现方式.浏览器会负责完成实际的布局.该布局模型在主流浏览器中都得到了支持.</p></blockquote><h5 id="10-用纯CSS创建一个三角形的原理是什么？"><a href="#10-用纯CSS创建一个三角形的原理是什么？" class="headerlink" title="10.用纯CSS创建一个三角形的原理是什么？"></a>10.用纯CSS创建一个三角形的原理是什么？</h5><blockquote><p>块级元素 显示为矩形,让宽高为0,设置边框,不需要显示的边框显示颜色为 transparent(透明) 需要显示的边框添加颜色.</p></blockquote><h5 id="11-一个满屏-品-字布局-如何设计"><a href="#11-一个满屏-品-字布局-如何设计" class="headerlink" title="11.一个满屏 品 字布局 如何设计?"></a>11.一个满屏 品 字布局 如何设计?</h5><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clearfix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 清除浮动 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>second box lf<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>third box rf<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-css"><code class="language-css">    <span class="token selector">html,body</span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100%</span>,<span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span>,<span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">pandding</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.lf</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.rf</span></span><span class="token punctuation">{</span><span class="token property">float</span><span class="token punctuation">:</span>right<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span><span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"\200B"</span><span class="token punctuation">;</span><span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.first</span></span><span class="token punctuation">{</span><span class="token property">margin</span><span class="token punctuation">:</span>auto<span class="token punctuation">;</span><span class="token property">background</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.second</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.third</span></span><span class="token punctuation">{</span><span class="token property">background</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="12-css多列等高如何实现？"><a href="#12-css多列等高如何实现？" class="headerlink" title="12.css多列等高如何实现？"></a>12.css多列等高如何实现？</h5><blockquote></blockquote><h5 id="13-经常遇到的浏览器的兼容性有哪些？原因-解决方法是什么-常用hack的技巧-？"><a href="#13-经常遇到的浏览器的兼容性有哪些？原因-解决方法是什么-常用hack的技巧-？" class="headerlink" title="13.经常遇到的浏览器的兼容性有哪些？原因,解决方法是什么,常用hack的技巧 ？"></a>13.经常遇到的浏览器的兼容性有哪些？原因,解决方法是什么,常用hack的技巧 ？</h5><blockquote><ul><li>png24位的图片在iE6浏览器上出现背景，解决方案是做成PNG8.    </li><li>浏览器默认的margin和padding不同。解决方案是加一个全局的*{margin:0;padding:0;}来统一。   </li><li>IE6双边距bug:块属性标签float后，又有横行的margin情况下，在ie6显示margin比设置的大。<br>浮动ie产生的双倍距离 #box{ float:left; width:10px; margin:0 0 0 100px;}<br>这种情况之下IE会产生20px的距离，解决方案是在float的标签样式控制中加入 ——<em>display:inline;将其转化为行内属性。(</em>这个符号只有ie6会识别)<br>渐进识别的方式，从总体中逐渐排除局部。<br>首先，巧妙的使用“\9”这一标记，将IE游览器从所有情况中分离出来。<br>接着，再次使用“+”将IE8和IE7、IE6分离开来，这样IE8已经独立识别。</li></ul></blockquote><pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.bb</span></span><span class="token punctuation">{</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*所有识别*/</span>    <span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#00deff</span><span class="token entity" title="\9">\9</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*IE6、7、8识别*/</span>    +<span class="token property">background-color</span><span class="token punctuation">:</span><span class="token hexcode">#a200ff</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*IE6、7识别*/</span>    <span class="token property">_background-color</span><span class="token punctuation">:</span><span class="token hexcode">#1e0bd1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*IE6识别*/</span><span class="token punctuation">}</span></code></pre><blockquote><ul><li>IE下,可以使用获取常规属性的方法来获取自定义属性,<br>  也可以使用getAttribute()获取自定义属性;<br>  Firefox下,只能使用getAttribute()获取自定义属性。<br>  解决方法:统一通过getAttribute()获取自定义属性。</li></ul></blockquote><blockquote><ul><li>IE下,even对象有x,y属性,但是没有pageX,pageY属性;</li><li>Firefox下,event对象有pageX,pageY属性,但是没有x,y属性。    </li><li>解决方法：（条件注释）缺点是在IE浏览器下可能会增加额外的HTTP请求数。   </li><li>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。超链接访问过后hover样式就不出现了 被点击访问过的超链接样式不在具有hover和active了解决方法是改变CSS属性的排列顺序:<br><code>L-V-H-A :  a:link {} a:visited {} a:hover {} a:active {}</code></li></ul></blockquote><h5 id="14-li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"><a href="#14-li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？" class="headerlink" title="14.li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？"></a>14.li与li之间有看不见的空白间隔是什么原因引起的？有什么解决办法？</h5><blockquote><p>行框的排列会受到中间空白（回车\空格）等的影响，因为空格也属于字符,这些空白也会被应用样式，占据空间，所以会有间隔，把字符大小设为0，就没有空格了。</p></blockquote><h5 id="15-为什么要初始化CSS样式"><a href="#15-为什么要初始化CSS样式" class="headerlink" title="15.为什么要初始化CSS样式."></a>15.为什么要初始化CSS样式.</h5><blockquote><p>因为浏览器的兼容问题,不同浏览器对有些标签的默认值是不同的,如果没对CSS初始化往往会出现浏览器之间的页面显示差异.</p></blockquote><h5 id="16-absolute的containing-block-容器块-计算方式跟正常流有什么不同？"><a href="#16-absolute的containing-block-容器块-计算方式跟正常流有什么不同？" class="headerlink" title="16.absolute的containing block(容器块)计算方式跟正常流有什么不同？"></a>16.absolute的containing block(容器块)计算方式跟正常流有什么不同？</h5><blockquote><p>无论属于哪种，都要先找到其祖先元素中最近的 position 值不为 static 的元素，然后再判断：</p><ol><li>若此元素为 inline 元素，则 containing block 为能够包含这个元素生成的第一个和最后一个 inline box 的 padding box (除 margin, border 外的区域) 的最小矩形；</li><li>否则,则由这个祖先元素的 padding box 构成。   </li></ol></blockquote><h5 id="17-CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？"><a href="#17-CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？" class="headerlink" title="17.CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？"></a>17.CSS里的visibility属性有个collapse属性值是干嘛用的？在不同浏览器下以后什么区别？</h5><blockquote></blockquote><h5 id="18-position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？"><a href="#18-position跟display、margin-collapse、overflow、float这些特性相互叠加后会怎么样？" class="headerlink" title="18.position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？"></a>18.position跟display、margin collapse、overflow、float这些特性相互叠加后会怎么样？</h5><blockquote></blockquote><h5 id="19-对BFC规范-块级格式化上下文：block-formatting-context-的理解？"><a href="#19-对BFC规范-块级格式化上下文：block-formatting-context-的理解？" class="headerlink" title="19.对BFC规范(块级格式化上下文：block formatting context)的理解？"></a>19.对BFC规范(块级格式化上下文：block formatting context)的理解？</h5><blockquote></blockquote><h5 id="20-css定义的权重"><a href="#20-css定义的权重" class="headerlink" title="20.css定义的权重"></a>20.css定义的权重</h5><pre class=" language-css"><code class="language-css">以下是权重的规则：标签的权重为<span class="token number">1</span>，class的权重为<span class="token number">10</span>，id的权重为<span class="token number">100</span>，以下例子是演示各种定义的权重值：*/<span class="token comment" spellcheck="true">/*权重为1*/</span><span class="token selector">div</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*权重为10*/</span><span class="token selector"><span class="token class">.class1</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*权重为100*/</span><span class="token selector"><span class="token id">#id1</span></span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*权重为100+1=101*/</span><span class="token selector"><span class="token id">#id1</span> div</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*权重为10+1=11*/</span><span class="token selector"><span class="token class">.class1</span> div</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*权重为10+10+1=21*/</span><span class="token selector"><span class="token class">.class1</span> <span class="token class">.class2</span> div</span><span class="token punctuation">{</span><span class="token punctuation">}</span>/*如果权重相同，则最后定义的样式会起作用，但是应该避免这种情况出现</code></pre><h5 id="21-请解释一下为什么需要清除浮动？清除浮动的方式"><a href="#21-请解释一下为什么需要清除浮动？清除浮动的方式" class="headerlink" title="21.请解释一下为什么需要清除浮动？清除浮动的方式"></a>21.请解释一下为什么需要清除浮动？清除浮动的方式</h5><blockquote><p>清除浮动是为了清除使用浮动元素产生的影响。浮动的元素，高度会塌陷，而高度的塌陷使我们页面后面的布局不能正常显示。</p></blockquote><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*版本一*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:before</span>,<span class="token class">.clearfix</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span>     <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>     <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span></span><span class="token punctuation">{</span><span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token selector"><span class="token class">.clearfix</span></span><span class="token punctuation">{</span>     *<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">/*版本二*/</span><span class="token selector"><span class="token class">.clearfix</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>     <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">"\200B"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*Unicode字符里有一个“零宽度空格”，即 U+200B，代替原来的“ ”，而且不再使用visibility:hidden。*/</span>    <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>     <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token selector"><span class="token class">.clearfix</span> </span><span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> </code></pre><h5 id="22-什么是外边距合并？"><a href="#22-什么是外边距合并？" class="headerlink" title="22.什么是外边距合并？"></a>22.什么是外边距合并？</h5><blockquote><p>外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。</p></blockquote><h5 id="23-zoom-1的清除浮动原理"><a href="#23-zoom-1的清除浮动原理" class="headerlink" title="23.zoom:1的清除浮动原理?"></a>23.zoom:1的清除浮动原理?</h5><blockquote><p>Zoom属性是IE浏览器的专有属性，它可以设置或检索对象的缩放比例。解决ie下比较奇葩的bug。</p></blockquote><h5 id="24-移动端的布局用过媒体查询吗？"><a href="#24-移动端的布局用过媒体查询吗？" class="headerlink" title="24.移动端的布局用过媒体查询吗？"></a>24.移动端的布局用过媒体查询吗？</h5><blockquote><p>假设你现在正用一台显示设备来阅读这篇文章，同时你也想把它投影到屏幕上，或者打印出来， 而显示设备、屏幕投影和打印等这些媒介都有自己的特点，CSS就是为文档提供在不同媒介上展示的适配方法<br>当媒体查询为真时，相关的样式表或样式规则会按照正常的级联规被应用。 当媒体查询返回假， 标签上带有媒体查询的样式表 仍将被下载 （只不过不会被应用）。<br>包含了一个媒体类型和至少一个使用 宽度、高度和颜色等媒体属性来限制样式表范围的表达式。 CSS3加入的媒体查询使得无需修改内容便可以使样式应用于某些特定的设备范围。</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 700px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">orientation</span><span class="token punctuation">:</span> landscape<span class="token punctuation">)</span></span><span class="token punctuation">{</span> <span class="token selector"><span class="token class">.sidebar</span> </span><span class="token punctuation">{</span> <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre></blockquote><h5 id="25-使用-CSS-预处理器吗？喜欢那个？"><a href="#25-使用-CSS-预处理器吗？喜欢那个？" class="headerlink" title="25.使用 CSS 预处理器吗？喜欢那个？"></a>25.使用 CSS 预处理器吗？喜欢那个？</h5><blockquote><p>都差不多啊,偏向 less </p></blockquote><h5 id="26-CSS优化、提高性能的方法有哪些？"><a href="#26-CSS优化、提高性能的方法有哪些？" class="headerlink" title="26.CSS优化、提高性能的方法有哪些？"></a>26.CSS优化、提高性能的方法有哪些？</h5><blockquote><p>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）；如果规则拥有 ID 选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）；提取项目的通用公有样式，增强可复用性，按模块编写组件；增强项目的协同开发性、可维护性和可扩展性;使用预处理工具或构建工具（gulp对css进行语法检查、自动补前缀、打包压缩、自动优雅降级）；</p></blockquote><h5 id="27-浏览器是怎样解析CSS选择器的？"><a href="#27-浏览器是怎样解析CSS选择器的？" class="headerlink" title="27.浏览器是怎样解析CSS选择器的？"></a>27.浏览器是怎样解析CSS选择器的？</h5><blockquote><p>样式系统从关键选择器开始匹配，然后左移查找规则选择器的祖先元素。只要选择器的子树一直在工作，样式系统就会持续左移，直到和规则匹配，或者是因为不匹配而放弃该规则</p></blockquote><h5 id="28-在网页中的应该使用奇数还是偶数的字体？为什么呢？"><a href="#28-在网页中的应该使用奇数还是偶数的字体？为什么呢？" class="headerlink" title="28.在网页中的应该使用奇数还是偶数的字体？为什么呢？"></a>28.在网页中的应该使用奇数还是偶数的字体？为什么呢？</h5><blockquote><p>这个其实无所谓啊~~!!!  ( chrome 最小字号是12px so,我习惯使用偶数.)</p></blockquote><h5 id="29-margin和padding分别适合什么场景使用？"><a href="#29-margin和padding分别适合什么场景使用？" class="headerlink" title="29.margin和padding分别适合什么场景使用？"></a>29.margin和padding分别适合什么场景使用？</h5><blockquote><p>margin是用来隔开元素与元素的间距；padding是用来隔开元素与内容的间隔。<br>margin用于布局分开元素使元素与元素互不相干；<br>padding用于元素与内容之间的间隔，让内容（文字）与（包裹）元素之间有一段</p></blockquote><h5 id="30-抽离样式模块怎么写-说出思路？"><a href="#30-抽离样式模块怎么写-说出思路？" class="headerlink" title="30.抽离样式模块怎么写,说出思路？"></a>30.抽离样式模块怎么写,说出思路？</h5><blockquote></blockquote><h5 id="31-元素竖向的百分比设定是相对于容器的高度吗？"><a href="#31-元素竖向的百分比设定是相对于容器的高度吗？" class="headerlink" title="31.元素竖向的百分比设定是相对于容器的高度吗？"></a>31.元素竖向的百分比设定是相对于容器的高度吗？</h5><blockquote></blockquote><h5 id="32-全屏滚动的原理是什么？用到了CSS的那些属性？"><a href="#32-全屏滚动的原理是什么？用到了CSS的那些属性？" class="headerlink" title="32.全屏滚动的原理是什么？用到了CSS的那些属性？"></a>32.全屏滚动的原理是什么？用到了CSS的那些属性？</h5><blockquote></blockquote><h5 id="33-什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？"><a href="#33-什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？" class="headerlink" title="33.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？"></a>33.什么是响应式设计？响应式设计的基本原理是什么？如何兼容低版本的IE？</h5><blockquote></blockquote><h5 id="34-视差滚动效果-如何给每页做不同的动画？（回到顶部-向下滑动要再次出现-和只出现一次分别怎么做？）"><a href="#34-视差滚动效果-如何给每页做不同的动画？（回到顶部-向下滑动要再次出现-和只出现一次分别怎么做？）" class="headerlink" title="34.视差滚动效果,如何给每页做不同的动画？（回到顶部,向下滑动要再次出现,和只出现一次分别怎么做？）"></a>34.视差滚动效果,如何给每页做不同的动画？（回到顶部,向下滑动要再次出现,和只出现一次分别怎么做？）</h5><blockquote></blockquote><h5 id="35-before-和-after中双冒号和单冒号-有什么区别？解释一下这2个伪元素的作用"><a href="#35-before-和-after中双冒号和单冒号-有什么区别？解释一下这2个伪元素的作用" class="headerlink" title="35.::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用."></a>35.::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用.</h5><blockquote><p>CSS3中 双冒号 主要是为了区分 <strong>:伪类</strong> 和 <strong>::伪元素</strong> 实际是没有区别的,但是有些伪类是之前版本已经存在了,所以写成单冒号也可以. 作用就是在元素之前/之后 插入元素.</p></blockquote><h5 id="36-如何修改chrome记住密码后自动填充表单的黄色背景-？"><a href="#36-如何修改chrome记住密码后自动填充表单的黄色背景-？" class="headerlink" title="36.如何修改chrome记住密码后自动填充表单的黄色背景 ？"></a>36.如何修改chrome记住密码后自动填充表单的黄色背景 ？</h5><pre class=" language-css"><code class="language-css"><span class="token selector">input<span class="token pseudo-class">:-webkit-autofill</span>, textarea<span class="token pseudo-class">:-webkit-autofill</span>, select<span class="token pseudo-class">:-webkit-autofill</span> </span><span class="token punctuation">{</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">250</span>, <span class="token number">255</span>, <span class="token number">189</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* #FAFFBD; */</span><span class="token property">background-image</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span> <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="37-你对line-height是如何理解的？"><a href="#37-你对line-height是如何理解的？" class="headerlink" title="37.你对line-height是如何理解的？"></a>37.你对line-height是如何理解的？</h5><blockquote><p>基线位置是由字体确定的,css的line-height指的是一行字的高度,包含了字间距,实际上就是下一行的基线到上一行的基线距离</p></blockquote><h5 id="38-设置元素浮动后-该元素的display值是多少？"><a href="#38-设置元素浮动后-该元素的display值是多少？" class="headerlink" title="38.设置元素浮动后,该元素的display值是多少？"></a>38.设置元素浮动后,该元素的display值是多少？</h5><blockquote><p>block</p></blockquote><h5 id="39-怎么让Chrome支持小于12px-的文字？"><a href="#39-怎么让Chrome支持小于12px-的文字？" class="headerlink" title="39.怎么让Chrome支持小于12px 的文字？"></a>39.怎么让Chrome支持小于12px 的文字？</h5><blockquote><p>使用<code>-webkit-transform:scale(0.8)</code>进行缩放.</p></blockquote><h5 id="40-让页面里的字体变清晰-变细用CSS怎么做？"><a href="#40-让页面里的字体变清晰-变细用CSS怎么做？" class="headerlink" title="40.让页面里的字体变清晰,变细用CSS怎么做？"></a>40.让页面里的字体变清晰,变细用CSS怎么做？</h5><blockquote><p>据说这个属性可以,<code>-webkit-font-smoothing:antialiased</code>,但是我在实际测试中 发现没有效果.</p></blockquote><h5 id="41-font-style属性可以让它赋值为“oblique”-oblique是什么意思？"><a href="#41-font-style属性可以让它赋值为“oblique”-oblique是什么意思？" class="headerlink" title="41.font-style属性可以让它赋值为“oblique” oblique是什么意思？"></a>41.font-style属性可以让它赋值为“oblique” oblique是什么意思？</h5><blockquote><p>斜体.oblique基本上是一种模仿的斜体,而不是真正的斜体.italic是使用字体的斜体;</p></blockquote><h5 id="42-position-fixed-在android下无效怎么处理？"><a href="#42-position-fixed-在android下无效怎么处理？" class="headerlink" title="42.position:fixed;在android下无效怎么处理？"></a>42.position:fixed;在android下无效怎么处理？</h5><p>头部添加mate</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0, user-scalable<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="43-如果需要手动写动画-你认为最小时间间隔是多久-为什么？"><a href="#43-如果需要手动写动画-你认为最小时间间隔是多久-为什么？" class="headerlink" title="43.如果需要手动写动画,你认为最小时间间隔是多久,为什么？"></a>43.如果需要手动写动画,你认为最小时间间隔是多久,为什么？</h5><blockquote><p>多数显示器默认频率是60Hz，即1秒刷新60次，所以理论上最小间隔为1/60＊1000ms ＝ 16.7ms</p></blockquote><h5 id="44-display-inline-block-什么时候会显示间隙？"><a href="#44-display-inline-block-什么时候会显示间隙？" class="headerlink" title="44.display:inline-block 什么时候会显示间隙？"></a>44.display:inline-block 什么时候会显示间隙？</h5><blockquote><p>移除空格、使用margin负值、使用font-size:0、letter-spacing、word-spacing</p></blockquote><h5 id="45-overflow-scroll时不能平滑滚动的问题怎么处理？"><a href="#45-overflow-scroll时不能平滑滚动的问题怎么处理？" class="headerlink" title="45.overflow: scroll时不能平滑滚动的问题怎么处理？"></a>45.overflow: scroll时不能平滑滚动的问题怎么处理？</h5><blockquote></blockquote><h5 id="46-有一个高度自适应的div-里面有两个div-一个高度100px-希望另一个填满剩下的高度"><a href="#46-有一个高度自适应的div-里面有两个div-一个高度100px-希望另一个填满剩下的高度" class="headerlink" title="46.有一个高度自适应的div,里面有两个div,一个高度100px,希望另一个填满剩下的高度."></a>46.有一个高度自适应的div,里面有两个div,一个高度100px,希望另一个填满剩下的高度.</h5><blockquote><p>100px 的div 设置绝对定位,top:0; 另一个div 也设置绝对定位 top:100px;bottom:0;</p></blockquote><h5 id="47-png、jpg、gif-这些图片格式解释一下-分别什么时候用-有没有了解过webp？"><a href="#47-png、jpg、gif-这些图片格式解释一下-分别什么时候用-有没有了解过webp？" class="headerlink" title="47.png、jpg、gif 这些图片格式解释一下,分别什么时候用.有没有了解过webp？"></a>47.png、jpg、gif 这些图片格式解释一下,分别什么时候用.有没有了解过webp？</h5><blockquote></blockquote><h5 id="48-什么是Cookie-隔离？（或者说：请求资源的时候不要让它带cookie怎么做）"><a href="#48-什么是Cookie-隔离？（或者说：请求资源的时候不要让它带cookie怎么做）" class="headerlink" title="48.什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）"></a>48.什么是Cookie 隔离？（或者说：请求资源的时候不要让它带cookie怎么做）</h5><blockquote><p>如果静态文件都放在主域名下,那静态文件请求的时候都带有的cookie的数据提交给server的,非常浪费流量,所以不如隔离开.<br>因为cookie有域的限制,因此不能跨域提交请求,故使用非主要域名的时候,请求头中就不会带有cookie数据,这样可以降低请求头的大小,降低请求时间,从而达到降低整体请求延时的目的.<br>同时这种方式不会将cookie传入Web Server,也减少了Web Server对cookie的处理分析环节,提高了webserver的http请求的解析速度.</p></blockquote><h5 id="49-style标签写在body后与body前有什么区别？"><a href="#49-style标签写在body后与body前有什么区别？" class="headerlink" title="49.style标签写在body后与body前有什么区别？"></a>49.style标签写在body后与body前有什么区别？</h5><blockquote><p>如果style元素出现在body元素,最终效果和style元素出现在head里是一样的.但是可能引起FOUC、重绘或重新布局.</p></blockquote><h5 id="50-什么是CSS-预处理器-后处理器？"><a href="#50-什么是CSS-预处理器-后处理器？" class="headerlink" title="50.什么是CSS 预处理器 / 后处理器？"></a>50.什么是CSS 预处理器 / 后处理器？</h5><blockquote><ul><li>预处理器例如：LESS、Sass、Stylus,用来预编译Sass或less,增强了css代码的复用性,还有层级、mixin、变量、循环、函数等,具有很方便的UI组件模块化开发能力,极大的提高工作效率.</li><li>后处理器例如：PostCSS,通常被视为在完成的样式表中根据CSS规范处理CSS,让其更有效；目前最常做的是给CSS属性添加浏览器私有前缀,实现跨浏览器兼容性的问题.</li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端问题总结(HTML)</title>
      <link href="/summary-of-frontend-issues-html.html"/>
      <content type="html"><![CDATA[<blockquote><p>最近在网上找了一些前端方面的问题,看下来发现还是很多答不上来的, 所以决定把这些问题做个汇总.目的是希望每天能回答5-10题(尽量写Demo),一方面对已知的知识加深理解,另一方面找到自己缺乏的知识进而补充完善自己对前端的知识面.</p></blockquote><p><strong>前端问题总结</strong></p><ol><li><strong>HTML</strong></li><li>CSS</li><li>JavaScript</li><li>ECMAScript 6</li><li>React 相关</li><li>其他</li></ol><h3 id="前端问题总结-HTML"><a href="#前端问题总结-HTML" class="headerlink" title="前端问题总结(HTML)"></a>前端问题总结(HTML)</h3><h5 id="1-Doctype的作用-标准模式与兼容模式各有什么区别"><a href="#1-Doctype的作用-标准模式与兼容模式各有什么区别" class="headerlink" title="1. Doctype的作用,标准模式与兼容模式各有什么区别?"></a>1. Doctype的作用,标准模式与兼容模式各有什么区别?</h5><blockquote><ol><li>&lt;!DOCTYPE&gt; 声明位于HTML文档的第一行,处于 <html>标签之前.告知浏览器的解析器用什么文档标准解析这个文档.DOCTYPE不存在或者格式不正确会导致文档以兼容模式呈现;</html></li><li>标准模式的排版 JS 运作模式都是以该浏览器能支持的最高标准运行.在兼容模式下,页面以宽松的向后兼容的方式显示,模拟老式浏览器的行为以防止站点无法工作;</li></ol></blockquote><h5 id="2-HTML5为什么只需要写-lt-DOCTYPE-HTML-gt"><a href="#2-HTML5为什么只需要写-lt-DOCTYPE-HTML-gt" class="headerlink" title="2.HTML5为什么只需要写&lt;!DOCTYPE HTML&gt; ?"></a>2.HTML5为什么只需要写&lt;!DOCTYPE HTML&gt; ?</h5><blockquote><p>HTML5不基于SGML,因此不需要对DTD进行引用,但是需要doctype来规范浏览器的行为(让浏览器按照它们应该的方式来运行);<br>而HTML4.01基于SGML,所以需要对DTD进行引用,才能告诉浏览器文档所使用的文档类型;</p></blockquote><h5 id="3-行内元素有哪些-块级元素有哪些-空-void-元素有哪些"><a href="#3-行内元素有哪些-块级元素有哪些-空-void-元素有哪些" class="headerlink" title="3.行内元素有哪些?块级元素有哪些?空(void)元素有哪些?"></a>3.行内元素有哪些?块级元素有哪些?空(void)元素有哪些?</h5><blockquote><p>首先:CSS官方规定,每个元素都有 <em>display</em> 属性,以确定该元素的类型,每个元素都有默认的<em>display</em>值,如 <strong>div</strong> 的 <em>display</em> 值为 <em>block</em> ,是一个<strong>块级元素</strong>, <strong>span</strong> 标签的默认 <em>display</em> 属性的默认值为 <em>inline</em> 是<strong>行内元素</strong>;</p><ul><li>行内元素:<br><code>&lt;a&gt;</code> <code>&lt;b&gt;</code> <code>&lt;span&gt;</code> <code>&lt;img&gt;</code> <code>&lt;input&gt;</code> <code>&lt;select&gt;</code> <code>&lt;strong&gt;</code></li><li>块级元素:<br><code>&lt;div&gt;</code> <code>&lt;ul&gt;</code> <code>&lt;ol&gt;</code> <code>&lt;li&gt;</code> <code>&lt;dl&gt;</code> <code>&lt;dt&gt;</code> <code>&lt;dd&gt;</code> <code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code> <code>&lt;p&gt;</code></li><li>常见空元素:<br><code>&lt;br&gt;</code> <code>&lt;hr&gt;</code>  <code>&lt;img&gt;</code>  <code>&lt;input&gt;</code>  <code>&lt;link&gt;</code>  <code>&lt;meta&gt;</code><br><code>&lt;area&gt;</code> <code>&lt;base&gt;</code> <code>&lt;col&gt;</code> <code>&lt;command&gt;</code> <code>&lt;embed&gt;</code> <code>&lt;param&gt;</code> <code>&lt;source&gt;</code> <code>&lt;track&gt;</code> <code>&lt;wbr&gt;</code><br><em>不同浏览器(版本)实际略有差异</em></li></ul></blockquote><h5 id="4-页面导入样式时使用-link-和-import-有什么区别"><a href="#4-页面导入样式时使用-link-和-import-有什么区别" class="headerlink" title="4.页面导入样式时使用 link 和 @import 有什么区别?"></a>4.页面导入样式时使用 link 和 @import 有什么区别?</h5><blockquote><ol><li><code>link</code> 是 XHTML标签,除了加载CSS样式外,还能定义RSS,定义rel连接属性等作用;而<code>@import</code> 是CSS提供的,只能用于加载CSS;</li><li>页面被加载时 <code>link</code> 会同时被加载,而<code>@import</code> 引用只能等到页面被加载完成后再加载;</li><li>import时CSS2.1提出的,只在IE5以上才能被识别,而<code>link</code>时XHTML标签,无兼容问题;</li></ol></blockquote><h5 id="5-介绍你对浏览器内核的了解"><a href="#5-介绍你对浏览器内核的了解" class="headerlink" title="5.介绍你对浏览器内核的了解."></a>5.介绍你对浏览器内核的了解.</h5><blockquote><p>主要有两个部分组成:</p><ol><li><strong>渲染引擎:</strong>主要负责取得网页的内容(HTML/XML/图像等),整理信息(如加入CSS等),以及计算网页的显示方式,然后输出至显示器或打印机.浏览器的内核的不同对于网页语法解释会有不同,所以渲染效果也不相同.</li><li><strong>JavaScript引擎:</strong> 解析和执行<code>JavaScript</code>脚本.</li></ol></blockquote><blockquote><p>最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。</p></blockquote><h5 id="6-常见的浏览器内核有哪些"><a href="#6-常见的浏览器内核有哪些" class="headerlink" title="6.常见的浏览器内核有哪些?"></a>6.常见的浏览器内核有哪些?</h5><blockquote><p>浏览器最重要或者说核心部分是”Rendering Engine”,可大概意为:”渲染引擎”,不过我们一般习惯将之称为”浏览器内核”.负责读i网页语法解释,(如标准通用标记语言HTML,JavaScript)并渲染(显示)网页.所以通常所谓的浏览器内核也就是浏览器所采用的渲染引擎,渲染引擎确定了浏览器如何显示网页的内容以及页面的格式信息.不同的浏览器内核对网页编写语法的解释不同,因此同一网页在不同的内核浏览器的渲染效果不同,这也是网页编写者需要在不同内核的浏览器中测试网页显示效果的原因.</p><ul><li>Triden  IE浏览器内核</li><li>Gecko Firefox浏览器内核</li><li>Webkit safar内核 chrome 内核原型</li><li>Blink Google和Opera 开发的排版引擎</li><li><del>Presto 前Opera内核</del>,已废弃</li></ul></blockquote><h5 id="7-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？"><a href="#7-html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分-HTML-和-HTML5？" class="headerlink" title="7.html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？"></a>7.html5有哪些新特性、移除了那些元素？如何处理HTML5新标签的浏览器兼容问题？如何区分 HTML 和 HTML5？</h5><blockquote><p><strong>新特性:</strong></p><ul><li>拖拽释放API</li><li>画布(Canvas) API</li><li>地理(Geolocation) API</li><li>本地离线存储(localStorage) 长期存储,浏览器关闭数据不丢失</li><li>sessionStorage 浏览器关闭自动删除</li><li>支持 webworker/websocket/geolocation<br><strong>新元素</strong><br>语义化标签<code>&lt;header&gt;</code> <code>&lt;nav&gt;</code> <code>&lt;footer&gt;</code> <code>&lt;aside&gt;</code> <code>&lt;article&gt;</code> <code>&lt;section&gt;</code><br>画布<code>&lt;canvas&gt;</code> 音视频 <code>&lt;audio&gt;</code> <code>&lt;video&gt;</code>表单控件 <code>calendar</code> <code>date</code> <code>time</code> <code>email</code> <code>url</code> <code>search</code><br><strong>移除的元素</strong><br>纯表现的元素：<code>&lt;basefont&gt;</code> <code>&lt;big&gt;</code> <code>&lt;center&gt;</code> <code>&lt;font&gt;</code> <code>&lt;s&gt;</code> <code>&lt;tt&gt;</code> <code>&lt;u&gt;</code><br>对可用性产生负面影响的元素: <code>&lt;frame&gt;</code> <code>&lt;frameset&gt;</code> <code>&lt;noframes&gt;</code><br><strong>处理HTML5新标签的浏览器兼容问题</strong>:<br>可以通过 document.createElement方法产生新的标签,然后给标签添加默认样式.<br>或者使用成熟的框架 如: html5shim<br><strong>区分HTML和HTML5</strong>  可以通过DOCTYPE 声明</li></ul></blockquote><h5 id="8-简述一下你对HTML语义化的理解？"><a href="#8-简述一下你对HTML语义化的理解？" class="headerlink" title="8.简述一下你对HTML语义化的理解？"></a>8.简述一下你对HTML语义化的理解？</h5><blockquote><ul><li>简单的说就是 根据内容结构化(语义化) 选择合适的标签 便于开发者阅读和写出更优雅的代码的同时让浏览器的爬虫和机器很好的解析;<br><strong>为什么要语义化?</strong></li><li>在没有css的情况下 页面也能呈现出很好的内容结构\代码结构.<br>更好的 用户体验;如 title alt 等</li><li>有利于 SEO 和搜索引擎建立良好的沟通,有助于爬虫抓取更多的有效信息;爬虫依赖于标签来确定上下文和各个关键字的权重;</li><li>便于其他设备解析(如屏幕阅读器 盲人阅读器等)以意义的方式来渲染网页;</li><li>便于团队开发和维护 语义化更具可读性 遵循W3C标准 可以有效减少差异化.</li></ul></blockquote><h5 id="9-HTML5的离线储存怎么使用及工作原理？"><a href="#9-HTML5的离线储存怎么使用及工作原理？" class="headerlink" title="9.HTML5的离线储存怎么使用及工作原理？"></a>9.HTML5的离线储存怎么使用及工作原理？</h5><blockquote><p>离线存储通过创建 cache manifest 文件,可以创建web应用的离线版本.即 新建一个 .appcache 文件,通过这个文件上的 <em>解析清单</em> 离线存储资源,这些资源就会被存储下来.</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">manifest</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo.appcache<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>The content of the document......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>Manifest文件</p><pre class=" language-txt"><code class="language-txt">CACHE MANIFEST//需要缓存的文件，无论在线与否，均从缓存里读取CACHE:chched.jscached.css//不缓存的文件，无论缓存中存在与否，均从新获取NETWORK:uncached.jsuncached.css//获取不到资源时的备选路径，如index.html访问失败，则返回404页面FALLBACK:index.html 404.html</code></pre><blockquote><ul><li>在线的情况下，浏览器发现<code>html</code>头部有<code>manifest</code>属性,会请求<code>manifest</code>文件，如果是第一次访问应用，浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过应用并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的<code>manifest</code>文件与旧的<code>manifest</code>文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</li><li>离线的情况下，浏览器就直接使用离线存储的资源。</li></ul></blockquote><h5 id="10-iframe有那些缺点？"><a href="#10-iframe有那些缺点？" class="headerlink" title="10.iframe有那些缺点？"></a>10.iframe有那些缺点？</h5><blockquote><ul><li>对网页性能有影响(样式脚本需要额外链入  增加http请求)</li><li>不利于SEO</li><li>阻塞页面加载</li><li>对老式浏览器不友好(老式浏览器连接数限制)</li></ul></blockquote><h5 id="11-Label的作用是什么？是怎么用的？"><a href="#11-Label的作用是什么？是怎么用的？" class="headerlink" title="11.Label的作用是什么？是怎么用的？"></a>11.Label的作用是什么？是怎么用的？</h5><blockquote><p>label元素不会向用户成仙任何特殊效果,不过,他为鼠标用户改进了可用性.如果在label元素内点击文本,就会触发此控件;就是说当用户选择该标签时,浏览器就会自动将焦点转到和标签相关的表单控件上.</p></blockquote><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><h5 id="12-HTML5的form如何关闭自动完成功能？"><a href="#12-HTML5的form如何关闭自动完成功能？" class="headerlink" title="12.HTML5的form如何关闭自动完成功能？"></a>12.HTML5的form如何关闭自动完成功能？</h5><blockquote><p>设置<code>form</code> / <code>input</code>的 <code>autocomplete</code>属性为: <code>on</code> /<code>off</code></p></blockquote><h5 id="13-如何实现浏览器内多个标签页之间的通信"><a href="#13-如何实现浏览器内多个标签页之间的通信" class="headerlink" title="13.如何实现浏览器内多个标签页之间的通信?"></a>13.如何实现浏览器内多个标签页之间的通信?</h5><blockquote><p><strong>思路:</strong>通过浏览器的 localStorage 和 storage 事件 实现</p></blockquote><pre class=" language-JavaScript"><code class="language-JavaScript">//发送消息function sendMsg(msg){    window.localStorage.setItem('msg',msg);}//接收消息window.addEventListener('storage',function(event){    if(event.key == 'msg'){        console.log(evt.newValue);    }})</code></pre><p><strong> 多次设置相同键值 不会触发 storage 事件 </strong></p><h5 id="14-webSocket如何兼容低浏览器？"><a href="#14-webSocket如何兼容低浏览器？" class="headerlink" title="14.webSocket如何兼容低浏览器？"></a>14.webSocket如何兼容低浏览器？</h5><blockquote><p>暂时没有什么好的思路,只能想到替代,如果一定要用webscoket的,据说有个webscoket.js的工具,没找着…暂且放这吧.</p></blockquote><h5 id="15-页面可见性（Page-Visibility-API）-可以有哪些用途？"><a href="#15-页面可见性（Page-Visibility-API）-可以有哪些用途？" class="headerlink" title="15.页面可见性（Page Visibility API） 可以有哪些用途？"></a>15.页面可见性（Page Visibility API） 可以有哪些用途？</h5><blockquote><p>Page Visibility API 在节约资源上非常有用,当网页不可见时,这个API通过提供给开发者可以操作不必须的任务的接口。<br>如: 页面正在播放一个视频,当页面不可见时可以暂停视频,当用户切换回来时,再继续播放视频,不会因网页不可见而失去视频进度.</p></blockquote><h5 id="16-如何在页面上实现一个圆形的可点击区域？"><a href="#16-如何在页面上实现一个圆形的可点击区域？" class="headerlink" title="16.如何在页面上实现一个圆形的可点击区域？"></a>16.如何在页面上实现一个圆形的可点击区域？</h5><p>三种方式:<br>0.利用html标签 img map&gt;area</p><pre class=" language-html"><code class="language-html">    <span class="token comment" spellcheck="true">&lt;!-- 先放一张图片 使用 usemap属性指定map的 name/id (根据浏览器,所以一般设置map的name==id)  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testImg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test.gif<span class="token punctuation">"</span></span> <span class="token attr-name">usemap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#Map<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- area 点击区域. shape 设定区域形状,circle 圆形,reat 矩形, coords 坐标  --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>area</span> <span class="token attr-name">shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>circle<span class="token punctuation">"</span></span> <span class="token attr-name">coords</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>50,50,50<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test.html<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>点击区域<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span></code></pre><p>1.利用css属性 border-radius</p><pre class=" language-html"><code class="language-html">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">50%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>func()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>2.利用JavaScript 判断鼠标坐标来实现 (这个方法思路时有但是这代码还真写不出来…)</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//需要求一个点在不在圆上简单算法、获取鼠标坐标等等</span><span class="token comment" spellcheck="true">//代码如下： </span><span class="token operator">|</span>AB<span class="token operator">|</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>X2<span class="token operator">-</span>X1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>Y2<span class="token operator">-</span>Y1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span>求绝对值Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>底数<span class="token punctuation">,</span>指数<span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span>求平方根document<span class="token punctuation">.</span>onclick<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> r<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//圆的半径  </span>    <span class="token keyword">var</span> x1<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>y1<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>x2<span class="token operator">=</span> e<span class="token punctuation">.</span>clientX<span class="token punctuation">;</span>y2<span class="token operator">=</span> e<span class="token punctuation">.</span>clientY<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//计算鼠标点的位置与圆心的距离  </span>    <span class="token keyword">var</span> len<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>x2<span class="token operator">-</span>x1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span>y2<span class="token operator">-</span>y1<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">&lt;=</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"内"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"外"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  </code></pre><h5 id="17-实现不使用-border-画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果"><a href="#17-实现不使用-border-画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果" class="headerlink" title="17.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果."></a>17.实现不使用 border 画出1px高的线，在不同浏览器的标准模式与怪异模式下都能保持一致的效果.</h5><blockquote><p>使用高度为1px 的div 设置背景色;</p></blockquote><h5 id="18-网页验证码是干嘛的，是为了解决什么安全问题"><a href="#18-网页验证码是干嘛的，是为了解决什么安全问题" class="headerlink" title="18.网页验证码是干嘛的，是为了解决什么安全问题."></a>18.网页验证码是干嘛的，是为了解决什么安全问题.</h5><blockquote><p>增加验证码的主要目的是减少非正常的请求,以保护用户权益.所谓非正常的请求有以下:</p><ol><li>爬虫脚本登录,比如登录之后批量发布不良信息.</li><li>扫号脚本暴力探测用户帐号,比如暴力破解某些用户的密码.</li><li>频繁的使用某一个涉及后台性能瓶颈的功能,导致系统负载过高.</li></ol></blockquote><h5 id="19-title与h1的区别、b与strong的区别、i与em的区别？"><a href="#19-title与h1的区别、b与strong的区别、i与em的区别？" class="headerlink" title="19.title与h1的区别、b与strong的区别、i与em的区别？"></a>19.title与h1的区别、b与strong的区别、i与em的区别？</h5><blockquote><p>它们的区别就再于一个是物理元素，一个是逻辑元素。</p></blockquote><blockquote><p>物理元素所强调的是一种物理行为，比如说我把一段文字用 <code>b</code> 标记加粗了，我的意思是告诉浏览器应该给我加粗了显示这段文字，从单词的语义也可以分析得出，<code>b</code> 是 Bold(加粗) 的简写，所以这个 <code>b</code> 标记所传达的意思只是加粗，没有任何其它的作用。<br>而 <code>Strong</code> 我们从字面理解就可以知道他是强调的意思，所以我们用这个标记向浏览器传达了一个强调某段文字的消息，而这个 <code>Strong</code> 就是我们所说的逻辑元素，他是强调文档逻辑的，并非是通知浏览器应该如何显示。</p></blockquote><blockquote><p>同样，<code>i</code> 是Italic(斜体)，而 <code>em</code> 是emphasize(强调)。<br>所以说：物理元素是告诉浏览器我应该以何种格式显示文字，逻辑元素告诉浏览器这些文字有怎么样的重要性。</p></blockquote><h5 id="21-请描述一下-cookies，sessionStorage-和-localStorage-的区别？"><a href="#21-请描述一下-cookies，sessionStorage-和-localStorage-的区别？" class="headerlink" title="21.请描述一下 cookies，sessionStorage 和 localStorage 的区别？"></a>21.请描述一下 cookies，sessionStorage 和 localStorage 的区别？</h5><blockquote><ul><li><strong>cookie</strong> 是网站为了标识用户身份而存储在用户本地(浏览器/或其他终端)的数据,cookie数据始终在同源的http请求中携带.(在用户终端和服务器之间来回传递),可以设置cookie失效时间,有效时间内数据持久保存;</li><li><strong>localStorage</strong> 存储在用户本地终端的<strong>持久数据</strong>  不会自动传递给服务器,仅在本地保存.浏览器关闭数据不丢失</li><li><strong>sessionStorage</strong> 和localStorage 一样区别在于它是非持久数据 浏览器关闭自动删除;</li></ul></blockquote>]]></content>
      
      <categories>
          
          <category> 分享境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> HTML/CSS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/hello-hexo.html"/>
      <content type="html"><![CDATA[<p>hello hexo,今天开了 hexo 的博客,感觉很cool,之前一直知道hexo 但是无心折腾,昨天在qq群聊天时又聊起了hexo,正好我才从博客园/开源中国挪窝到简书,其实呢这几个平台都是非常不错的,就是不够cool.博客园很朴素,开源中国乏善可陈,简书有markdown,(很文艺.技术范不足..)so..心血来潮开始了我的hexo之旅..从官方文档开始,折腾了大概2个多小时,后面可能要总结一下搭建流程..</p><p>接下来,我会逐步把其他平台的博文搬过来,其实我是没有固定更博的习惯的.主要的文章还是技术总结或者好的文章转载.嗯,从今天开始 我要固定<strong>每周写一到两篇(也不敢多想,太懒)博客</strong>,记录生活.</p><p>嗯,先写这么多吧.–2017-11-1</p>]]></content>
      
      <categories>
          
          <category> 自言语 </category>
          
      </categories>
      
      
    </entry>
    
  
  
    
    <entry>
      <title>About Me</title>
      <link href="/about/index.html"/>
      <content type="html"><![CDATA[<p><strong>“生存本来就是一种幸运。过去的地球上是如此，现在这个冷酷的宇宙中也到处如此。但不知从什么时候起，人类有了一种幻觉，认为生存成了唾手可得的东西，这就是你们失败的根本原因。进化的旗帜将再次在这个世界升起，你们将为生存而战。我希望在座的每个人都在那最后的五千万人之中，希望你们能吃到粮食，而不是被粮食吃掉。”</strong></p><p><strong>“其实吧，从科学角度讲，毁灭一词并不准确，没有真正毁掉什么，更没有灭掉什么，物质总量一点不少还都在，角动量也还在，只是物质组合方式变了变，像一副扑克牌，仅仅重洗而已，可生命是一手同花顺，一洗什么都没了。”</strong></p>]]></content>
    </entry>
    
    <entry>
      <title>标签云</title>
      <link href="/tags/index.html"/>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
